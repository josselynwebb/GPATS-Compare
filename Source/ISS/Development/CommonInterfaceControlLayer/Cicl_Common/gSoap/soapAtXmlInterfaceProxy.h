/* soapAtXmlInterfaceProxy.h
   Generated by gSOAP 2.7.6c from atxml.h
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapAtXmlInterface_H
#define soapAtXmlInterface_H
#include "soapH.h"
class AtXmlInterface
{   public:
	struct soap *soap;
	const char *endpoint;
	AtXmlInterface()
	{ soap = soap_new(); endpoint = "http://localhost:7014/"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"atxml", "urn:atxml", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	virtual ~AtXmlInterface() { if (soap) { soap_destroy(soap); soap_end(soap); soap_done(soap); free((void*)soap); } };
	virtual int atxml__Initialize(char *ProcType, char *ProcUuid, int Pid, int *result) { return soap ? soap_call_atxml__Initialize(soap, endpoint, NULL, ProcType, ProcUuid, Pid, result) : SOAP_EOM; };
	virtual int atxml__Close(int Handle, char *ProcUuid, int Pid, int *result) { return soap ? soap_call_atxml__Close(soap, endpoint, NULL, Handle, ProcUuid, Pid, result) : SOAP_EOM; };
	virtual int atxml__RegisterInterUsed(int Handle, char *InterUsage, int *result) { return soap ? soap_call_atxml__RegisterInterUsed(soap, endpoint, NULL, Handle, InterUsage, result) : SOAP_EOM; };
	virtual int atxml__RetrieveTpsData(int Handle, struct atxml__RetrieveTpsDataResponse &r) { return soap ? soap_call_atxml__RetrieveTpsData(soap, endpoint, NULL, Handle, r) : SOAP_EOM; };
	virtual int atxml__RegisterTSF(int Handle, char *TSFSignalDefinition, char *TSFLibrary, char *STDTSF, char *STDBSC, int *result) { return soap ? soap_call_atxml__RegisterTSF(soap, endpoint, NULL, Handle, TSFSignalDefinition, TSFLibrary, STDTSF, STDBSC, result) : SOAP_EOM; };
	virtual int atxml__ValidateRequirements(int Handle, char *TestRequirements, char *Allocation, int BufferSize, struct atxml__ValidateRequirementsResponse &r) { return soap ? soap_call_atxml__ValidateRequirements(soap, endpoint, NULL, Handle, TestRequirements, Allocation, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__RegisterRemoveSequence(int Handle, char *RemoveSequence, int BufferSize, struct atxml__RegisterRemoveSequenceResponse &r) { return soap ? soap_call_atxml__RegisterRemoveSequence(soap, endpoint, NULL, Handle, RemoveSequence, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__TestStationStatus(int Handle, int BufferSize, struct atxml__TestStationStatusResponse &r) { return soap ? soap_call_atxml__TestStationStatus(soap, endpoint, NULL, Handle, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__RegisterInstStatus(int Handle, char *InstStatus, int BufferSize, struct atxml__RegisterInstStatusResponse &r) { return soap ? soap_call_atxml__RegisterInstStatus(soap, endpoint, NULL, Handle, InstStatus, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__RegisterTmaSelect(int Handle, char *TmaList, int *result) { return soap ? soap_call_atxml__RegisterTmaSelect(soap, endpoint, NULL, Handle, TmaList, result) : SOAP_EOM; };
	virtual int atxml__SubmitUutId(int Handle, char *UUT_Partnumber, char *UUT_Serialnumber, int TmaBufferSize, int RaBufferSize, struct atxml__SubmitUutIdResponse &r) { return soap ? soap_call_atxml__SubmitUutId(soap, endpoint, NULL, Handle, UUT_Partnumber, UUT_Serialnumber, TmaBufferSize, RaBufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueSignal(int Handle, char *SignalDescription, int BufferSize, struct atxml__IssueSignalResponse &r) { return soap ? soap_call_atxml__IssueSignal(soap, endpoint, NULL, Handle, SignalDescription, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__QueryInterStatus(int Handle, int BufferSize, struct atxml__QueryInterStatusResponse &r) { return soap ? soap_call_atxml__QueryInterStatus(soap, endpoint, NULL, Handle, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__InvokeRemoveAllSequence(int Handle, int BufferSize, struct atxml__InvokeRemoveAllSequenceResponse &r) { return soap ? soap_call_atxml__InvokeRemoveAllSequence(soap, endpoint, NULL, Handle, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueTestResults(int Handle, char *TestResults, int TPS_Status, int BufferSize, struct atxml__IssueTestResultsResponse &r) { return soap ? soap_call_atxml__IssueTestResults(soap, endpoint, NULL, Handle, TestResults, TPS_Status, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueTestResultsFile(int Handle, char *TestResultsFile, int TPS_Status, int BufferSize, struct atxml__IssueTestResultsFileResponse &r) { return soap ? soap_call_atxml__IssueTestResultsFile(soap, endpoint, NULL, Handle, TestResultsFile, TPS_Status, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueIst(int Handle, char *InstSelfTest, int BufferSize, struct atxml__IssueIstResponse &r) { return soap ? soap_call_atxml__IssueIst(soap, endpoint, NULL, Handle, InstSelfTest, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueNativeCmds(int Handle, char *InstrumentCmds, int BufferSize, struct atxml__IssueNativeCmdsResponse &r) { return soap ? soap_call_atxml__IssueNativeCmds(soap, endpoint, NULL, Handle, InstrumentCmds, BufferSize, r) : SOAP_EOM; };
	virtual int atxml__IssueDriverFunctionCall(int Handle, char *DriverFunction, int BufferSize, struct atxml__IssueDriverFunctionCallResponse &r) { return soap ? soap_call_atxml__IssueDriverFunctionCall(soap, endpoint, NULL, Handle, DriverFunction, BufferSize, r) : SOAP_EOM; };
};
#endif
