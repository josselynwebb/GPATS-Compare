#ifndef VEO2_FUNC_PTRS_H
#define VEO2_FUNC_PTRS_H

////////////////////////////////////////////////////////////////////////////////
// Function Pointers
// IRWin does not provide a header file, so the LoadLibrary() windows API is 
// called to load the DLL, and the function pointers are assigned.
////////////////////////////////////////////////////////////////////////////////

// common init function pointer - init function has no parameters
typedef void (CALLBACK* TN_INITIATE)();
TN_INITIATE	INITIATE;

// IR Boresight
typedef void (CALLBACK* TN_BORESIGHT_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float);
TN_BORESIGHT_IR_SETUP	BORESIGHT_IR_SETUP;
typedef void (CALLBACK* TN_BORESIGHT_IR_FETCH)(float*, float*, int*);
TN_BORESIGHT_IR_FETCH	BORESIGHT_IR_FETCH;

// IR Channel Integrity
typedef void (CALLBACK* TN_CHANNEL_INTEGRITY_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float, float);
TN_CHANNEL_INTEGRITY_IR_SETUP	CHANNEL_INTEGRITY_IR_SETUP;
typedef void (CALLBACK* TN_CHANNEL_INTEGRITY_IR_FETCH)(int[], int*);
TN_CHANNEL_INTEGRITY_IR_FETCH	CHANNEL_INTEGRITY_IR_FETCH;

// IR Geometric Fidelity Distortion
typedef void (CALLBACK* TN_GEOMETRIC_FIDELITY_DISTORTION_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, int, float*);
TN_GEOMETRIC_FIDELITY_DISTORTION_IR_SETUP	GEOMETRIC_FIDELITY_DISTORTION_IR_SETUP;
typedef void (CALLBACK* TN_GEOMETRIC_FIDELITY_DISTORTION_IR_FETCH)(float*, int*);
TN_GEOMETRIC_FIDELITY_DISTORTION_IR_FETCH	GEOMETRIC_FIDELITY_DISTORTION_IR_FETCH;

// IR Image Uniformity
typedef void (CALLBACK* TN_IMAGE_UNIFORMITY_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int);
TN_IMAGE_UNIFORMITY_IR_SETUP IMAGE_UNIFORMITY_IR_SETUP;
typedef void (CALLBACK* TN_IMAGE_UNIFORMITY_IR_FETCH)(float*, int*);
TN_IMAGE_UNIFORMITY_IR_FETCH IMAGE_UNIFORMITY_IR_FETCH;

// IR Minimum Resolvable Temperature Difference
typedef void(CALLBACK* TN_MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_SETUP)(int, int, float[], int[], int[]);
TN_MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_SETUP MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_SETUP;
typedef void(CALLBACK* TN_MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_FETCH)(float[], int*);
TN_MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_FETCH MINIMUM_RESOLVABLE_TEMPERATURE_DIFFERENCE_IR_FETCH;

// IR Modulation Transfer Function
typedef void (CALLBACK* TN_MODULATION_TRANSFER_FUNCTION_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, int, int, int, int, int);
TN_MODULATION_TRANSFER_FUNCTION_IR_SETUP MODULATION_TRANSFER_FUNCTION_IR_SETUP;
typedef void(CALLBACK* TN_MODULATION_TRANSFER_FUNCTION_IR_FETCH)(float[], int*);
TN_MODULATION_TRANSFER_FUNCTION_IR_FETCH MODULATION_TRANSFER_FUNCTION_IR_FETCH;

// IR Noise Equivalent Differential Temperature
typedef void (CALLBACK* TN_NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float, float, int, int, int, int);
TN_NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_SETUP NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_SETUP;
typedef void (CALLBACK* TN_NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_FETCH)(float*, int*);
TN_NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_FETCH NOISE_EQUIVALENT_DIFFERENTIAL_TEMPERATURE_IR_FETCH;

// LASER Beam Divergence
typedef void (CALLBACK* TN_BEAM_DIVERGENCE_LASER_SETUP)(int, int, int, int, int, float, int);
TN_BEAM_DIVERGENCE_LASER_SETUP BEAM_DIVERGENCE_LASER_SETUP;
typedef void (CALLBACK* TN_BEAM_DIVERGENCE_LASER_FETCH)(float*, int*);
TN_BEAM_DIVERGENCE_LASER_FETCH BEAM_DIVERGENCE_LASER_FETCH;

// LASER Boresight
typedef void (CALLBACK* TN_BORESIGHT_LASER_SETUP)(int, int, int, int, int, float, int, float);
TN_BORESIGHT_LASER_SETUP BORESIGHT_LASER_SETUP;
typedef void (CALLBACK* TN_BORESIGHT_LASER_FETCH)(float*, float*, float*, int*);
TN_BORESIGHT_LASER_FETCH BORESIGHT_LASER_FETCH;

// LASER Range Finder Accuracy
typedef void (CALLBACK* TN_RANGE_FINDER_ACCURACY_LASER_SETUP)(int, int, float, float, float, int, int, int, int, float);
TN_RANGE_FINDER_ACCURACY_LASER_SETUP RANGE_FINDER_ACCURACY_LASER_SETUP;
typedef void (CALLBACK* TN_RANGE_FINDER_ACCURACY_LASER_FETCH)(float*, int*);
TN_RANGE_FINDER_ACCURACY_LASER_FETCH RANGE_FINDER_ACCURACY_LASER_FETCH;

// LASER Receiver Sensitivity
typedef void (CALLBACK* TN_RECEIVER_SENSITIVITY_LASER_SETUP)(int, int, float, float, float, int, int, int, int, float);
TN_RECEIVER_SENSITIVITY_LASER_SETUP RECEIVER_SENSITIVITY_LASER_SETUP;
typedef void (CALLBACK* TN_RECEIVER_SENSITIVITY_LASER_FETCH)(float*, int*);
TN_RECEIVER_SENSITIVITY_LASER_FETCH RECEIVER_SENSITIVITY_LASER_FETCH;

// LASER Pulse Repetition Frequency
typedef void (CALLBACK* TN_PULSE_REPETITION_FREQUENCY_LASER_SETUP)(int, int, float, float);
TN_PULSE_REPETITION_FREQUENCY_LASER_SETUP PULSE_REPETITION_FREQUENCY_LASER_SETUP;
typedef void (CALLBACK* TN_PULSE_REPETITION_FREQUENCY_LASER_FETCH)(float*, float*, int*);
TN_PULSE_REPETITION_FREQUENCY_LASER_FETCH PULSE_REPETITION_FREQUENCY_LASER_FETCH;

// LASER Pulse Width
typedef void (CALLBACK* TN_PULSE_WIDTH_LASER_SETUP)(int, int, int, int, int, int, float);
TN_PULSE_WIDTH_LASER_SETUP PULSE_WIDTH_LASER_SETUP;
typedef void (CALLBACK* TN_PULSE_WIDTH_LASER_FETCH)(float*, float*, int*);
TN_PULSE_WIDTH_LASER_FETCH PULSE_WIDTH_LASER_FETCH;

// LASER Pulse Energy Measurements
typedef void (CALLBACK* TN_PULSE_ENERGY_MEASUREMENTS_LASER_SETUP)(int, int, int, int, int, int, float, int);
TN_PULSE_ENERGY_MEASUREMENTS_LASER_SETUP PULSE_ENERGY_MEASUREMENTS_LASER_SETUP;
typedef void (CALLBACK* TN_PULSE_ENERGY_MEASUREMENTS_LASER_FETCH)(float*, float*, int*);
TN_PULSE_ENERGY_MEASUREMENTS_LASER_FETCH PULSE_ENERGY_MEASUREMENTS_LASER_FETCH;

// VIS Boresight
typedef void (CALLBACK* TN_BORESIGHT_TV_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float);
TN_BORESIGHT_TV_VIS_SETUP BORESIGHT_TV_VIS_SETUP;
typedef void (CALLBACK* TN_BORESIGHT_TV_VIS_FETCH)(float*, float*, float*, int*);
TN_BORESIGHT_TV_VIS_FETCH BORESIGHT_TV_VIS_FETCH;

// VIS Geometric Fidelity Distortion
typedef void (CALLBACK* TN_GEOMETRIC_FIDELITY_DISTORTION_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, int, float[]);
TN_GEOMETRIC_FIDELITY_DISTORTION_VIS_SETUP GEOMETRIC_FIDELITY_DISTORTION_VIS_SETUP;
typedef void (CALLBACK* TN_GEOMETRIC_FIDELITY_DISTORTION_VIS_FETCH)(float*, int*);
TN_GEOMETRIC_FIDELITY_DISTORTION_VIS_FETCH GEOMETRIC_FIDELITY_DISTORTION_VIS_FETCH;

// VIS Camera Uniformity
typedef void (CALLBACK* TN_CAMERA_UNIFORMITY_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float);
TN_CAMERA_UNIFORMITY_VIS_SETUP CAMERA_UNIFORMITY_VIS_SETUP;
typedef void (CALLBACK* TN_CAMERA_UNIFORMITY_VIS_FETCH)(float*, int*);
TN_CAMERA_UNIFORMITY_VIS_FETCH CAMERA_UNIFORMITY_VIS_FETCH;

// VIS Gain
typedef void (CALLBACK* TN_GAIN_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float, float, float);
TN_GAIN_VIS_SETUP GAIN_VIS_SETUP;
typedef void (CALLBACK* TN_GAIN_VIS_FETCH)(float*, float*, int*);
TN_GAIN_VIS_FETCH GAIN_VIS_FETCH;

// VIS Minimum Resolvable Contrast
typedef void (CALLBACK* TN_MINIMUM_RESOLVABLE_CONTRAST_VIS_SETUP)(int, int, float*, int*, int*);
TN_MINIMUM_RESOLVABLE_CONTRAST_VIS_SETUP MINIMUM_RESOLVABLE_CONTRAST_VIS_SETUP;
typedef void (CALLBACK* TN_MINIMUM_RESOLVABLE_CONTRAST_VIS_FETCH)(float[], int*);
TN_MINIMUM_RESOLVABLE_CONTRAST_VIS_FETCH MINIMUM_RESOLVABLE_CONTRAST_VIS_FETCH;

// VIS Modulation Transfer Function
typedef void (CALLBACK* TN_MODULATION_TRANSFER_FUNCTION_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, int, int, int, int, int);
TN_MODULATION_TRANSFER_FUNCTION_VIS_SETUP MODULATION_TRANSFER_FUNCTION_VIS_SETUP;
typedef void (CALLBACK* TN_MODULATION_TRANSFER_FUNCTION_VIS_FETCH)(float[], int*);
TN_MODULATION_TRANSFER_FUNCTION_VIS_FETCH MODULATION_TRANSFER_FUNCTION_VIS_FETCH;

// VIS Shades of Gray
typedef void (CALLBACK* TN_SHADES_OF_GRAY_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float);
TN_SHADES_OF_GRAY_VIS_SETUP SHADES_OF_GRAY_VIS_SETUP;
typedef void (CALLBACK* TN_SHADES_OF_GRAY_VIS_FETCH)(int*, int*);
TN_SHADES_OF_GRAY_VIS_FETCH SHADES_OF_GRAY_VIS_FETCH;

// VIS NEI
typedef void (CALLBACK* TN_NEI_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float, float, float, int, int, int, int);
TN_NEI_VIS_SETUP NEI_VIS_SETUP;
typedef void (CALLBACK* TN_NEI_VIS_FETCH)(float*, int*);
TN_NEI_VIS_FETCH NEI_VIS_FETCH;

// update 12/10/07
// AUTOCOLLIMATE_VIS
typedef void (CALLBACK * TN_AUTOCOLLIMATE_VIS_SETUP)(int, int, float, float, float, int, int, int, int, int, int, int, int, float, float);
TN_AUTOCOLLIMATE_VIS_SETUP AUTOCOLLIMATE_VIS_SETUP;
typedef void (CALLBACK * TN_AUTOCOLLIMATE_VIS_FETCH)(float*, float*, int*);
TN_AUTOCOLLIMATE_VIS_FETCH AUTOCOLLIMATE_VIS_FETCH;

//////////////////////////////////////////////////
// Hardware control function pointers           //
//////////////////////////////////////////////////
// 3.1 RESET_MODULE
typedef void (CALLBACK* TN_RESET_MODULE_INITIATE)();
TN_RESET_MODULE_INITIATE RESET_MODULE_INITIATE;
// 3.2 GET_BIT_DATA
typedef void (CALLBACK* TN_GET_BIT_DATA_INITIATE)();
TN_GET_BIT_DATA_INITIATE GET_BIT_DATA_INITIATE;
typedef void (CALLBACK* TN_GET_BIT_DATA_FETCH)(int*);
TN_GET_BIT_DATA_FETCH GET_BIT_DATA_FETCH;
// 3.3 GET_MODULE_ID
typedef void (CALLBACK* TN_GET_MODULE_ID_INITIATE)();
TN_GET_MODULE_ID_INITIATE GET_MODULE_ID_INITIATE;
typedef void (CALLBACK* TN_GET_MODULE_ID_FETCH)(int*);
TN_GET_MODULE_ID_FETCH GET_MODULE_ID_FETCH;
// 3.4 GET_STATUS_BYTE_MESSAGE
typedef void (CALLBACK* TN_GET_STATUS_BYTE_MESSAGE_INITIATE)();
TN_GET_STATUS_BYTE_MESSAGE_INITIATE GET_STATUS_BYTE_MESSAGE_INITIATE;
typedef void (CALLBACK* TN_GET_STATUS_BYTE_MESSAGE_FETCH)(int*);
TN_GET_STATUS_BYTE_MESSAGE_FETCH GET_STATUS_BYTE_MESSAGE_FETCH;
// 3.5 GET_TEMP_TARGET_IR
typedef void (CALLBACK* TN_GET_TEMP_TARGET_IR_INITIATE)();
TN_GET_TEMP_TARGET_IR_INITIATE GET_TEMP_TARGET_IR_INITIATE;
typedef void (CALLBACK* TN_GET_TEMP_TARGET_IR_FETCH)(float*);
TN_GET_TEMP_TARGET_IR_FETCH GET_TEMP_TARGET_IR_FETCH;
// 3.6 SET_RDY_WINDOW_IR
typedef void (CALLBACK* TN_SET_RDY_WINDOW_IR_INITIATE)(float);
TN_SET_RDY_WINDOW_IR_INITIATE SET_RDY_WINDOW_IR_INITIATE;
typedef void (CALLBACK* TN_SET_RDY_WINDOW_IR_FETCH)(float*);
TN_SET_RDY_WINDOW_IR_FETCH SET_RDY_WINDOW_IR_FETCH;
// 3.7 SET_TARGET_POSITION
typedef void (CALLBACK* TN_SET_TARGET_POSITION_INITIATE)(int);
TN_SET_TARGET_POSITION_INITIATE SET_TARGET_POSITION_INITIATE;
typedef void (CALLBACK* TN_SET_TARGET_POSITION_FETCH)(int*);
TN_SET_TARGET_POSITION_FETCH SET_TARGET_POSITION_FETCH;
// 3.8 SET_TEMP_ABSOLUTE_IR
typedef void (CALLBACK* TN_SET_TEMP_ABSOLUTE_IR_INITIATE)(float);
TN_SET_TEMP_ABSOLUTE_IR_INITIATE SET_TEMP_ABSOLUTE_IR_INITIATE;
typedef void (CALLBACK* TN_SET_TEMP_ABSOLUTE_IR_FETCH)(float*);
TN_SET_TEMP_ABSOLUTE_IR_FETCH SET_TEMP_ABSOLUTE_IR_FETCH;
// 3.9 SET_TEMP_DIFFERENTIAL_IR
typedef void (CALLBACK* TN_SET_TEMP_DIFFERENTIAL_IR_INITIATE)(float);
TN_SET_TEMP_DIFFERENTIAL_IR_INITIATE SET_TEMP_DIFFERENTIAL_IR_INITIATE;
typedef void (CALLBACK* TN_SET_TEMP_DIFFERENTIAL_IR_FETCH)(float*);
TN_SET_TEMP_DIFFERENTIAL_IR_FETCH SET_TEMP_DIFFERENTIAL_IR_FETCH;
// 3.10 SET_CAMERA_TRIGGER_LASER
typedef void (CALLBACK* TN_SET_CAMERA_TRIGGER_LASER_INITIATE)(int);
TN_SET_CAMERA_TRIGGER_LASER_INITIATE SET_CAMERA_TRIGGER_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_CAMERA_TRIGGER_LASER_FETCH)(int*);
TN_SET_CAMERA_TRIGGER_LASER_FETCH SET_CAMERA_TRIGGER_LASER_FETCH;
// 3.11 SET_CAMERA_DELAY_LASER
typedef void (CALLBACK* TN_SET_CAMERA_DELAY_LASER_INITIATE)(float);
TN_SET_CAMERA_DELAY_LASER_INITIATE SET_CAMERA_DELAY_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_CAMERA_DELAY_LASER_FETCH)(float*);
TN_SET_CAMERA_DELAY_LASER_FETCH SET_CAMERA_DELAY_LASER_FETCH;
// 3.12 SET_SOURCE_STAGE_LASER
typedef void (CALLBACK* TN_SET_SOURCE_STAGE_LASER_INITIATE)(int);
TN_SET_SOURCE_STAGE_LASER_INITIATE SET_SOURCE_STAGE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_SOURCE_STAGE_LASER_FETCH)(int*);
TN_SET_SOURCE_STAGE_LASER_FETCH SET_SOURCE_STAGE_LASER_FETCH;
// 3.13 SET_SENSOR_STAGE_LASER
typedef void (CALLBACK* TN_SET_SENSOR_STAGE_LASER_INITIATE)(int);
TN_SET_SENSOR_STAGE_LASER_INITIATE SET_SENSOR_STAGE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_SENSOR_STAGE_LASER_FETCH)(int*);
TN_SET_SENSOR_STAGE_LASER_FETCH SET_SENSOR_STAGE_LASER_FETCH;
// 3.16 SELECT_DIODE_LASER
typedef void (CALLBACK* TN_SELECT_DIODE_LASER_INITIATE)(int);
TN_SELECT_DIODE_LASER_INITIATE SELECT_DIODE_LASER_INITIATE;
typedef void (CALLBACK* TN_SELECT_DIODE_LASER_FETCH)(int*);
TN_SELECT_DIODE_LASER_FETCH SELECT_DIODE_LASER_FETCH;
// 3.17 SET_TRIGGER_SOURCE_LASER
typedef void (CALLBACK* TN_SET_TRIGGER_SOURCE_LASER_INITIATE)(int);
TN_SET_TRIGGER_SOURCE_LASER_INITIATE SET_TRIGGER_SOURCE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_TRIGGER_SOURCE_LASER_FETCH)(int*);
TN_SET_TRIGGER_SOURCE_LASER_FETCH SET_TRIGGER_SOURCE_LASER_FETCH;
// 3.18 SET_COARSE_EVOA_LASER
typedef void (CALLBACK* TN_SET_COARSE_EVOA_LASER_INITIATE)(float);
TN_SET_COARSE_EVOA_LASER_INITIATE SET_COARSE_EVOA_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_COARSE_EVOA_LASER_FETCH)(float*);
TN_SET_COARSE_EVOA_LASER_FETCH SET_COARSE_EVOA_LASER_FETCH;
// 3.19 SET_FINE_EVOA_LASER
typedef void (CALLBACK* TN_SET_FINE_EVOA_LASER_INITIATE)(float);
TN_SET_FINE_EVOA_LASER_INITIATE SET_FINE_EVOA_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_FINE_EVOA_LASER_FETCH)(float*);
TN_SET_FINE_EVOA_LASER_FETCH SET_FINE_EVOA_LASER_FETCH;
// 3.20 SET_PULSE_AMPLITUDE_LASER
typedef void (CALLBACK* TN_SET_PULSE_AMPLITUDE_LASER_INITIATE)(float);
TN_SET_PULSE_AMPLITUDE_LASER_INITIATE SET_PULSE_AMPLITUDE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_PULSE_AMPLITUDE_LASER_FETCH)(float*);
TN_SET_PULSE_AMPLITUDE_LASER_FETCH SET_PULSE_AMPLITUDE_LASER_FETCH;
// 3.21 SET_PULSE_PERIOD_LASER
typedef void (CALLBACK* TN_SET_PULSE_PERIOD_LASER_INITIATE)(float);
TN_SET_PULSE_PERIOD_LASER_INITIATE SET_PULSE_PERIOD_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_PULSE_PERIOD_LASER_FETCH)(float*);
TN_SET_PULSE_PERIOD_LASER_FETCH SET_PULSE_PERIOD_LASER_FETCH;
// 3.23 SET_RANGE_EMULATION_LASER
typedef void (CALLBACK* TN_SET_RANGE_EMULATION_LASER_INITIATE)(float);
TN_SET_RANGE_EMULATION_LASER_INITIATE SET_RANGE_EMULATION_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_RANGE_EMULATION_LASER_FETCH)(float*);
TN_SET_RANGE_EMULATION_LASER_FETCH SET_RANGE_EMULATION_LASER_FETCH;
// 3.24 SET_PULSE2_DELAY_LASER
typedef void (CALLBACK* TN_SET_PULSE2_DELAY_LASER_INITIATE)(float);
TN_SET_PULSE2_DELAY_LASER_INITIATE SET_PULSE2_DELAY_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_PULSE2_DELAY_LASER_FETCH)(float*);
TN_SET_PULSE2_DELAY_LASER_FETCH SET_PULSE2_DELAY_LASER_FETCH;
// 3.25 SELECT_LARGER_PULSE_LASER
typedef void (CALLBACK* TN_SELECT_LARGER_PULSE_LASER_INITIATE)(int);
TN_SELECT_LARGER_PULSE_LASER_INITIATE SELECT_LARGER_PULSE_LASER_INITIATE;
typedef void (CALLBACK* TN_SELECT_LARGER_PULSE_LASER_FETCH)(int*);
TN_SELECT_LARGER_PULSE_LASER_FETCH SELECT_LARGER_PULSE_LASER_FETCH;
// 3.26 SET_PULSE_PERCENTAGE_LASER
typedef void (CALLBACK* TN_SET_PULSE_PERCENTAGE_LASER_INITIATE)(float);
TN_SET_PULSE_PERCENTAGE_LASER_INITIATE SET_PULSE_PERCENTAGE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_PULSE_PERCENTAGE_LASER_FETCH)(float*);
TN_SET_PULSE_PERCENTAGE_LASER_FETCH SET_PULSE_PERCENTAGE_LASER_FETCH;
// 3.27 SET_OPERATION_LASER
typedef void (CALLBACK* TN_SET_OPERATION_LASER_INITIATE)(int);
TN_SET_OPERATION_LASER_INITIATE SET_OPERATION_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_OPERATION_LASER_FETCH)(int*);
TN_SET_OPERATION_LASER_FETCH SET_OPERATION_LASER_FETCH;
// 3.28 SET_ANGULAR_RATE_VIS
typedef void (CALLBACK* TN_SET_ANGULAR_RATE_VIS_INITIATE)(float);
TN_SET_ANGULAR_RATE_VIS_INITIATE SET_ANGULAR_RATE_VIS_INITIATE;
typedef void (CALLBACK* TN_SET_ANGULAR_RATE_VIS_FETCH)(float*);
TN_SET_ANGULAR_RATE_VIS_FETCH SET_ANGULAR_RATE_VIS_FETCH;
// 3.29 SET_RADIANCE_VIS
typedef void (CALLBACK* TN_SET_RADIANCE_VIS_INITIATE)(float);
TN_SET_RADIANCE_VIS_INITIATE SET_RADIANCE_VIS_INITIATE;
typedef void (CALLBACK* TN_SET_RADIANCE_VIS_FETCH)(float*);
TN_SET_RADIANCE_VIS_FETCH SET_RADIANCE_VIS_FETCH;
// 3.30 SET_LARRS_AZ_LASER
typedef void (CALLBACK* TN_SET_LARRS_AZ_LASER_INITIATE)(int);
TN_SET_LARRS_AZ_LASER_INITIATE SET_LARRS_AZ_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_LARRS_AZ_LASER_FETCH)(int*);
TN_SET_LARRS_AZ_LASER_FETCH SET_LARRS_AZ_LASER_FETCH;
// 3.31 SET_LARRS_EL_LASER
typedef void (CALLBACK* TN_SET_LARRS_EL_LASER_INITIATE)(int);
TN_SET_LARRS_EL_LASER_INITIATE SET_LARRS_EL_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_LARRS_EL_LASER_FETCH)(int*);
TN_SET_LARRS_EL_LASER_FETCH SET_LARRS_EL_LASER_FETCH;
// 3.32 SET_LARRS_POLARIZE_LASER
typedef void (CALLBACK* TN_SET_LARRS_POLARIZE_LASER_INITIATE)(int);
TN_SET_LARRS_POLARIZE_LASER_INITIATE SET_LARRS_POLARIZE_LASER_INITIATE;
typedef void (CALLBACK* TN_SET_LARRS_POLARIZE_LASER_FETCH)(int*);
TN_SET_LARRS_POLARIZE_LASER_FETCH SET_LARRS_POLARIZE_LASER_FETCH;
// 3.33 SET_CAMERA_POWER
typedef void (CALLBACK* TN_SET_CAMERA_POWER_INITIATE)(int);
TN_SET_CAMERA_POWER_INITIATE SET_CAMERA_POWER_INITIATE;
typedef void (CALLBACK* TN_SET_CAMERA_POWER_FETCH)(int*);
TN_SET_CAMERA_POWER_FETCH SET_CAMERA_POWER_FETCH;
// 3.34 GET_CALIBRATION_VALUE
typedef void (CALLBACK* TN_GET_CALIBRATION_VALUE_INITIATE)(int);
TN_GET_CALIBRATION_VALUE_INITIATE GET_CALIBRATION_VALUE_INITIATE;
typedef void (CALLBACK* TN_GET_CALIBRATION_VALUE_FETCH)(float*);
TN_GET_CALIBRATION_VALUE_FETCH GET_CALIBRATION_VALUE_FETCH;
// 3.35 SET_SYSTEM_CONFIGURATION
typedef void (CALLBACK* TN_SET_SYSTEM_CONFIGURATION_INITIATE)(int);
TN_SET_SYSTEM_CONFIGURATION_INITIATE SET_SYSTEM_CONFIGURATION_INITIATE;
typedef void (CALLBACK* TN_SET_SYSTEM_CONFIGURATION_FETCH)(int*);
TN_SET_SYSTEM_CONFIGURATION_FETCH SET_SYSTEM_CONFIGURATION_FETCH;
// 3.36 SET_LASER_TEST
typedef void (CALLBACK* TN_SET_LASER_TEST_INITIATE)(int);
TN_SET_LASER_TEST_INITIATE SET_LASER_TEST_INITIATE;
typedef void (CALLBACK* TN_SET_LASER_TEST_FETCH)(int*);
TN_SET_LASER_TEST_FETCH SET_LASER_TEST_FETCH;
// 3.37 IRWIN_SHUTDOWN
typedef void (CALLBACK* TN_IRWIN_SHUTDOWN)();
TN_IRWIN_SHUTDOWN IRWIN_SHUTDOWN;

#endif