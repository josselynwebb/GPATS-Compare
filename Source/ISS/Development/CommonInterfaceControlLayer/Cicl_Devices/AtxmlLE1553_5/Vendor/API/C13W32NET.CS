using System;
using System.Runtime.InteropServices;

namespace BALLARD
{
    public class C13W32
    {
        /**
        *
        *  CM1553-3 WIN32 DRIVER  Version 1.6.1  (02/01/2008)
        *  Copyright (c) 1999-2008
        *  Ballard Technology, Inc.
        *  www.ballardtech.com
        *  support@ballardtech.com
        *  ALL RIGHTS RESERVED
        *
        *  NAME:   C13W32NET.CS -- 32-bit
        *                      CM1553-3 Driver Include Header File.
        *
        **/

        /**
        *
        *  Structs used by the C13 Driver.
        *
        **/

        [StructLayout(LayoutKind.Sequential)]
        public struct XMITFIELDS
        {
            public UInt32 ctrlflags;           //User writes message configuration optionvals
            public UInt16 flag1;               //Card writes message flag 1
            public UInt16 flag2;               //Card writes message flag 2
            public UInt16 errflags;            //Card writes errorval flags
            public UInt16 actflags;            //Card writes activity flags
            public UInt16 resptime1;           //Card writes response time 1
            public UInt16 resptime2;           //Card writes response time 2
            public UInt16 datacount;           //Card writes data count
            public UInt16 resv7;               //Reserved field
            public UInt32 timetag;             //Card writes time tag
            public UInt32 elapsetime;          //Card writes elapsed time
            public UInt16 resv12;              //Reserved field
            public UInt16 resv13;              //Reserved field
            public UInt16 resv14;              //Reserved field
            public UInt16 resv15;              //Reserved field
            public UInt16 resv16;              //Reserved field
            public UInt16 resv17;              //Reserved field
            public UInt16 resv18;              //Reserved field
            public UInt16 resv19;              //Reserved field
            public UInt16 cwd1;                //User writes command word 1
            public UInt16 cwd2;                //User writes command word 2
            public UInt16 swd1;                //Card writes status word 1
            public UInt16 swd2;                //Card writes status word 2
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
            public UInt16[] data;	//User writes data words
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
            public UInt16[] extra;	//User writes extra words
        }

        /**
        *
        *  C13 Driver functions.
        *
        **/

        /**
        *
        *  Internal functions used by the C13 Driver.
        *
        **/

        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCConfig@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCConfig(UInt32 configval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCCreateList@28", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCCreateList(UInt32 listconfigval, Int32 count, UInt32 msgconfigval, UInt16 cwd1, UInt16 cwd2, ref UInt16 data, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCCreateMsg@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCCreateMsg(UInt32 configval, UInt16 cwd1, UInt16 cwd2, ref UInt16 data, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedFrame@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedFrame(UInt32 timeval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedMsg@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedMsg(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedRetry@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedRetry(UInt16 condition, UInt16 retries, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCTransmitMsg@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCTransmitMsg(ref XMITFIELDS xmitfieldsval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCTransmitMsgEx@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCTransmitMsgEx(ref XMITFIELDS xmitfieldsval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardClose@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardClose(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardOpen@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CardOpen(Int32 cardnum);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardReset@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CardReset(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardStart@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardStart(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardStop@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardStop(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorCtrl@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorCtrl(UInt32 ctrlval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorDefine@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorDefine(UInt32 defineval, UInt16 errvalue, Int32 countval, UInt16 wordpos, UInt16 bitpos, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorSent@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorSent(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorTagBC@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorTagBC(Int32 tagval, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorTagRT@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorTagRT(Int32 tagval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListDataRd@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListDataRd(ref UInt16 buf, Int32 count, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListDataWr@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListDataWr(ref UInt16 buf, Int32 count, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonBlkRd@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MonBlkRd(ref UInt16 buf, UInt32 bufcount, ref UInt32 blkcnt, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonBlkRdEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MonBlkRdEx(ref UInt16 buf, UInt32 bufcount, UInt32 maxblkcnt, ref UInt32 blkcnt, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonConfig@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonConfig(UInt32 configval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonFilterSA@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonFilterSA(Int32 taval, UInt32 rcvsamask, UInt32 xmtsamask, UInt32 rcvmcmask, UInt32 xmtmcmask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonFilterTA@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonFilterTA(UInt32 tamask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonIsRunning@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonIsRunning(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MonRd(ref UInt16 buf, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgDataRd@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgDataRd(ref UInt16 buf, Int32 count, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgDataWr@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgDataWr(ref UInt16 buf, Int32 count, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgFieldRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgFieldRd(UInt16 fieldtype, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgFieldWr@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgFieldWr(UInt32 fieldval, UInt16 fieldtype, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayConfig@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_PlayConfig(UInt32 configval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_PlayWr(ref UInt16 buf, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTConfig@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_RTConfig(UInt32 configval, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTCreateList@32", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RTCreateList(UInt32 listconfigval, Int32 count, UInt32 msgconfigval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTCreateMsg@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RTCreateMsg(UInt32 configval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTGetMsg@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RTGetMsg(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTSWDWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_RTSWDWr(UInt16 swdval, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValPackCWD@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ValPackCWD(Int32 taval, Int32 trflag, Int32 saval, Int32 wcval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValUnpackCWD@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ValUnpackCWD(UInt16 cwdval, ref Int32 taval, ref Int32 trflag, ref Int32 saval, ref Int32 wcval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AddrDSP@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_AddrDSP(UInt32 addr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AddrHost@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_AddrHost(UInt32 addr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiCat@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_AsciiCat(ref string strdest, ref string strsrc);
        public static string C13_AsciiCat(ref string strdest, ref string strsrc) { return Marshal.PtrToStringAnsi(_C13_AsciiCat(ref strdest, ref strsrc)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiCmpi@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiCmpi(ref string str1, ref string str2);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiCpy@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_AsciiCpy(ref string strdest, ref string strsrc);
        public static string C13_AsciiCpy(ref string strdest, ref string strsrc) { return Marshal.PtrToStringAnsi(_C13_AsciiCpy(ref strdest, ref strsrc)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiFromNibble@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiFromNibble(char ch);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiFromVal@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_AsciiFromVal(UInt32 value, ref string asciistr, Int32 numbits, Int32 radixval);
        public static string C13_AsciiFromVal(UInt32 value, ref string asciistr, Int32 numbits, Int32 radixval) { return Marshal.PtrToStringAnsi(_C13_AsciiFromVal(value, ref asciistr, numbits, radixval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiInc@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_AsciiInc(ref string asciistr);
        public static string C13_AsciiInc(ref string asciistr) { return Marshal.PtrToStringAnsi(_C13_AsciiInc(ref asciistr)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiIncc@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_AsciiIncc(ref string asciistr);
        public static string C13_AsciiIncc(ref string asciistr) { return Marshal.PtrToStringAnsi(_C13_AsciiIncc(ref asciistr)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiIsLower@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiIsLower(Int32 value);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiIsRadix@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiIsRadix(ref string asciistr, Int32 radixval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiLenVal@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiLenVal(Int32 numbits, Int32 radixval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiToUpper@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_AsciiToUpper(Int32 value);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiToVal@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_AsciiToVal(ref string asciistr, Int32 radixval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiTrimLead@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_AsciiTrimLead(ref string buf);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiTrimTrail@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_AsciiTrimTrail(ref string buf);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_AsciiTrimZero@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_AsciiTrimZero(ref string buf);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCConfigEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCConfigEx(UInt32 configval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCConfigMsg@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCConfigMsg(UInt32 configval, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCCreateListEx@32", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCCreateListEx(UInt32 listconfigval, Int32 skipval, Int32 count, UInt32 msgconfigval, UInt16 cwd1, UInt16 cwd2, ref UInt16 data, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCCreateListExx@32", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCCreateListExx(UInt32 listconfigval, Int32 skipval, Int32 count, UInt32 msgconfigval, UInt16 cwd1, UInt16 cwd2, ref UInt16 data, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCGetMsg@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BCGetMsg(Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedAgain@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedAgain(Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedBranch@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedBranch(UInt16 condition, Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedBranchDin0@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedBranchDin0(Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedBranchDin1@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedBranchDin1(Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedBranchEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedBranchEx(UInt16 condition1, UInt16 condition2, UInt16 condition3, Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedBuild@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedBuild(UInt16 nummsgs, ref UInt32 msgaddr, ref UInt16 freq, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedCall@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedCall(Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedCallCond@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedCallCond(UInt16 condition, Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedCallCondEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedCallCondEx(UInt16 condition1, UInt16 condition2, UInt16 condition3, Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedEntry@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedEntry(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedFrameEnd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedFrameEnd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedFrameStart@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedFrameStart(UInt32 timeval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedGap@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedGap(UInt16 gapval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedGoto@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedGoto(Int32 destindex, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedHalt@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedHalt(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedInt@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedInt(UInt16 tagval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedIntCond@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedIntCond(UInt16 condition, UInt16 tagval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedIntCondEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedIntCondEx(UInt16 condition1, UInt16 condition2, UInt16 condition3, UInt16 tagval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedNop@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedNop(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedPause@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedPause(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedPulse@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedPulse(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedPulse0@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedPulse0(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedPulse1@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedPulse1(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedRestart@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedRestart(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedRetryEx@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedRetryEx(UInt16 condition1, UInt16 condition2, UInt16 condition3, UInt16 retryflag, UInt16 retries, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedReturn@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedReturn(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSchedUser@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSchedUser(UInt32 useraddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSetEntry@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSetEntry(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BCSetTimeout@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BCSetTimeout(UInt16 timeoutval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkAddr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BlkAddr(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkOptRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_BlkOptRd(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkOptWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkOptWr(UInt16 rtopt, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkPtrRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_BlkPtrRd(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkPtrWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_BlkPtrWr(UInt32 descaddr, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkRd(ref UInt16 block, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkReset@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkReset(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkSWDRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_BlkSWDRd(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkSWDWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkSWDWr(UInt16 swdval, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkWipe@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkWipe(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_BlkWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_BlkWr(ref UInt16 block, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardBoot@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardBoot(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardCloseAll@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardCloseAll();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardConfig@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardConfig(Int32 enableflag, UInt16 command, UInt16 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardGetInfo@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CardGetInfo(UInt16 infotype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardGetInfos@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_CardGetInfos(UInt32 handleval);
        public static string C13_CardGetInfos(UInt32 handleval) { return Marshal.PtrToStringAnsi(_C13_CardGetInfos(handleval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardGetParam@36", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardGetParam(ref string cardstr, ref Int32 cardnum, ref Int32 devnum, ref UInt32 sizval, ref UInt16 memval, ref UInt16 ioval, ref UInt16 irqval, ref UInt16 spdval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardInit@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CardInit();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardIsRunning@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardIsRunning(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardOpenEx@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CardOpenEx(ref string cardname, Int32 cardnum);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardOpenExx@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CardOpenExx(ref string cardname, Int32 cardnum, IntPtr happwnd, UInt16 uiremovalmsg);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardResetEx@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CardResetEx(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardResume@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardResume(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTest@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardTest(UInt16 level, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTest0@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardTest0(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTest1@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardTest1(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTest2@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardTest2(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTest3@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CardTest3(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CardTrigger@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CardTrigger(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdAddr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CmdAddr(Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdAlloc@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CmdAlloc(Int32 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdAllocEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CmdAllocEx(UInt32 configval, Int32 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdBaseRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_CmdBaseRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdBaseWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdBaseWr(UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCountRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_CmdCountRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCountWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdCountWr(UInt16 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCtrlRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_CmdCtrlRd(Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCtrlWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdCtrlWr(UInt16 ctrlval, Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCurrRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_CmdCurrRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdCurrWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdCurrWr(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdInit@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdInit(UInt16 opcode, ref UInt16 block);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdInsert@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdInsert(ref UInt16 block, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdMaxRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_CmdMaxRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdMaxWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdMaxWr(UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdRd(ref UInt16 block, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdShotWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdShotWr(Int32 value, Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdSkipWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdSkipWr(Int32 value, Int32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdStackClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdStackClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdStartRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_CmdStartRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdStartWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdStartWr(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdTotalRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdTotalRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdTotalWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_CmdTotalWr(Int32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CmdWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CmdWr(ref UInt16 block, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommCall@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommCall(UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommCheck@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommCheck(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommCheckEx@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommCheckEx(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommConfig@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommConfig(Int32 enableflag, UInt16 command, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataRdL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataRdL(ref UInt32 valueptr, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataRdsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataRdsW(ref UInt16 valueptr, UInt32 addrval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataRdW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataRdW(ref UInt16 valueptr, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataWrL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataWrL(UInt32 value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataWrsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataWrsW(ref UInt16 valueptr, UInt32 addrval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDataWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDataWrW(UInt16 value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommDisable@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommDisable(UInt16 command, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommEnable@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommEnable(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommErrRdsW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommErrRdsW(ref UInt16 errbuf, UInt16 errbufcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommErrWrsW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommErrWrsW(ref UInt16 errbuf, UInt16 errbufcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommGlobRdW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommGlobRdW(ref UInt16 valueptr, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommGlobWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommGlobWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommInfoRdsW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommInfoRdsW(ref UInt16 bufmodel, UInt16 bufmodelcount, ref UInt16 buffeature, UInt16 buffeaturecount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommProgRdW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommProgRdW(ref UInt16 valueptr, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommProgWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommProgWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommRun@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommRun(ref UInt16 dataptr, UInt16 datacount, ref UInt16 progptr, UInt16 progcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommStart@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommStart(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_CommStop@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_CommStop(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARClear@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_DARClear(UInt16 maskval, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARGet@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DARGet(UInt16 maskval, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARRdL@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DARRdL(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_DARRdW(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARSet@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_DARSet(UInt16 maskval, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARWrL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_DARWrL(UInt32 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DARWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_DARWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescAddr@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescAddr(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescAlloc@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescAlloc(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescConfig@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DescConfig(UInt32 configval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescOptRd@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_DescOptRd(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescOptWr@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_DescOptWr(UInt16 descopt, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescPtrRd@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescPtrRd(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescPtrWr@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescPtrWr(UInt32 msgaddr, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescRd@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescRd(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, ref UInt16 desc, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DescWr@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_DescWr(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, ref UInt16 desc, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Div@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Div(UInt32 diva, UInt32 divb);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DllUsageCount@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DllUsageCount();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspBioClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspBioClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspBioRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspBioRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspBioSet@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspBioSet(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspIntfClear@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspIntfClear(UInt16 intmask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspIntfRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspIntfRd(UInt16 intmask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspIntmClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspIntmClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspIntmSet@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspIntmSet(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspXfClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspXfClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspXfRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspXfRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_DspXfSet@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_DspXfSet(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrDesc@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_ErrDesc(Int32 errval);
        public static string C13_ErrDesc(Int32 errval) { return Marshal.PtrToStringAnsi(_C13_ErrDesc(errval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrDescStr@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_ErrDescStr(Int32 errval);
        public static string C13_ErrDescStr(Int32 errval) { return Marshal.PtrToStringAnsi(_C13_ErrDescStr(errval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrName@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_ErrName(Int32 errval);
        public static string C13_ErrName(Int32 errval) { return Marshal.PtrToStringAnsi(_C13_ErrName(errval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorIsTaggedBC@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorIsTaggedBC(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorIsTaggedRT@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorIsTaggedRT(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorResponse@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorResponse(UInt16 responseval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorSync@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ErrorSync(Int32 value, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ErrorTimeout@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ErrorTimeout(UInt16 timeoutval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ExtDinRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ExtDinRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ExtDoutRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ExtDoutRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ExtDoutWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ExtDoutWr(Int32 doutval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileClose@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_FileClose(IntPtr handle);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileErr@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_FileErr();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileErrClear@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_FileErrClear();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileErrSet@0", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_FileErrSet();
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileOpenRead@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern unsafe IntPtr* C13_FileOpenRead(ref string filename);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileOpenWrite@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern unsafe IntPtr* C13_FileOpenWrite(ref string filename);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileRead@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_FileRead(IntPtr handle, IntPtr buffer, UInt16 count);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileSeek@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_FileSeek(IntPtr handle, UInt32 offset);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileTell@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_FileTell(IntPtr handle);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_FileWrite@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_FileWrite(IntPtr handle, IntPtr buffer, UInt16 count);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GetHigh@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_GetHigh(UInt32 val);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GetLow@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_GetLow(UInt32 val);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GetOff@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_GetOff(IntPtr valptr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GetSeg@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_GetSeg(IntPtr valptr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GlobalRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_GlobalRdW(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_GlobalWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_GlobalWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleClose@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleClose(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleDel@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleDel(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleIns@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HandleIns(ref string cardname, Int32 cardnum, IntPtr happwnd, UInt16 uiremovalmsg);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleOkay@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleOkay(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleOpen@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleOpen(ref string cardname, Int32 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleOpenWin@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleOpenWin(ref string cardname, Int32 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HandleVer@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HandleVer(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapAlloc@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapAlloc(UInt32 wordcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapAllocAll@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapAllocAll(ref UInt32 wordcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapAllocAllDPM@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapAllocAllDPM(ref UInt32 wordcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapAllocDPM@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapAllocDPM(UInt32 wordcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapAllocEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapAllocEx(UInt16 configval, UInt32 wordcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapWipe@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapWipe(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HeapWipeDPM@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HeapWipeDPM(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMAddrRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_HPMAddrRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMAddrWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HPMAddrWr(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMCtrlRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern byte C13_HPMCtrlRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMCtrlWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HPMCtrlWr(byte value, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMDataRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_HPMDataRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMDataRds@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HPMDataRds(ref UInt16 valueptr, UInt16 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMDataWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HPMDataWr(UInt16 value, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMDataWrs@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_HPMDataWrs(ref UInt16 valueptr, UInt16 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMRdL@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_HPMRdL(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMRdsL@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMRdsL(ref UInt32 valueptr, UInt16 addrval, Int32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMRdsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMRdsW(ref UInt16 valueptr, UInt16 addrval, Int32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_HPMRdW(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMWrL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMWrL(UInt32 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMWrsL@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMWrsL(ref UInt32 valueptr, UInt16 addrval, Int32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMWrsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMWrsW(ref UInt16 valueptr, UInt16 addrval, Int32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_HPMWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_HPMWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntConfig@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntConfig(UInt16 configval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntDisable@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntDisable(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntEnable@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntEnable(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntEnableCond@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntEnableCond(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntGet@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern unsafe IntPtr* C13_IntGet(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntInstall@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntInstall(IntPtr hevent, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_IntRd(ref UInt16 typevalval, ref UInt16 infoval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntReset@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_IntReset(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntStatus@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntStatus(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IntUninstall@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_IntUninstall(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IORdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_IORdW(Int32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IOWINRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_IOWINRdW(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IOWINWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_IOWINWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_IOWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_IOWrW(UInt16 value, Int32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernBegin@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        unsafe public static extern Int32 C13_KernBegin(IntPtr* vxdptr, ref string cardstr, ref string cardname);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernEnd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernEnd(IntPtr vxdptr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIntClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIntClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIntInstall@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIntInstall(IntPtr hevent, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIntParam@32", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIntParam(UInt32 clraddr, UInt32 clrwidth, UInt32 clrvalue, UInt32 stataddr, UInt32 statwidth, UInt32 statvalue, UInt32 statmask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIntStatus@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIntStatus(ref Int32 valueptr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIntUninstall@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIntUninstall(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIORdB@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIORdB(ref byte valueptr, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernIOWrB@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernIOWrB(byte value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMCopyB@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMCopyB(IntPtr destptr, IntPtr srcptr, UInt16 countval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMFillW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMFillW(UInt16 value, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMRdB@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMRdB(ref byte valueptr, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMRdL@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMRdL(ref UInt32 valueptr, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMRdsL@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMRdsL(ref UInt32 bufptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMRdsW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMRdsW(ref UInt16 bufptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMRdW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMRdW(ref UInt16 valueptr, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMWrB@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMWrB(byte value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMWrL@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMWrL(UInt32 value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMWrsL@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMWrsL(ref UInt32 bufptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMWrsW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMWrsW(ref UInt16 bufptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernMEMWrW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernMEMWrW(UInt16 value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_KernStatus@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_KernStatus(ref UInt32 valueptr, UInt32 typeval, UInt32 index, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListAddr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListAddr(Int32 index, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListAddrEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListAddrEx(Int32 index, UInt32 listaddr, ref UInt16 header);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListBlockRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListBlockRd(ref UInt16 buf, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListBlockRdEx@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListBlockRdEx(ref UInt16 buf, Int32 index, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListBlockWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListBlockWr(ref UInt16 buf, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListBlockWrEx@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListBlockWrEx(ref UInt16 buf, Int32 index, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListClear@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListClear(UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListConfig@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListConfig(UInt32 configval, Int32 count, UInt16 skipval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListConfigEx@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListConfigEx(UInt32 configval, Int32 count, UInt16 skipval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListDataRdEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListDataRdEx(ref UInt16 buf, Int32 count, Int32 index, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListDataWrEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListDataWrEx(ref UInt16 buf, Int32 count, Int32 index, UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListInit@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListInit(UInt32 listaddr, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListNextRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListNextRd(UInt32 listaddr, ref UInt16 header);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListNextWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ListNextWr(UInt32 listaddr, ref UInt16 header);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListPostRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ListPostRd(UInt32 listaddr, ref UInt16 header, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListPostWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ListPostWr(UInt32 listaddr, ref UInt16 header, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListPreRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ListPreRd(UInt32 listaddr, ref UInt16 header, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListPreWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ListPreWr(UInt32 listaddr, ref UInt16 header, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ListStatus@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ListStatus(UInt32 listaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MakeLong@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MakeLong(UInt16 valh, UInt16 vall);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MakePtr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern unsafe IntPtr* C13_MakePtr(UInt16 valh, UInt16 vall);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Mask@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Mask(UInt32 dataval, UInt16 cntval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINFillW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINFillW(UInt16 value, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINRdB@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MEMWINRdB(UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINRdL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MEMWINRdL(UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINRdsL@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINRdsL(ref UInt32 valueptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINRdsW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINRdsW(ref UInt16 valueptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINRdW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MEMWINRdW(UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINWrB@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINWrB(UInt16 value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINWrL@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINWrL(UInt32 value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINWrsL@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINWrsL(ref UInt32 valueptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINWrsW@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINWrsW(ref UInt16 valueptr, UInt32 addrval, UInt32 countval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MEMWINWrW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MEMWINWrW(UInt16 value, UInt32 addrval, Int32 bustype, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Mod@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Mod(UInt32 moda, UInt32 modb);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsBC@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsBC(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsMon@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsMon(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsNotBC@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsNotBC(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsNotMon@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsNotMon(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsNotPlay@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsNotPlay(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsNotRT@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsNotRT(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsNotSerial@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsNotSerial(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsPlay@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsPlay(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsRT@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsRT(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeIsSerial@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_ModeIsSerial(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ModeRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ModeWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ModeWr(UInt16 mode, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonConfigEx@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonConfigEx(UInt32 configval, UInt32 moncount, UInt16 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonConfigExx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonConfigExx(UInt32 configval, UInt32 seqaddr, UInt32 moncount, UInt16 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonFilterSAEx@24", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonFilterSAEx(Int32 taval, UInt32 rcvsamask, UInt32 xmtsamask, UInt32 rcvmcmask, UInt32 xmtmcmask, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonRdEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MonRdEx(ref UInt16 buf, UInt16 bufcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonResume@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonResume(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonStart@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonStart(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonStatus@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonStatus(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MonStop@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MonStop(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgBlockRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgBlockRd(ref UInt16 buf, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgBlockWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgBlockWr(ref UInt16 buf, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCheck@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgCheck(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCommRd@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgCommRd(ref UInt16 buf, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCommWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgCommWr(ref UInt16 buf, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgConfig@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgConfig(UInt32 configval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgConfigEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgConfigEx(UInt32 configval, UInt16 cwd, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCWD1Rd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgCWD1Rd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCWD1Wr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgCWD1Wr(UInt16 cwd1, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCWD2Rd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgCWD2Rd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgCWD2Wr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgCWD2Wr(UInt16 cwd2, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgErrorRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgErrorRd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgErrorWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgErrorWr(UInt16 value, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgFlagRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgFlagRd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgFlagWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgFlagWr(UInt16 msgflag, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgIsAccessed@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_MsgIsAccessed(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgOptRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgOptRd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgOptWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_MsgOptWr(UInt16 msgopt, UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgReset@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_MsgReset(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgSWD1Rd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgSWD1Rd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_MsgSWD2Rd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_MsgSWD2Rd(UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Mul@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Mul(UInt32 mula, UInt32 mulb);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_PlayClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayConfigEx@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_PlayConfigEx(UInt32 configval, UInt32 playcount, UInt32 seqcount, UInt16 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayConfigExx@28", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_PlayConfigExx(UInt32 configval, UInt32 playaddr, UInt32 playcount, UInt32 seqaddr, UInt32 seqcount, UInt16 cardnum, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayStatus@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_PlayStatus(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PlayWrEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_PlayWrEx(ref UInt16 buf, UInt16 bufcount, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PortRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern byte C13_PortRd(Int32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_PortWr@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_PortWr(byte value, Int32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ProgRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ProgRdW(UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ProgWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ProgWrW(UInt16 value, UInt16 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMFill@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMFill(UInt16 value, UInt32 addrval, UInt32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMRdB@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_RAMRdB(UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMRdL@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RAMRdL(UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMRdsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMRdsW(ref UInt16 valueptr, UInt32 addrval, UInt32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMRdW@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_RAMRdW(UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWipe@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWipe(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWipeEx@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWipeEx(UInt16 value, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWrB@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWrB(UInt16 value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWrL@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWrL(UInt32 value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWrsW@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWrsW(ref UInt16 valueptr, UInt32 addrval, UInt32 countval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RAMWrW@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_RAMWrW(UInt16 value, UInt32 addrval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTConfigEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_RTConfigEx(UInt32 configval, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTConfigExx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_RTConfigExx(UInt32 configval, Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTCreateListEx@36", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RTCreateListEx(UInt32 listconfigval, Int32 skipval, Int32 count, UInt32 msgconfigval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTCreateListExx@36", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_RTCreateListExx(UInt32 listconfigval, Int32 skipval, Int32 count, UInt32 msgconfigval, Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTReset@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_RTReset(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTStatus@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_RTStatus(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_RTSWDRd@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_RTSWDRd(Int32 taval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedBuild@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedBuild(Int32 nummsgs, ref UInt32 msgaddr, ref Int32 freq, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedBuildEx@28", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedBuildEx(Int32 nummsgs, ref UInt32 msgaddr, ref Int32 freq, ref Int32 period, IntPtr buf, UInt32 bufsize, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedBuildExx@28", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedBuildExx(UInt32 frametime, Int32 nummsgs, ref UInt32 msgaddr, ref Int32 period, IntPtr buf, UInt32 bufsize, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedCalc@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedCalc(ref UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedDisplay@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_SchedDisplay(UInt32 nummsgs, ref UInt32 count);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedHook@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_SchedHook(Int32 index, IntPtr ptr);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedInsEnd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedInsEnd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedInsMsg@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedInsMsg(UInt32 index, ref UInt32 msgaddr, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedInsStart@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SchedInsStart(UInt32 frametime, UInt32 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedMaxval@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_SchedMaxval(ref UInt32 arrayval, UInt32 arrayvalcount);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SchedMinval@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_SchedMinval(ref UInt32 arrayval, UInt32 arrayvalcount);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SerialClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SerialClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SerialConfig@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SerialConfig(UInt32 configval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SerialConfigEx@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SerialConfigEx(UInt32 configval, UInt16 count, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SerialStatus@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_SerialStatus(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_SerialWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_SerialWr(ref UInt16 buf, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Shl@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Shl(UInt32 dataval, UInt16 cntval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_Shr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_Shr(UInt32 dataval, UInt16 cntval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_TimerClear@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_TimerClear(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_TimerRd@4", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_TimerRd(UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_TimerResolution@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_TimerResolution(Int32 timerresol, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_TimerResolutionEx@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_TimerResolutionEx(UInt16 timershift, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValFromAscii@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt32 C13_ValFromAscii(ref string asciistr, Int32 radixval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValGetBits@12", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ValGetBits(UInt16 oldvalue, Int32 startbit, Int32 endbit);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValPackRTCWD@20", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ValPackRTCWD(Int32 mcflag, Int32 taval, Int32 trflag, Int32 saval, Int32 count);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValPutBits@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern UInt16 C13_ValPutBits(UInt16 oldvalue, UInt16 newfld, Int32 startbit, Int32 endbit);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValToAscii@16", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern IntPtr _C13_ValToAscii(UInt32 value, ref string asciistr, Int32 numbits, Int32 radixval);
        public static string C13_ValToAscii(UInt32 value, ref string asciistr, Int32 numbits, Int32 radixval) { return Marshal.PtrToStringAnsi(_C13_ValToAscii(value, ref asciistr, numbits, radixval)); }
        [DllImport("C13W32.DLL", EntryPoint = "_C13_ValUnpackRTCWD@28", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_ValUnpackRTCWD(UInt16 cwd, ref Int32 bcastflag, ref Int32 mcflag, ref Int32 taval, ref Int32 trflag, ref Int32 saval, ref Int32 count);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_WatchConfig@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern Int32 C13_WatchConfig(UInt32 configval, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_WatchWr@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_WatchWr(UInt32 secs, UInt32 handleval);
        [DllImport("C13W32.DLL", EntryPoint = "_C13_WatchWrEx@8", ExactSpelling = true, CharSet = CharSet.Ansi, SetLastError = true)]
        public static extern void C13_WatchWrEx(UInt32 value, UInt32 handleval);

        /**
        *
        *  Bus controller configuration options
        *
        **/

        public const UInt32 BCCFG_DEFAULT = 0x00000000;
        public const UInt32 BCCFG_ENABLE = 0x00000000;
        public const UInt32 BCCFG_DISABLE = 0x00000001;
        public const UInt32 BCCFG_TRIGNONE = 0x00000000;
        public const UInt32 BCCFG_TRIGEXT = 0x00000010;
        public const UInt32 BCCFG_TRIGSTART = 0x00000020;
        public const UInt32 BCCFG_NOINTHALT = 0x00000000;
        public const UInt32 BCCFG_INTHALT = 0x00000100;
        public const UInt32 BCCFG_NOINTPAUSE = 0x00000000;
        public const UInt32 BCCFG_INTPAUSE = 0x00000200;
        public const UInt32 BCCFG_NOLOOPMAX = 0x00000000;
        public const UInt32 BCCFG_LOOPMAX = 0x00001000;
        public const UInt32 BCCFG_NOSTEP = 0x00000000;
        public const UInt32 BCCFG_STEP = 0x00002000;
        public const UInt32 BCCFG_MC01 = 0x00000000;
        public const UInt32 BCCFG_MC1 = 0x01000000;
        public const UInt32 BCCFG_MC0 = 0x02000000;
        public const UInt32 BCCFG_MCNONE = 0x03000000;
        public const UInt32 BCCFG_SYNCALL = 0x00000000;
        public const UInt32 BCCFG_SYNCSEL = 0x40000000;
        public const UInt32 BCCFG_MODEL = 0x00000000;
        public const UInt32 BCCFG_RAM = 0x00100000;
        public const UInt32 BCCFG_DPRAM = 0x00200000;

        /**
        *
        *  Monitor configuration options
        *
        **/

        public const UInt32 MONCFG_DEFAULT = 0x00000000;
        public const UInt32 MONCFG_FILLHALT = 0x00000000;
        public const UInt32 MONCFG_DISABLE = 0x00000001;
        public const UInt32 MONCFG_CONTINUOUS = 0x00000002;
        public const UInt32 MONCFG_DMA = 0x00000004;
        public const UInt32 MONCFG_FREE = 0x00000008;
        public const UInt32 MONCFG_FAST = 0x00000010;
        public const UInt32 MONCFG_NOINTFULL = 0x00000000;
        public const UInt32 MONCFG_INTFULL = 0x00001000;
        public const UInt32 MONCFG_COMPLETE = 0x00000000;
        public const UInt32 MONCFG_INCOMPLETE = 0x00002000;
        public const UInt32 MONCFG_MC01 = 0x00000000;
        public const UInt32 MONCFG_MC1 = 0x00100000;
        public const UInt32 MONCFG_MC0 = 0x00200000;
        public const UInt32 MONCFG_MCNONE = 0x00300000;
        public const UInt32 MONCFG_16K = 0x00000000;
        public const UInt32 MONCFG_ALLAVAIL = 0x01000000;
        public const UInt32 MONCFG_32K = 0x02000000;
        public const UInt32 MONCFG_64K = 0x04000000;
        public const UInt32 MONCFG_128K = 0x08000000;
        public const UInt32 MONCFG_DPRAM = 0x10000000;

        /**
        *
        *  Remote terminal configuration options
        *
        **/

        public const UInt32 RTCFG_DEFAULT = 0x00000000;
        public const UInt32 RTCFG_SIMULATE = 0x00000000;
        public const UInt32 RTCFG_DISABLE = 0x00000001;
        public const UInt32 RTCFG_MONITOR = 0x00000002;
        public const UInt32 RTCFG_NOBCAST = 0x00000000;
        public const UInt32 RTCFG_BCAST = 0x00000100;
        public const UInt32 RTCFG_NOAUTOBUSY = 0x00000000;
        public const UInt32 RTCFG_AUTOBUSY = 0x00000200;
        public const UInt32 RTCFG_BUILD = 0x00000000;
        public const UInt32 RTCFG_NOBUILD = 0x00000400;
        public const UInt32 RTCFG_STDB = 0x00000000;
        public const UInt32 RTCFG_STDA = 0x00400000;
        public const UInt32 RTCFG_NODYNBC = 0x00000000;
        public const UInt32 RTCFG_DYNBC = 0x00001000;
        public const UInt32 RTCFG_NOIMMCLR = 0x00000000;
        public const UInt32 RTCFG_IMMCLR = 0x00002000;
        public const UInt32 RTCFG_NOBCASTADDR = 0x00000000;
        public const UInt32 RTCFG_BCASTADDR = 0x00004000;
        public const UInt32 RTCFG_CHANAB = 0x00000000;
        public const UInt32 RTCFG_CHANA = 0x00020000;
        public const UInt32 RTCFG_CHANB = 0x00010000;
        public const UInt32 RTCFG_CHANNONE = 0x00030000;
        public const UInt32 RTCFG_MC01 = 0x00000000;
        public const UInt32 RTCFG_MC1 = 0x01000000;
        public const UInt32 RTCFG_MC0 = 0x02000000;
        public const UInt32 RTCFG_MCNONE = 0x03000000;
        public const UInt32 RTCFG_SYNCALL = 0x00000000;
        public const UInt32 RTCFG_SYNCSEL = 0x40000000;
        public const UInt32 RTCFG_WIPE = 0x00000000;
        public const UInt32 RTCFG_NOWIPE = 0x80000000;
        public const UInt32 RTCFG_WIPE0 = 0x00000000;
        public const UInt32 RTCFG_WIPE123 = 0x04000000;
        public const UInt32 RTCFG_WIPECWD = 0x08000000;
        public const UInt32 RTCFG_MODEL = 0x00000000;
        public const UInt32 RTCFG_RAM = 0x00100000;
        public const UInt32 RTCFG_DPRAM = 0x00200000;
        public const UInt32 RTCFG_RESPONSEB = 0x00000000;
        public const UInt32 RTCFG_RESPONSEA = 0x00400000;

        /**
        *
        *  Serial configuration options
        *
        **/

        public const UInt32 SERCFG_DEFAULT = 0x00000000;
        public const UInt32 SERCFG_CONTINUOUS = 0x00000000;
        public const UInt32 SERCFG_DISABLE = 0x00000001;
        public const UInt32 SERCFG_FREE = 0x00000002;
        public const UInt32 SERCFG_NOINTEMPTY = 0x00000000;
        public const UInt32 SERCFG_INTEMPTY = 0x00000010;

        /**
        *
        *  Watchdog configuration options
        *
        **/

        public const UInt32 WATCHCFG_DEFAULT = 0x00000000;
        public const UInt32 WATCHCFG_ENABLE = 0x00000000;
        public const UInt32 WATCHCFG_DISABLE = 0x00000001;

        /**
        *
        *  Playback configuration options
        *
        **/

        public const UInt32 PLAYCFG_DEFAULT = 0x00000000;
        public const UInt32 PLAYCFG_ENABLE = 0x00000000;
        public const UInt32 PLAYCFG_DISABLE = 0x00000001;
        public const UInt32 PLAYCFG_16K = 0x00000000;
        public const UInt32 PLAYCFG_ALLAVAIL = 0x00008000;
        public const UInt32 PLAYCFG_32K = 0x00010000;
        public const UInt32 PLAYCFG_64K = 0x00020000;
        public const UInt32 PLAYCFG_128K = 0x00040000;
        public const UInt32 PLAYCFG_DPRAM = 0x00080000;

        /**
        *
        *  Interrupt log list configuration options
        *
        **/

        public const UInt32 INTCFG_DEFAULT = 0x00000000;
        public const UInt32 INTCFG_ENABLE = 0x00000000;
        public const UInt32 INTCFG_DISABLE = 0x00000001;

        /**
        *
        *  Info types
        *
        **/

        public const UInt32 INFOTYPE_PLAT = 0x0001;           //Returns the C13 platform type
        public const UInt32 INFOTYPE_PROD = 0x0002;           //Returns the C13 product type
        public const UInt32 INFOTYPE_DASH = 0x0003;           //Returns the C13 dash number
        public const UInt32 INFOTYPE_VERSION = 0x0004;           //Returns the C13 version number
        public const UInt32 INFOTYPE_DATE = 0x0005;           //Returns the C13 version date
        public const UInt32 INFOTYPE_MODEL = 0x0006;           //Returns the C13 model number
        public const UInt32 INFOTYPE_MAXCOUNT = 0x0007;           //Returns the number of terminals the C13 can simulate
        public const UInt32 INFOTYPE_MULTIMODE = 0x0008;           //Returns whether C13 can simulate multi-modes
        public const UInt32 INFOTYPE_ERRORGEN = 0x0009;           //Returns whether C13 can generate errors
        public const UInt32 INFOTYPE_CONCURMON = 0x000A;           //Returns whether C13 has a concurrent monitor
        public const UInt32 INFOTYPE_MONFILTER = 0x000B;           //Returns whether C13 has a monitor filter
        public const UInt32 INFOTYPE_USERCODE = 0x000C;           //Returns whether C13 handles user code
        public const UInt32 INFOTYPE_LISTBUF = 0x000D;           //Returns whether C13 handles list buffering
        public const UInt32 INFOTYPE_MONFAST = 0x000E;           //Returns whether C13 has a fast monitor
        public const UInt32 INFOTYPE_MONDMA = 0x000F;           //Returns whether C13 has a dma monitor
        public const UInt32 INFOTYPE_MONBRAKE = 0x0010;           //Returns whether C13 has a monitor brake
        public const UInt32 INFOTYPE_PLAY = 0x0011;           //Returns whether C13 has playback capability
        public const UInt32 INFOTYPE_WATCH = 0x0012;           //Returns whether C13 has a watchdog
        public const UInt32 INFOTYPE_RESPONSEA = 0x0013;           //Returns whether C13 can do MIL-STD-1553A response time

        /**
        *
        *  Error configuration options
        *
        **/

        public const UInt32 ERRDEF_NONE = 0x00000000;
        public const UInt32 ERRDEF_GAP = 0x00010000;
        public const UInt32 ERRDEF_CNTWRDABS = 0x00020000;
        public const UInt32 ERRDEF_CNTWRDREL = 0x00040000;
        public const UInt32 ERRDEF_CNTBIT = 0x00080000;
        public const UInt32 ERRDEF_MAN1 = 0x00100000;
        public const UInt32 ERRDEF_MAN2 = 0x00200000;
        public const UInt32 ERRDEF_SYNC = 0x00400000;
        public const UInt32 ERRDEF_PAR = 0x00800000;
        public const UInt32 ERRDEF_ZEROX = 0x01000000;

        public const UInt32 ERRDEF_DWD00 = 0x0000;            //Error will be generated in a data word  0
        public const UInt32 ERRDEF_DWD01 = 0x0001;            //Error will be generated in a data word  1
        public const UInt32 ERRDEF_DWD02 = 0x0002;            //Error will be generated in a data word  2
        public const UInt32 ERRDEF_DWD03 = 0x0003;            //Error will be generated in a data word  3
        public const UInt32 ERRDEF_DWD04 = 0x0004;            //Error will be generated in a data word  4
        public const UInt32 ERRDEF_DWD05 = 0x0005;            //Error will be generated in a data word  5
        public const UInt32 ERRDEF_DWD06 = 0x0006;            //Error will be generated in a data word  6
        public const UInt32 ERRDEF_DWD07 = 0x0007;            //Error will be generated in a data word  7
        public const UInt32 ERRDEF_DWD08 = 0x0008;            //Error will be generated in a data word  8
        public const UInt32 ERRDEF_DWD09 = 0x0009;            //Error will be generated in a data word  9
        public const UInt32 ERRDEF_DWD10 = 0x000A;            //Error will be generated in a data word 10
        public const UInt32 ERRDEF_DWD11 = 0x000B;            //Error will be generated in a data word 11
        public const UInt32 ERRDEF_DWD12 = 0x000C;            //Error will be generated in a data word 12
        public const UInt32 ERRDEF_DWD13 = 0x000D;            //Error will be generated in a data word 13
        public const UInt32 ERRDEF_DWD14 = 0x000E;            //Error will be generated in a data word 14
        public const UInt32 ERRDEF_DWD15 = 0x000F;            //Error will be generated in a data word 15
        public const UInt32 ERRDEF_DWD16 = 0x0010;            //Error will be generated in a data word 16
        public const UInt32 ERRDEF_DWD17 = 0x0011;            //Error will be generated in a data word 17
        public const UInt32 ERRDEF_DWD18 = 0x0012;            //Error will be generated in a data word 18
        public const UInt32 ERRDEF_DWD19 = 0x0013;            //Error will be generated in a data word 19
        public const UInt32 ERRDEF_DWD20 = 0x0014;            //Error will be generated in a data word 20
        public const UInt32 ERRDEF_DWD21 = 0x0015;            //Error will be generated in a data word 21
        public const UInt32 ERRDEF_DWD22 = 0x0016;            //Error will be generated in a data word 22
        public const UInt32 ERRDEF_DWD23 = 0x0017;            //Error will be generated in a data word 23
        public const UInt32 ERRDEF_DWD24 = 0x0018;            //Error will be generated in a data word 24
        public const UInt32 ERRDEF_DWD25 = 0x0019;            //Error will be generated in a data word 25
        public const UInt32 ERRDEF_DWD26 = 0x001A;            //Error will be generated in a data word 26
        public const UInt32 ERRDEF_DWD27 = 0x001B;            //Error will be generated in a data word 27
        public const UInt32 ERRDEF_DWD28 = 0x001C;            //Error will be generated in a data word 28
        public const UInt32 ERRDEF_DWD29 = 0x001D;            //Error will be generated in a data word 29
        public const UInt32 ERRDEF_DWD30 = 0x001E;            //Error will be generated in a data word 30
        public const UInt32 ERRDEF_DWD31 = 0x001F;            //Error will be generated in a data word 31
        public const UInt32 ERRDEF_CWD1 = 0x0100;            //Error will be generated in CWD1
        public const UInt32 ERRDEF_CWD2 = 0x0101;            //Error will be generated in CWD2
        public const UInt32 ERRDEF_SWD = 0x0102;            //Error will be generated in SWD1
        public const UInt32 ERRDEF_SWD1 = 0x0102;            //Error will be generated in SWD1
        public const UInt32 ERRDEF_SWD2 = 0x0102;            //Error will be generated in SWD2

        /**
        *
        *  Error control options
        *
        **/

        public const UInt32 ERRCTRL_OFF = 0x00000000;
        public const UInt32 ERRCTRL_ON = 0x00000001;
        public const UInt32 ERRCTRL_ONCE = 0x00000002;
        public const UInt32 ERRCTRL_EXTERNAL = 0x00000003;
        public const UInt32 ERRCTRL_TAGMSG = 0x00000000;
        public const UInt32 ERRCTRL_ANYMSG = 0x80000000;

        /**
        *
        *  Message configuration options
        *
        **/

        public const UInt32 MSGCRT_DEFAULT = 0x00000000;
        public const UInt32 MSGCRT_ENABLE = 0x00000000;
        public const UInt32 MSGCRT_DISABLE = 0x00001000;
        public const UInt32 MSGCRT_RESP = 0x00000000;
        public const UInt32 MSGCRT_NORESP = 0x00002000;
        public const UInt32 MSGCRT_NOWRAP = 0x00000000;
        public const UInt32 MSGCRT_WRAP = 0x00004000;
        public const UInt32 MSGCRT_NOINT = 0x00000000;
        public const UInt32 MSGCRT_INT = 0x00000001;
        public const UInt32 MSGCRT_NOERR = 0x00000000;
        public const UInt32 MSGCRT_ERR = 0x00000002;
        public const UInt32 MSGCRT_BUSA = 0x00000000;
        public const UInt32 MSGCRT_BUSB = 0x00000004;
        public const UInt32 MSGCRT_BCRT = 0x00000000;
        public const UInt32 MSGCRT_RTRT = 0x00000008;
        public const UInt32 MSGCRT_NOMON = 0x00000000;
        public const UInt32 MSGCRT_MON = 0x00000010;
        public const UInt32 MSGCRT_NOTIMETAG = 0x00000000;
        public const UInt32 MSGCRT_TIMETAG = 0x00000040;
        public const UInt32 MSGCRT_NOELAPSE = 0x00000000;
        public const UInt32 MSGCRT_ELAPSE = 0x00000080;
        public const UInt32 MSGCRT_NOMIN = 0x00000000;
        public const UInt32 MSGCRT_MIN = 0x00000100;
        public const UInt32 MSGCRT_NOMAX = 0x00000000;
        public const UInt32 MSGCRT_MAX = 0x00000200;
        public const UInt32 MSGCRT_NOHIT = 0x00000000;
        public const UInt32 MSGCRT_HIT = 0x00000400;
        public const UInt32 MSGCRT_NOSYNC = 0x00000000;
        public const UInt32 MSGCRT_SYNC = 0x40000000;
        public const UInt32 MSGCRT_WIPE = 0x00000000;
        public const UInt32 MSGCRT_NOWIPE = 0x80000000;
        public const UInt32 MSGCRT_WIPE0 = 0x00000000;
        public const UInt32 MSGCRT_WIPE123 = 0x01000000;
        public const UInt32 MSGCRT_WIPECWD = 0x02000000;
        public const UInt32 MSGCRT_MODEL = 0x00000000;
        public const UInt32 MSGCRT_RAM = 0x00100000;
        public const UInt32 MSGCRT_DPRAM = 0x00200000;

        /**
        *
        *  List buffer options
        *
        **/

        public const UInt32 LISTCRT_DEFAULT = 0x00000000;
        public const UInt32 LISTCRT_PINGPONG = 0x00000000;
        public const UInt32 LISTCRT_FIFO = 0x00000001;
        public const UInt32 LISTCRT_CIRCULAR = 0x00000002;
        public const UInt32 LISTCRT_TRBIT = 0x00000000;
        public const UInt32 LISTCRT_READ = 0x00000010;
        public const UInt32 LISTCRT_WRITE = 0x00000020;
        public const UInt32 LISTCRT_NOTSKIP = 0x00000000;
        public const UInt32 LISTCRT_SKIP = 0x00000040;
        public const UInt32 LISTCRT_NOINT = 0x00000000;
        public const UInt32 LISTCRT_INT = 0x00000100;
        public const UInt32 LISTCRT_NOHIT = 0x00000000;
        public const UInt32 LISTCRT_HIT = 0x00000200;
        public const UInt32 LISTCRT_MODEL = 0x00000000;
        public const UInt32 LISTCRT_RAM = 0x00100000;
        public const UInt32 LISTCRT_DPRAM = 0x00200000;

        /**
        *
        *  Bit fields of the message error flag
        *
        **/

        public const UInt32 MSGERR_NORESP = 0x8000;          //Set when we timeout waiting for response
        public const UInt32 MSGERR_ANYERR = 0x4000;          //Set when any error bit is set
        public const UInt32 MSGERR_PROTOCOL = 0x2000;          //General protocol error
        public const UInt32 MSGERR_SYNC = 0x1000;          //Set when we have the wrong sync
        public const UInt32 MSGERR_DATACOUNT = 0x0800;          //Set when improper number of data words
        public const UInt32 MSGERR_MANCH = 0x0020;          //Set when manchester error detected
        public const UInt32 MSGERR_PARITY = 0x0010;          //Set when parity error detected
        public const UInt32 MSGERR_WORD = 0x0008;          //Set when word error detected
        public const UInt32 MSGERR_RETRY = 0x0004;          //All retries failed
        public const UInt32 MSGERR_SYSTEM = 0x0002;          //An internal system error occurred
        public const UInt32 MSGERR_HIT = 0x0001;          //Always set

        /**
        *
        *  Bit fields of the message activity flag.
        *
        **/

        public const UInt32 MSGACT_XMTCWD1 = 0x8000;          //Transmitted CWD1
        public const UInt32 MSGACT_XMTCWD2 = 0x4000;          //Transmitted CWD2
        public const UInt32 MSGACT_XMTSWD1 = 0x2000;          //Transmitted SWD1
        public const UInt32 MSGACT_XMTSWD2 = 0x1000;          //Transmitted SWD2
        public const UInt32 MSGACT_RCVCWD1 = 0x0800;          //Received CWD1
        public const UInt32 MSGACT_RCVCWD2 = 0x0400;          //Received CWD2
        public const UInt32 MSGACT_RCVSWD1 = 0x0200;          //Received SWD1
        public const UInt32 MSGACT_RCVSWD2 = 0x0100;          //Received SWD2
        public const UInt32 MSGACT_XMTDWD = 0x0080;          //Transmitted DWD
        public const UInt32 MSGACT_RCVDWD = 0x0040;          //Received DWD

        /**
        *
        *  Condition flags.
        *
        **/

        public const UInt32 COND_FAIL = 0x0001;                 //Condition when all retries have failed
        public const UInt32 COND_SRQ = 0x0002;                 //Condition on Service Request bit set in status word
        public const UInt32 COND_INS = 0x0004;                 //Condition on Instrumentation bit set in status word
        public const UInt32 COND_SSF = 0x0008;                 //Condition on Subsystem Fail bit set in status word
        public const UInt32 COND_TF = 0x0010;                 //Condition on Terminal Flag bit set in status word
        public const UInt32 COND_BUSY = 0x0020;                 //Condition on Busy bit set in status word
        public const UInt32 COND_ME = 0x0040;                 //Condition on Message Error bit set in status word
        public const UInt32 COND_RESPERR = 0x0080;                 //Condition on response error
        public const UInt32 COND_NORESP = 0x0100;                 //Condition on response error
        public const UInt32 COND_ALTBUS = 0x0200;                 //Retries are performed on alternate bus

        /**
        *
        *  Field types.
        *
        **/

        public const UInt16 FIELD_CWD1 = 0;	//CWD1 field
        public const UInt16 FIELD_CWD2 = 1;	//CWD2 field
        public const UInt16 FIELD_SWD1 = 2;	//SWD1 field
        public const UInt16 FIELD_SWD2 = 3;	//SWD2 field
        public const UInt16 FIELD_TTAG = 4;	//Time tag field
        public const UInt16 FIELD_ELAPSE = 5;	//Elapse time field
        public const UInt16 FIELD_ERROR = 6;	//Error field
        public const UInt16 FIELD_ACT = 7;	//Activity field
        public const UInt16 FIELD_RESP1 = 8;	//Response time 1 field
        public const UInt16 FIELD_RESP2 = 9;	//Response time 2 field
        public const UInt16 FIELD_COUNT = 10;	//Data count field
        public const UInt16 FIELD_FLAG1 = 11;	//Flag 1 field
        public const UInt16 FIELD_FLAG2 = 12;	//Flag 2 field
        public const UInt16 FIELD_RESV = 13;	//Reserved field

        /**
        *
        *  Interrupt types.
        *
        **/

        public const UInt32 INTTYPE_MSG = 0x0001;               //Message interrupt
        public const UInt32 INTTYPE_OPCODE = 0x0002;               //Interrupt opcode
        public const UInt32 INTTYPE_HALT = 0x0003;               //Schedule halt
        public const UInt32 INTTYPE_PAUSE = 0x0004;               //Schedule pause
        public const UInt32 INTTYPE_SEQ = 0x0005;               //Sequential record full
        public const UInt32 INTTYPE_LIST = 0x0006;               //List buffer empty/full
        public const UInt32 INTTYPE_PARITY = 0x0007;               //Parity error
        public const UInt32 INTTYPE_DIN = 0x0008;               //DIN
        public const UInt32 INTTYPE_SERIAL = 0x0009;               //Serial empty

        /**
        *
        *  Timer resolutions.
        *
        **/

        public const UInt16 TIMERRESOL_1US = 1;	//1us timer resolution, 1:11:34
        public const UInt16 TIMERRESOL_16US = 2;	//16us timer resolution, 19:05:19 range
        public const UInt16 TIMERRESOL_1024US = 3;	//1024us timer resolution, 50 day range

        /**
        *
        *  C13 HOST Registers
        *
        **/

        public const UInt32 HREG_STAT = 0x0000;                  //Status register (RD)
        public const UInt32 HREG_SET = 0x0001;                  //Set register (WR)
        public const UInt32 HREG_CLR = 0x0002;                  //Clear register (WR)
        public const UInt32 HREG_DCFG = 0x0003;                  //DSP configuration register (RD/WR)
        public const UInt32 HREG_HCFG = 0x0004;                  //HOST configuration register (RD/WR)
        public const UInt32 HREG_RESV = 0x0005;                  //Reserved register
        public const UInt32 HREG_PAGE = 0x0006;                  //Page register (RD/WR)
        public const UInt32 HREG_ERR = 0x0007;                  //Error register (RD)
        public const UInt32 HREG_HPCL = 0x0008;                  //Host port control low (RD/WR)
        public const UInt32 HREG_HPCH = 0x0009;                  //Host port control high (RD/WR)
        public const UInt32 HREG_HPIL = 0x000A;                  //Host port incrementer low (RD/WR)
        public const UInt32 HREG_HPIH = 0x000B;                  //Host port incrementer high (RD/WR)
        public const UInt32 HREG_HPAL = 0x000C;                  //Host port address low (RD/WR)
        public const UInt32 HREG_HPAH = 0x000D;                  //Host port address high (RD/WR)
        public const UInt32 HREG_HPDL = 0x000E;                  //Host port data low (RD/WR)
        public const UInt32 HREG_HPDH = 0x000F;                  //Host port data high (RD/WR)

        /**
        *
        *  C13 IFGA Registers
        *
        **/

        public const UInt32 IREG_STAT = 0x0020;                  //Status register
        public const UInt32 IREG_SET = 0x0021;                  //Set register
        public const UInt32 IREG_CLR = 0x0022;                  //Clear register
        public const UInt32 IREG_RESV = 0x0023;                  //Reserved register
        public const UInt32 IREG_PAGE = 0x0024;                  //Page register
        public const UInt32 IREG_IOCFG = 0x0025;                  //I/O configuration register
        public const UInt32 IREG_DMA = 0x0026;                  //DMA register

        /**
        *
        *  C13 EDGA Registers
        *
        **/

        public const UInt32 EREG_STAT = 0x0000;                 //Status register (RD)
        public const UInt32 EREG_STATCLR = 0x0001;                 //Status clear register (WR)
        public const UInt32 EREG_STATDEC = 0x0002;                 //Decoder status register (RD)
        public const UInt32 EREG_VALA = 0x0004;                 //Decoder word value A register
        public const UInt32 EREG_VALAL = 0x0004;                 //Decoder low word value A register
        public const UInt32 EREG_VALAH = 0x0005;                 //Decoder high word value A register
        public const UInt32 EREG_VALB = 0x0006;                 //Decoder word value B register
        public const UInt32 EREG_VALBL = 0x0006;                 //Decoder low word value B register
        public const UInt32 EREG_VALBH = 0x0007;                 //Decoder high word value B register
        public const UInt32 EREG_GAPE = 0x0008;                 //Encoder gap register
        public const UInt32 EREG_CTRLE = 0x0009;                 //Encoder control register
        public const UInt32 EREG_VALE = 0x000A;                 //Encoder value register
        public const UInt32 EREG_VALEL = 0x000A;                 //Encoder low value register
        public const UInt32 EREG_VALEH = 0x000B;                 //Encoder high value register
        public const UInt32 EREG_ERRE = 0x000C;                 //Encoder error register
        public const UInt32 EREG_FT = 0x000E;                 //Frame time register
        public const UInt32 EREG_RST = 0x000F;                 //Reset register
        public const UInt32 EREG_GAPA = 0x0010;                 //Decoder gap time A register
        public const UInt32 EREG_GAPB = 0x0011;                 //Decoder gap time B register
        public const UInt32 EREG_GAPTO = 0x0012;                 //Decoder gap timeout register
        public const UInt32 EREG_CFGD = 0x0014;                 //Decoder configuration register
        public const UInt32 EREG_CFGE = 0x0015;                 //Encoder configuration register
        public const UInt32 EREG_CFGINT = 0x0016;                 //Interrupt configuration register
        public const UInt32 EREG_ID = 0x0017;                 //Identification register

        /**
        *
        *  C13 Global Registers
        *
        **/

        public const UInt32 GREG_IMR = 0x0000;                  //Interrupt mask register
        public const UInt32 GREG_IFR = 0x0001;                  //Interrupt flag register
        public const UInt32 GREG_ST0 = 0x0006;                  //Status register 0
        public const UInt32 GREG_ST1 = 0x0007;                  //Status register 1
        public const UInt32 GREG_AL = 0x0008;                  //Accumulator A low word (bits 15-00)
        public const UInt32 GREG_AH = 0x0009;                  //Accumulator A high word (bits 31-16)
        public const UInt32 GREG_AG = 0x000A;                  //Accumulator A guars bits (bits 39-32)
        public const UInt32 GREG_BL = 0x000B;                  //Accumulator B low word (bits 15-00)
        public const UInt32 GREG_BH = 0x000C;                  //Accumulator B high word (bits 31-16)
        public const UInt32 GREG_BG = 0x000D;                  //Accumulator B guard bits (bits 39-32
        public const UInt32 GREG_T = 0x000E;                  //Temporary register
        public const UInt32 GREG_TRN = 0x000F;                  //Transition register
        public const UInt32 GREG_AR0 = 0x0010;                  //Auxilliary register 0
        public const UInt32 GREG_AR1 = 0x0011;                  //Auxilliary register 1
        public const UInt32 GREG_AR2 = 0x0012;                  //Auxilliary register 2
        public const UInt32 GREG_AR3 = 0x0013;                  //Auxilliary register 3
        public const UInt32 GREG_AR4 = 0x0014;                  //Auxilliary register 4
        public const UInt32 GREG_AR5 = 0x0015;                  //Auxilliary register 5
        public const UInt32 GREG_AR6 = 0x0016;                  //Auxilliary register 6
        public const UInt32 GREG_AR7 = 0x0017;                  //Auxilliary register 7
        public const UInt32 GREG_SP = 0x0018;                  //Stack pointer
        public const UInt32 GREG_BK = 0x0019;                  //Circular-buffer size register
        public const UInt32 GREG_BRC = 0x001A;                  //Block-repeat counter
        public const UInt32 GREG_RSA = 0x001B;                  //Block-repeat start address
        public const UInt32 GREG_REA = 0x001C;                  //Block-repeat end address
        public const UInt32 GREG_PMST = 0x001D;                  //Processor mode status register
        public const UInt32 GREG_XPC = 0x001E;                  //Program counter extension register
        public const UInt32 GREG_BDRR0 = 0x0020;                  //Buffered serial port 0 data receive register
        public const UInt32 GREG_BDXR0 = 0x0021;                  //Buffered serial port 0 data transmit register
        public const UInt32 GREG_BSPC0 = 0x0022;                  //Buffered serial port 0 control register
        public const UInt32 GREG_BSPEC0 = 0x0023;                  //Buffered serial port 0 control extension register
        public const UInt32 GREG_TIM = 0x0024;                  //Timer count register
        public const UInt32 GREG_PRD = 0x0025;                  //Timer period register
        public const UInt32 GREG_TCR = 0x0026;                  //Timer control register
        public const UInt32 GREG_SWWSR = 0x0028;                  //External interface software wait-state register
        public const UInt32 GREG_BSCR = 0x0029;                  //External interface bank-switching control register
        public const UInt32 GREG_XSWR = 0x002B;                  //Extended software wait-state register
        public const UInt32 GREG_HPIC = 0x002C;                  //Host port interface control register
        public const UInt32 GREG_TRCV = 0x0030;                  //TDM serial port data receive register
        public const UInt32 GREG_TDXR = 0x0031;                  //TDM serial port data transmit register
        public const UInt32 GREG_TSPC = 0x0032;                  //TDM serial port control register
        public const UInt32 GREG_TCSR = 0x0033;                  //TDM serial port channel select register
        public const UInt32 GREG_TRTA = 0x0034;                  //TDM serial port receive transmit register
        public const UInt32 GREG_TRAD = 0x0035;                  //TDM serial port receive address register
        public const UInt32 GREG_AXR0 = 0x0038;                  //ABU 0 transmit address register
        public const UInt32 GREG_BKX0 = 0x0039;                  //ABU 0 transmit buffer-size register
        public const UInt32 GREG_ARR0 = 0x003A;                  //ABU 0 receive address register
        public const UInt32 GREG_BKR0 = 0x003B;                  //ABU 0 receive buffer-size register
        public const UInt32 GREG_AXR1 = 0x003C;                  //ABU 1 transmit address register
        public const UInt32 GREG_BKX1 = 0x003D;                  //ABU 1 transmit buffer-size register
        public const UInt32 GREG_ARR1 = 0x003E;                  //ABU 1 receive address register
        public const UInt32 GREG_BKR1 = 0x003F;                  //ABU 1 receive buffer-size register
        public const UInt32 GREG_BDRR1 = 0x0040;                  //Buffered serial port 1 data receive register
        public const UInt32 GREG_BDXR1 = 0x0041;                  //Buffered serial port 1 data transmit register
        public const UInt32 GREG_BSPC1 = 0x0042;                  //Buffered serial port 1 control register
        public const UInt32 GREG_BSPCE1 = 0x0043;                  //Buffered serial port 1 extension register
        public const UInt32 GREG_CLKMD = 0x0058;                  //Clock-mode register

        public const UInt16 MONRD_MAX_COUNT = 64;

        public const UInt16 SUBADDRESS = 0;
        public const UInt16 MODECODE = 1;

        public const UInt16 RCV = 0;
        public const UInt16 XMT = 1;

        public const UInt16 STAT_EMPTY = 0;	//Buffer is empty
        public const UInt16 STAT_PARTIAL = 1;	//Buffer is partially filled
        public const UInt16 STAT_FULL = 2;	//Buffer is full
        public const UInt16 STAT_OFF = 3;	//Buffer is off

        public const UInt16 TEST_LEVEL_0 = 0;	//Test I/O interface
        public const UInt16 TEST_LEVEL_1 = 1;	//Test memory interface
        public const UInt16 TEST_LEVEL_2 = 2;	//Test communication process
        public const UInt16 TEST_LEVEL_3 = 3;	//Test bus transceiver

        public const UInt16 ERR_NONE = 0;	//No error
        public const Int16 ERR_UNKNOWN = -1;	//An unexpected error occurred
        public const Int16 ERR_BADVER = -2;	//A bad version was encountered
        public const Int16 ERR_NOCS = -3;	//Card Services is not present
        public const Int16 ERR_NOSOCKET = -4;	//The specified socket is not present
        public const Int16 ERR_CS = -5;	//A bad version was encountered
        public const Int16 ERR_NOTSR = -6;	//Unable to find the CM1553-3 memory resident driver
        public const Int16 ERR_CLIENT = -7;	//Unable to install a local client driver
        public const Int16 ERR_WIN = -8;	//Card Services could not configure the memory window, I/O window, or IRQ steering
        public const Int16 ERR_BADPARAMS = -11;	//CardOpen() called with bad parameters
        public const Int16 ERR_NOHANDLES = -12;	//CardOpen() already has allocated too many handles
        public const Int16 ERR_NOCARD = -13;	//CardOpen() could not find a C13 card at the specified address
        public const Int16 ERR_NOIO = -14;	//CardOpen() could not find the I/O ports
        public const Int16 ERR_NOMEM = -15;	//CardOpen() could not find the memory
        public const Int16 ERR_BAD16BIT = -16;	//Card is conflicting with another 16-bit card
        public const Int16 ERR_WRONGMODEL = -17;	//Card does not support this feature
        public const Int16 ERR_NOSEL = -18;	//CardOpen() could not allocate a memory selector
        public const Int16 ERR_LOCK = -19;	//The communication process is locked up
        public const Int16 ERR_TOOMANY = -20;	//Too many terminals have been configured
        public const Int16 ERR_BADHANDLE = -21;	//A bad handle was specified
        public const Int16 ERR_BADTA = -22;	//A bad terminal address was specified
        public const Int16 ERR_BADFRAME = -23;	//A bad frame time was specified
        public const Int16 ERR_NOTBC = -24;	//The BC has not been configured
        public const Int16 ERR_NOTRT = -25;	//The RT has not been configured
        public const Int16 ERR_NOTMON = -26;	//The monitor has not been configured
        public const Int16 ERR_ALLOC = -27;	//There is not enough memory to allocate
        public const Int16 ERR_VXD = -28;	//An error occurred in the VXD
        public const Int16 ERR_BADMSG = -31;	//The specified command block is not a message block
        public const Int16 ERR_BADSCHNDX = -32;	//Specified command index is out of range
        public const Int16 ERR_BUFSIZE = -33;	//Insufficient space in user buffer
        public const Int16 ERR_NOCONFIG = -34;	//The card has not been properly configured
        public const Int16 ERR_BOOTFULL = -41;	//No space to add boot code
        public const Int16 ERR_BOOTNUM = -42;	//There is no boot code with the specified number
        public const Int16 ERR_ROMVERIFY = -44;	//Unable to verify the value written to the ROM
        public const Int16 ERR_COUNT = -45;	//An invalid count was specified
        public const Int16 ERR_CRC = -46;	//There was a bad checksum in the HEX file
        public const Int16 ERR_FNAME = -47;	//Bad filenames were specified
        public const Int16 ERR_FRDWR = -48;	//There was an error reading or writing the HEX file
        public const Int16 ERR_HEX = -49;	//There was a bad hex character in the HEX file
        public const Int16 ERR_INDEX = -51;	//The command block index was invalid or the schedule is full
        public const Int16 ERR_NOMSGS = -52;	//No messages specified
        public const Int16 ERR_RESPONSE = -53;	//A bad response or no response was received from an RT
        public const Int16 ERR_TYPE = -54;	//There was a bad type value in the HEX file
        public const Int16 ERR_ZEROLEN = -55;	//Zero length was specified
        public const Int16 ERR_DMABAD = -61;	//Bad DMA channel was specified
        public const Int16 ERR_DMAODD = -62;	//An odd DMA address or count was specified
        public const Int16 ERR_DMAPAGE = -63;	//DMA buffer specified crosses a page boundary
        public const Int16 ERR_SELFIOFAIL = -71;	//I/O selftest failed
        public const Int16 ERR_SELFMEMFAIL = -72;	//Memory selftest failed
        public const Int16 ERR_SELFCOMMFAIL = -73;	//Communication selftest failed
        public const Int16 ERR_SELFXMTFAIL = -74;	//Transmit selftest failed
        public const Int16 ERR_CISVERIFY = -90;	//Unable to verify the value written to the CIS
        public const Int16 ERR_CISNONE = -91;	//The CIS is not visible

    }	//end class
}	//end namespace
