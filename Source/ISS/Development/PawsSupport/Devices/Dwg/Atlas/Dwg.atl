C        1         2         3         4         5         6         7         8
 2345678901234567890123456789012345678901234567890123456789012345678901234567890
                                                                               $
 000000 BEGIN, ATLAS PROGRAM 'Dwg_716_Benchmark' $
C **************************************************************
  * Purpose: To test all modifiers and ranges as required for the
  *          WcemDwg.dll.
  * Subset:  PAWS_85 or PAWS_89
  *
  **************************************************************$
C *******************************************************************
C * INCLUDE STATEMENTS
C ******************************************************************* $
C $
C 10/12/06 added code for pcr 51 check. calls a nam. $ 
 000020 INCLUDE, NON-ATLAS MODULE 'M910NAM'$
C $
C *******************************************************************
C * REQUIRE STATEMENTS
C ******************************************************************* $
C $
C        IDENTIFY, EVENT 'MI' AS MANUAL-INTERVENTION $
C $
C *******************************************************************
C * DECLARE STATEMENTS - PROCEDURAL
C ******************************************************************* $
C $
        DECLARE, VARIABLE, 'CHOICE' IS INTEGER $
  	DECLARE, VARIABLE, 'E-E' IS BOOLEAN $
        DECLARE, VARIABLE, 'MAX-T' IS DECIMAL $
        DECLARE, VARIABLE, 'VER-UL', 'VER-LL' IS DECIMAL $ 
 	DECLARE, VARIABLE, 'FAIL-FLAG' IS DECIMAL $
       	DECLARE, VARIABLE, 'TESTNO' IS INTEGER $
C 10/20/06 $
	DECLARE, VARIABLE, 'ONCEDONE' IS BOOLEAN $	
C *******************************************************************
C * DECLARE STATEMENTS - TEST
C ******************************************************************* $
C $

	DECLARE, VARIABLE, 'ExpectBit' IS STRING(1) OF BIT $
	DECLARE, VARIABLE, 'ResultBit' IS STRING(1) OF BIT $

	DECLARE, VARIABLE, 'ExpectNibble' IS STRING(4) OF BIT $
	DECLARE, VARIABLE, 'ResultNibble' IS STRING(4) OF BIT $

	DECLARE, VARIABLE, 'ExpectSeven' IS STRING(7) OF BIT $
	DECLARE, VARIABLE, 'ResultSeven' IS STRING(7) OF BIT $

	DECLARE, VARIABLE, 'ExpectByte' IS STRING(8) OF BIT $
	DECLARE, VARIABLE, 'ResultByte' IS STRING(8) OF BIT $

	DECLARE, VARIABLE, 'ExpectDword' IS STRING(32) OF BIT $
	DECLARE, VARIABLE, 'ResultDword' IS STRING(32) OF BIT $

	DECLARE, VARIABLE, 'ExpectArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT 
		INITIAL = ( X'1221',X'ABCD',X'ABCD',X'FFFF',X'FFFF')$
	DECLARE, VARIABLE, 'ResultArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT
		INITIAL = ( X'0000',X'0000',X'0000',X'0000',X'0000')$
	DECLARE, VARIABLE, 'ReferenceArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT 
		INITIAL = ( X'0001',X'DBCE',X'ABCD',X'FFF0',X'FFF0')$
	DECLARE, VARIABLE, 'MaskArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT
		INITIAL = ( X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFF')$
	DECLARE, VARIABLE, 'CompareArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT
		INITIAL = ( X'0000',X'0000',X'0000',X'0000',X'0000')$
	DECLARE, VARIABLE, 'ErrorArray' IS ARRAY(1 THRU 5) OF STRING(16) OF BIT
		INITIAL = ( X'0000',X'0000',X'0000',X'0000',X'0000')$

	DECLARE, VARIABLE, 'NibbleA' IS STRING(4) OF BIT $
	DECLARE, VARIABLE, 'NibbleB' IS STRING(4) OF BIT $
	DECLARE, VARIABLE, 'NibbleC' IS STRING(4) OF BIT $

	DECLARE, VARIABLE, 'ResultNibbleA' IS STRING(4) OF BIT $
	DECLARE, VARIABLE, 'ResultNibbleB' IS STRING(4) OF BIT $
	DECLARE, VARIABLE, 'ResultNibbleC' IS STRING(4) OF BIT $

	DECLARE, VARIABLE, 'WordArray' IS ARRAY(1 THRU 10) OF STRING(16) OF BIT $
	

	DECLARE, VARIABLE, 'ExpectDArray' IS ARRAY(1 THRU 8) OF STRING(32) OF BIT 
		INITIAL = ( X'AA',X'ABCD1234',X'BBBBCCCC',X'10000', X'AAAAABBB',X'ABCD3210',X'0987BBBB',X'00100000')$
	DECLARE, VARIABLE, 'ResultDArray' IS ARRAY(1 THRU 10) OF STRING(32) OF BIT$

	DECLARE, VARIABLE, 'ExpectWord' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'ResultWord' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'ResultWord32' IS STRING(32) OF BIT $
	DECLARE, VARIABLE, 'ExpectWord2' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'ResultWord2' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'CompareWord' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'ErrorWord' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'Mask1Word' IS STRING(16) OF BIT $
	DECLARE, VARIABLE, 'ReferenceWord' IS STRING(16) OF BIT $

	DECLARE, VARIABLE, 'CompareDword' IS STRING(32) OF BIT $
	DECLARE, VARIABLE, 'ErrorDword' IS STRING(32) OF BIT $
	DECLARE, VARIABLE, 'Mask1Dword' IS STRING(32) OF BIT $
	DECLARE, VARIABLE, 'ReferenceDword' IS STRING(32) OF BIT $

	
	DECLARE, VARIABLE, 'faultCount' IS INTEGER $
	DECLARE, VARIABLE, 'resultIndex' IS INTEGER $
	DECLARE, VARIABLE, 'ErrorIndex' IS ARRAY(1 THRU 16) OF INTEGER$
	DECLARE, VARIABLE, 'Index' IS INTEGER$

	DECLARE, VARIABLE, 'BAD-LEVELS-FLAG0' IS BOOLEAN $
	DECLARE, VARIABLE, 'BAD-LEVELS-FLAG1' IS BOOLEAN $
	DECLARE, VARIABLE, 'BAD-LEVELS-FLAG2' IS BOOLEAN $
	DECLARE, VARIABLE, 'BAD-LEVELS-FLAG3' IS BOOLEAN $
	DECLARE, VARIABLE, 'BAD-LEVELS-FLAG4' IS BOOLEAN $

	DECLARE, VARIABLE, 'FAIL' IS BOOLEAN $
	DECLARE, VARIABLE, 'ID' IS STRING(2) OF BIT $
	DECLARE, VARIABLE, 'SURVEYHVPINS' IS STRING(3) OF BIT $
C $
C 10/12/06 part of pcr 100 $
 000030 DECLARE, VARIABLE,
                'DISPLAY-DATA' IS RECORD OF
            ['MEASURED-VALUE' IS DECIMAL;
		 'EXPECTED-PATTERN' IS STRING (32) OF BIT;
             'MEASURED-PATTERN' IS STRING (32) OF BIT ] $
C $
C 10/12/06 part of pcr 100 $
 000035 DECLARE, VARIABLE,
              'CIRCUIT_FILE' IS STRING (256) OF CHAR;
                  'DTB_FILE' IS STRING (256) OF CHAR;
                 'DIAG_FLAG' IS INTEGER;
            'DTS_RESET_FLAG' IS INTEGER;
                 'PIN_STATE' IS INTEGER $
        DECLARE, VARIABLE,
            'RETURN_STATUS' IS INTEGER;
             'RESULTS_FILE' IS STRING (60) OF CHAR $
C $ 
C part of pcr 98 $
C $
	DECLARE, VARIABLE, 'BYTE-DATA' IS STRING (8) OF BIT  $
C $
        DECLARE, VARIABLE,'DIGRESP' IS ARRAY (1 THRU 10) OF STRING (32) OF BIT $
C $
C 11/9/06 DECLARES,defines, identifies for pcr 109 $
C $
        DECLARE, VARIABLE, 
            'TRIG-PATTERN' IS ARRAY (1 THRU 10) OF STRING (2) OF BIT
            INITIAL = B'01', B'01', B'10', B'10', B'10',
                      B'10', B'10', B'10', B'10', B'10'  $
         DECLARE, VARIABLE, 
            'MEAS-TIME' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'MEAS-TIME1' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'MEAS-TIME2' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'DELAY1' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'DELAY2' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'DELAY3' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'DIFF' IS DECIMAL 
            INITIAL = 9.99E35 $
         DECLARE, VARIABLE, 
            'DTS-CAL' IS DECIMAL 
            INITIAL = 9.99E35 $   
         DECLARE, VARIABLE, 
            'FG-CAL' IS DECIMAL 
            INITIAL = 9.99E35 $   
         DECLARE, VARIABLE, 
            'CAL-VALUE' IS DECIMAL 
            INITIAL = 9.99E35 $
C $
         IDENTIFY, EVENT 'STARTP' AS (VOLTAGE), PULSED DC,
            EQ 1.00 V, 
            INCREASING, 
            VOLTAGE MAX 2.0 V,
            TEST-EQUIP-IMP 50 OHM,
            PRF MAX 4 MHZ,
            CNX HI CT-STRT   $
C            EQ 1.25 V, $ 
          IDENTIFY, EVENT 'STOPP' AS (VOLTAGE), PULSED DC,
            EQ 1.0 V, 
            INCREASING, 
            VOLTAGE MAX 2.0 V,
            TEST-EQUIP-IMP 50 OHM,
            PRF MAX 4 MHZ,
            CNX HI CT-STOP  $
          IDENTIFY, EVENT 'STOPP1' AS (VOLTAGE), PULSED DC,
            EQ 1.0 V, 
            INCREASING, 
            VOLTAGE MAX 2.0 V,
            TEST-EQUIP-IMP 50 OHM,
            PRF MAX 4 MHZ,
            CNX HI ID-PDCOUT1  $
C $
C 11/13/06 - pcr#129 insert $
C $
	DECLARE, TYPE, 'CNX-LIST' IS CONNECTION( CHAN-00, CHAN-01, CHAN-02, CHAN-03,
						 CHAN-04, CHAN-05, CHAN-06, CHAN-07,
						 CHAN-08, CHAN-09, CHAN-10, CHAN-11,
						 CHAN-12, CHAN-13, CHAN-14, CHAN-15,
						 CHAN-16, CHAN-17, CHAN-18, CHAN-19,
						 CHAN-20, CHAN-21, CHAN-22, CHAN-23,
						 CHAN-24, CHAN-25, CHAN-26, CHAN-27,
						 CHAN-28, CHAN-29, CHAN-30, CHAN-31,
						 CHAN-32, CHAN-33, CHAN-34, CHAN-35,
						 CHAN-36, CHAN-37, CHAN-38 )       $

	DECLARE, TYPE, 'CNX-L200' IS CONNECTION( CHAN-100, CHAN-101, CHAN-102, CHAN-103,
						 CHAN-104, CHAN-105, CHAN-106, CHAN-107,
						 CHAN-108, CHAN-109, CHAN-110, CHAN-111,
						 CHAN-112, CHAN-113, CHAN-114, CHAN-115,
						 CHAN-116, CHAN-117, CHAN-118, CHAN-119,
						 CHAN-120, CHAN-121, CHAN-122, CHAN-123,
						 CHAN-124, CHAN-125, CHAN-126, CHAN-127,
						 CHAN-128, CHAN-129, CHAN-130, CHAN-131,
						 CHAN-132, CHAN-133, CHAN-134, CHAN-135,
						 CHAN-136, CHAN-137, CHAN-138, CHAN-139,
						 CHAN-140, CHAN-141, CHAN-142, CHAN-143,
						 CHAN-144, CHAN-145, CHAN-146, CHAN-147,
						 CHAN-148, CHAN-149, CHAN-150, CHAN-151,
						 CHAN-152, CHAN-153, CHAN-154, CHAN-155,
						 CHAN-156, CHAN-157, CHAN-158 )       $

        DECLARE, VARIABLE, 'I' IS INTEGER $
        DECLARE, VARIABLE, '100-DATA' IS STRING(39) OF BIT  $
        DECLARE, VARIABLE,
	 '111-PINLIST' IS ARRAY (1 THRU 39) OF STRING(5) OF CHAR
        INITIAL = 1 OF (C'J1.C7', C'J1.E8', C'J1.P6',
                        C'J1.B7', C'J1.D7', C'J1.E7',
                        C'J1.C6', C'J1.A3', C'J1.J7',
                        C'J1.N7', C'J1.M3', C'J1.B8',
                        C'J1.A5', C'J1.C8', C'J1.B1',
                        C'J1.G8', C'J1.K7', C'J1.M8',
                        C'J1.F8', C'J1.G7', C'J2.A3',
                        C'J2.A1', C'J2.B1', C'J2.E3',
                        C'J3.B2', C'J1.J8', C'J1.P5',
                        C'J1.K8', C'J1.G2', C'J1.H7',
                        C'J1.L7', C'J1.N8', C'J1.B5',
                        C'J1.N6', C'J2.D1', C'J2.G2',
                        C'J2.F2', C'J1.A4', C'J2.N4') $
        DECLARE, VARIABLE,
                 '111-CNX' IS ARRAY (1 THRU 39) OF 'CNX-LIST'
        INITIAL = 1 OF ( CONNECTION CHAN-00,CONNECTION CHAN-01,CONNECTION CHAN-02,CONNECTION CHAN-03,
			 CONNECTION CHAN-04,CONNECTION CHAN-05,CONNECTION CHAN-06,CONNECTION CHAN-07,
			 CONNECTION CHAN-08,CONNECTION CHAN-09,CONNECTION CHAN-10,CONNECTION CHAN-11,
			 CONNECTION CHAN-12,CONNECTION CHAN-13,CONNECTION CHAN-14,CONNECTION CHAN-15,
			 CONNECTION CHAN-16,CONNECTION CHAN-17,CONNECTION CHAN-18,CONNECTION CHAN-19,
			 CONNECTION CHAN-20,CONNECTION CHAN-21,CONNECTION CHAN-22,CONNECTION CHAN-23,
			 CONNECTION CHAN-24,CONNECTION CHAN-25,CONNECTION CHAN-26,CONNECTION CHAN-27,
			 CONNECTION CHAN-28,CONNECTION CHAN-29,CONNECTION CHAN-30,CONNECTION CHAN-31,
			 CONNECTION CHAN-32,CONNECTION CHAN-33,CONNECTION CHAN-34,CONNECTION CHAN-35,
			 CONNECTION CHAN-36,CONNECTION CHAN-37,CONNECTION CHAN-38 )       $

C $
C 11/14/06 - pcr 128, 11/17/06 - pcr 136 $
 000102 DECLARE, VARIABLE, 'MEASDATA2' IS STRING (2)  OF BIT $
C $
C 11/15/06 FOR PCR 126 $
        DECLARE, VARIABLE, '200-RESULT1' IS STRING(44) OF BIT $
        DECLARE, VARIABLE, '200-RESULT2' IS STRING(44) OF BIT $
        DECLARE, VARIABLE, '200-RESULT3' IS STRING(16) OF BIT $

C $
C 11/15/06 for pcr 125 $
	DECLARE, VARIABLE, 'PULLUPTEST' IS STRING (18) OF BIT $
	DECLARE, VARIABLE, 'BUSDATA'    IS STRING (16) OF BIT $
	DECLARE, VARIABLE, 'W1CABLE'    IS STRING (53) OF BIT $
	DECLARE, VARIABLE, 'J2TEST'     IS STRING (8) OF BIT $
C $
C 11/15/06 - pcr 134 $
	DECLARE, VARIABLE, 'BIT-DATA' IS STRING (1) OF BIT  $
C $
C 11/17/06 - pcr 135 $
      DECLARE, VARIABLE,'2-BAD-STEPS' IS STRING(21) OF BIT $
      DECLARE, VARIABLE,'200-DATA' IS ARRAY(1 THRU 22) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'200-DATA32' IS ARRAY(1 THRU 22) OF STRING(32) OF BIT $
      DECLARE, VARIABLE,'200-MASK' IS ARRAY(1 THRU 22) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'200-RESP' IS ARRAY(1 THRU 22) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'ERROR-NDX' IS ARRAY(1 THRU 22) OF INTEGER $
      DECLARE, VARIABLE,'200-ERROR-LST' IS ARRAY(1 THRU 22) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'ERR-COUNT' IS INTEGER $
      DECLARE, VARIABLE,'222-BAD-STEPS' IS STRING(11) OF BIT $
      DECLARE, VARIABLE,'222-DATA' IS ARRAY(1 THRU 12) OF STRING(11) OF BIT $
      DECLARE, VARIABLE,'222-RESP' IS ARRAY(1 THRU 12) OF STRING(11) OF BIT $
      DECLARE, VARIABLE,'222-ERROR-LST' IS ARRAY(1 THRU 12) OF STRING(11) OF BIT $
      DECLARE, VARIABLE,'222-SVCP-LST' IS ARRAY(1 THRU 12) OF STRING(11) OF BIT $
      DECLARE, VARIABLE,'201-DATA' IS ARRAY(1 THRU 9) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'201-MASK' IS ARRAY(1 THRU 9) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'201-RESP' IS ARRAY(1 THRU 9) OF STRING(21) OF BIT $
      DECLARE, VARIABLE,'ERROR-201NDX' IS ARRAY(1 THRU 9) OF INTEGER $
      DECLARE, VARIABLE,'201-ERROR-LST' IS ARRAY(1 THRU 9) OF STRING(21) OF BIT $
C $
C 12/12/06 - pcr 145 cnx field variable not connecting $
      DECLARE, VARIABLE, '400-RESULT'  IS STRING(1) OF BIT $
      DECLARE, VARIABLE, '400-RESULT1' IS STRING(60) OF BIT $
      DECLARE, VARIABLE, '400-RESULT2' IS STRING(60) OF BIT $
      DECLARE, VARIABLE, '401-CNX' IS ARRAY (1 THRU 59) OF 'CNX-L200'
                                    INITIAL = (CONNECTION CHAN-100,
                                               CONNECTION CHAN-101,
                                               CONNECTION CHAN-102,
                                               CONNECTION CHAN-103,
                                               CONNECTION CHAN-104,
                                               CONNECTION CHAN-105,
                                               CONNECTION CHAN-106,
                                               CONNECTION CHAN-107,
                                               CONNECTION CHAN-108,
                                               CONNECTION CHAN-109,
                                               CONNECTION CHAN-110,
                                               CONNECTION CHAN-111,
                                               CONNECTION CHAN-112,
                                               CONNECTION CHAN-113,
                                               CONNECTION CHAN-114,
                                               CONNECTION CHAN-115,
                                               CONNECTION CHAN-116,
                                               CONNECTION CHAN-117,
                                               CONNECTION CHAN-118,
                                               CONNECTION CHAN-119,
                                               CONNECTION CHAN-120,
                                               CONNECTION CHAN-121,
                                               CONNECTION CHAN-122,
                                               CONNECTION CHAN-123,
                                               CONNECTION CHAN-124,
                                               CONNECTION CHAN-125,
                                               CONNECTION CHAN-126,
                                               CONNECTION CHAN-127,
                                               CONNECTION CHAN-128,
                                               CONNECTION CHAN-129,
                                               CONNECTION CHAN-130,
                                               CONNECTION CHAN-131,
                                               CONNECTION CHAN-132,
                                               CONNECTION CHAN-133,
                                               CONNECTION CHAN-134,
                                               CONNECTION CHAN-135,
                                               CONNECTION CHAN-136,
                                               CONNECTION CHAN-137,
                                               CONNECTION CHAN-138,
                                               CONNECTION CHAN-139,
                                               CONNECTION CHAN-140,
                                               CONNECTION CHAN-141,
                                               CONNECTION CHAN-142,
                                               CONNECTION CHAN-143,
                                               CONNECTION CHAN-144,
                                               CONNECTION CHAN-145,
                                               CONNECTION CHAN-146,
                                               CONNECTION CHAN-147,
                                               CONNECTION CHAN-148,
                                               CONNECTION CHAN-149,
                                               CONNECTION CHAN-150,
                                               CONNECTION CHAN-151,
                                               CONNECTION CHAN-152,
                                               CONNECTION CHAN-153,
                                               CONNECTION CHAN-154,
                                               CONNECTION CHAN-155,
                                               CONNECTION CHAN-156,
                                               CONNECTION CHAN-157,
                                               CONNECTION CHAN-158);
                           '401-PINLIST' IS ARRAY(1 THRU 59) OF STRING(6) OF CHAR
                                        INITIAL = (C'J1.110', 
                                                   C'J1.111',
                                                   C'J1.112',
                                                   C'J1.114',
                                                   C'J1.115',
                                                   C'J1.116',
                                                   C'J1.117',
                                                   C'J1.118',
                                                   C'J1.66 ',
                                                   C'J1.119',
                                                   C'J1.120',
                                                   C'J1.121',
                                                   C'J1.69 ',
                                                   C'J1.122',
                                                   C'J1.123',
                                                   C'J1.124',
                                                   C'J1.125',
                                                   C'J1.126',
                                                   C'J1.127',
                                                   C'J1.128',
                                                   C'J1.76 ',
                                                   C'J1.129',
                                                   C'J1.2  ',
                                                   C'J1.4  ',
                                                   C'J1.5  ',
                                                   C'J1.58 ',
                                                   C'J1.6  ',
                                                   C'J1.59 ',
                                                   C'J1.7  ',
                                                   C'J1.60 ',
                                                   C'J1.61 ',
                                                   C'J1.9  ',
                                                   C'J1.62 ',
                                                   C'J1.10 ',
                                                   C'J1.63 ',
                                                   C'J1.11 ',
                                                   C'J1.64 ',
                                                   C'J1.12 ',
                                                   C'J1.65 ',
                                                   C'J1.13 ',
                                                   C'J1.14 ',
                                                   C'J1.67 ',
                                                   C'J1.15 ',
                                                   C'J1.68 ',
                                                   C'J1.16 ',
                                                   C'J1.17 ',
                                                   C'J1.70 ',
                                                   C'J1.18 ',
                                                   C'J1.71 ',
                                                   C'J1.19 ',
                                                   C'J1.72 ',
                                                   C'J1.20 ',
                                                   C'J1.73 ',
                                                   C'J1.21 ',
                                                   C'J1.22 ',
                                                   C'J1.75 ',
                                                   C'J1.23 ',
                                                   C'J1.77 ',
                                                   C'J1.24 ') $
C 12/18/06 pcr 164$
        DECLARE, VARIABLE,'701T-RESULT' IS ARRAY(1 THRU 4) OF STRING(12) OF BIT  $
        DECLARE, VARIABLE,'701E-RESULT' IS ARRAY(1 THRU 4) OF STRING(4) OF BIT  $
C 1/3/07 - pcr 139 declares $
	  DECLARE, VARIABLE, 'VCRU_DATA', 'VCRU_ERR1', 
	                     'VCRU_ERR2' IS STRING(16) OF BIT $
C $
C 1/4/07 - PCR 183 ENHANCED FOR 44 CHANNELS $
        DECLARE, VARIABLE, '200-RESULT1-183' IS STRING(44) OF BIT $
        DECLARE, VARIABLE, '200-RESULT2-183' IS STRING(44) OF BIT $
C 1/4/07 = PCR 183 ENHANCED FOR 48 CHANNELS AND LARGE PATTERN SET $
        DECLARE, VARIABLE, '6-BAD-STEPS' IS STRING(48) OF BIT $
        DECLARE, VARIABLE, '6-ERROR-NDX' IS ARRAY(1 THRU 49) OF INTEGER $
        DECLARE, VARIABLE,'600-DATA' IS ARRAY(1 THRU 49) OF STRING(48) OF BIT $
        DECLARE, VARIABLE, '600-RESP' IS ARRAY(1 THRU 49) OF STRING(48) OF BIT $
        DECLARE, VARIABLE, '600-ERROR-LST' IS ARRAY(1 THRU 49) OF STRING(48) OF BIT $
C $
C 1/21/07 - PCR 193 DECLARE FOR BIT  $
        DECLARE, VARIABLE, '900-RESULT'  IS STRING(1) OF BIT $
C $
C 1/31/07 - pcr#200,201 insert $
C $
       DECLARE, VARIABLE, '233-BAD-STEPS' IS STRING(4) OF BIT;
                           '233-DATA' IS ARRAY(1 THRU 5) OF STRING(4) OF BIT;
                           '233-RESP' IS ARRAY(1 THRU 5) OF STRING(4) OF BIT;
                           '233-ERROR-LST' IS ARRAY(1 THRU 5) OF STRING(4) OF BIT $
C $
C  2/7/07 pcr 200 $
	DECLARE, VARIABLE, 'TESTJ1'    IS STRING (152) OF BIT $
	DECLARE, VARIABLE, 'TESTJ2'    IS STRING (157) OF BIT $
C $
C 004004  pcr 193 secind half. 2/21/07 $
	DECLARE, VARIABLE, '460-RESULT1' IS STRING(7) OF BIT;
                           '460-RESULT2' IS STRING(7) OF BIT $
C $
C  3/7/07 pcr 207 $
C        DECLARE, VARIABLE,'ERR_TP1' IS STRING (16) OF BIT INITIAL = X'0000';
			  'ERR_TP2' IS STRING (16) OF BIT INITIAL = X'0000'$
        DECLARE, VARIABLE,'ERR_TP1' IS STRING (16) OF BIT;
			        'ERR_TP2' IS STRING (16) OF BIT $
C $
C 3/15/07 pcr error log list $ 
     DECLARE, VARIABLE,    'IJ'         IS INTEGER;
                           'IK'         IS INTEGER $
       DECLARE, VARIABLE,  '3-ERROR-NDX' IS ARRAY(1 THRU 7) OF INTEGER;
                           '300-DATA' IS ARRAY(1 THRU 7) OF STRING(6) OF BIT
                                        INITIAL = (B'111111',
                                                   B'111111',
                                                   B'111111',
                                                   B'111111',
                                                   B'111111',
                                                   B'111111',
                                                   B'111111');
                           '300-RESP' IS ARRAY(1 THRU 7) OF STRING(6) OF BIT;
                           '300-ERROR-LST' IS ARRAY(1 THRU 7) OF STRING(6) OF BIT  $
C  $
C                                        INITIAL = (B'000000',
                                                   B'000001',
                                                   B'000010',
                                                   B'000100',
                                                   B'001000',
                                                   B'010000',
                                                   B'100000'); $
C $
C 3/19/07 pcr e232,233 log list $ 
        DECLARE, VARIABLE, '9-BAD-STEPS' IS STRING(2) OF BIT;
                           '900-DATA' IS ARRAY(1 THRU 3) OF STRING(3) OF BIT;
                           '900-REF' IS ARRAY(1 THRU 3) OF STRING(2) OF BIT;
                           '900-RESP' IS ARRAY(1 THRU 3) OF STRING(2) OF BIT;
                           '900-ERROR-LST' IS ARRAY(1 THRU 3) OF STRING(2) OF BIT $
C $
C *******************************************************************
C * IDENTIFY EVENTS
C ******************************************************************* $
C $	
C	PA=PHASE ASSERT
C	WO=WINDOW OPEN
C	PAR=PHASE ASSERT RETURN

C'LAYER 1' : Period=1 usec, PA=20ns, PR=170ns, WO=80ns $

 	  IDENTIFY, TIMER 'CLOCK1' TIME INTERVAL, TIME MAX 10 USEC $
          IDENTIFY, EVENT '1USEC' AS TIMER 'CLOCK1' EQ 1 USEC $

          IDENTIFY, EVENT 'PA1' AS 20 NSEC AFTER '1USEC' $

          IDENTIFY, EVENT 'WO1' AS 60 NSEC AFTER '1USEC' $

          IDENTIFY, EVENT 'PAR1' AS 150 NSEC AFTER 'PA1' $

C'LAYER 2': Period=10us, PA=2us, PR=8us, WO=5us $  

          IDENTIFY, TIMER 'CLOCK2' TIME INTERVAL, TIME MAX 100 USEC $
          IDENTIFY, EVENT '10USEC' AS TIMER 'CLOCK2' EQ 10 USEC $

          IDENTIFY, EVENT 'PA2' AS 50 NSEC AFTER '10USEC' $

          IDENTIFY, EVENT 'WO2' AS 100 NSEC AFTER '10USEC' $

          IDENTIFY, EVENT 'PAR2' AS 150 NSEC AFTER 'PA2' $
	
C'LAYER 3': Period=100 usec, PA=16ns, PR=62ns, WO=150ns $  

 	  IDENTIFY, TIMER 'CLOCK3' TIME INTERVAL, TIME MAX 100 USEC $
          IDENTIFY, EVENT '100USEC' AS TIMER 'CLOCK3' EQ 10 USEC $

          IDENTIFY, EVENT 'PA3' AS 16 NSEC AFTER '100USEC' $

          IDENTIFY, EVENT 'WO3' AS 62 NSEC AFTER '100USEC' $

          IDENTIFY, EVENT 'PAR3' AS 150 NSEC AFTER 'PA3' $

C'External Signal': External Signal = Beginning of Period, PA=16ns, PR=62ns, WO=150ns $  

	        
       	  IDENTIFY, EVENT 'EXTEVENT' AS (VOLTAGE), SQUARE WAVE,
             EQ 2V,
             PERIOD RANGE 100 NSEC TO 1 USEC,
             MAX-TIME 1USEC,
                CNX  $

	IDENTIFY, EVENT 'PAEXT' AS 192 NSEC AFTER 'EXTEVENT' $

        IDENTIFY, EVENT 'WOEXT' AS 899 NSEC AFTER 'EXTEVENT' $

        IDENTIFY, EVENT 'PAREXT' AS 1500 NSEC AFTER 'PAEXT' $
C $
C part of pcr 55 $ 
C 000200 IDENTIFY, TIMER 'TIMER 1' TIME INTERVAL, TIME MAX 50000 NSEC $
C        IDENTIFY, EVENT 'CLOCK1A' AS TIMER 'TIMER 1' EQ 50000 NSEC $
C        IDENTIFY, EVENT 'PROBE1' AS 49500 NSEC AFTER 'CLOCK1A' $
C        IDENTIFY, EVENT 'PHASE ASSERT 1' AS 50 NSEC AFTER 'CLOCK1A' $
C        IDENTIFY, EVENT 'PHASE RETURN 1' AS 45000 NSEC AFTER 'PHASE ASSERT 1' $ 
C $
C part of pcr 100 $ 
 000205 IDENTIFY, TIMER 'TIMER 1' TIME INTERVAL, TIME MAX 10000 NSEC $
        IDENTIFY, EVENT 'CLOCK1A' AS TIMER 'TIMER 1' EQ 10000 NSEC $
        IDENTIFY, EVENT 'PROBE1' AS 9950 NSEC AFTER 'CLOCK1A' $
        IDENTIFY, EVENT 'PHASE ASSERT 1' AS 50 NSEC AFTER 'CLOCK1A' $
        IDENTIFY, EVENT 'PHASE RETURN 1' AS 950 NSEC AFTER 'PHASE ASSERT 1' $ 
C $
 000210 IDENTIFY, TIMER 'TIMER PCR51' TIME INTERVAL, TIME MAX 10000 NSEC $
        IDENTIFY, EVENT 'CLOCK PCR51' AS TIMER 'TIMER PCR51' EQ 10000 NSEC $
        IDENTIFY, EVENT 'PROBE PCR51' AS 9950 NSEC AFTER 'CLOCK PCR51' $
        IDENTIFY, EVENT 'PHASE ASSERT PCR51' AS 50 NSEC AFTER 'CLOCK PCR51' $
        IDENTIFY, EVENT 'PHASE RETURN PCR51' AS 950 NSEC AFTER'PHASE ASSERT PCR51' $ 
C $
C 11/15/06 pcr 125 $
 000215 IDENTIFY, TIMER 'TIMER 125' TIME INTERVAL, TIME MAX 50000 NSEC $
        IDENTIFY, EVENT 'CLOCK125' AS TIMER 'TIMER 125' EQ 50000 NSEC $
        IDENTIFY, EVENT 'PROBE125' AS 49500 NSEC AFTER 'CLOCK125' $
        IDENTIFY, EVENT 'PHASE ASSERT 125' AS 50 NSEC AFTER 'CLOCK125' $
        IDENTIFY, EVENT 'PHASE RETURN 125' AS 45000 NSEC AFTER 'PHASE ASSERT 125' $ 
C $
C *******************************************************************
C * DEFINE DIGITAL CONFIGURATION - INDIVIDUAL AND WORD
C ******************************************************************* $
 000220 DEFINE, 'DTS TRIG', DIGITAL CONFIGURATION  $ 
          DEFINE, 'STIMULUS', DIGITAL SOURCE, LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
            CNX HI DTS-CH55 DTS-CH41 $
        END, 'DTS TRIG'  $ 
C	DIGITAL SOURCES WITH BAD LEVELS FLAG  $

        DEFINE, 'Individual Configuration', DIGITAL CONFIGURATION $
         DEFINE, 'CH24-INPUT', DIGITAL SOURCE, LOGIC DATA,
	    TYPE PARALLEL,
            VOLTAGE-ONE 5V,
            VOLTAGE-ZERO .2V,
	    VOLTAGE-QUIES 2.5V,
	    RISE-TIME 0 SEC,
	    FALL-TIME 0 SEC,
            LEVEL-LOGIC-ONE VOLTAGE 3.5V,
            LEVEL-LOGIC-ZERO VOLTAGE  2V,
      	    ILLEGAL-STATE-INDICATOR 'BAD-LEVELS-FLAG0',
            CNX HI CHAN-24  $
 
        DEFINE, 'CH25-INPUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,
            LEVEL-LOGIC-ONE  VOLTAGE 2.0V,
            LEVEL-LOGIC-ZERO VOLTAGE 0.8V,
            ILLEGAL-STATE-INDICATOR 'BAD-LEVELS-FLAG1',
            CNX HI CHAN-25 $

       DEFINE, 'CH26-INPUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,
            LEVEL-LOGIC-ONE  VOLTAGE 2.0V,
            LEVEL-LOGIC-ZERO VOLTAGE 0.8V,
            ILLEGAL-STATE-INDICATOR 'BAD-LEVELS-FLAG2',
            CNX HI CHAN-26$

       DEFINE, 'CH27-INPUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,
	    LEVEL-LOGIC-ONE  VOLTAGE 2.0V,
            LEVEL-LOGIC-ZERO VOLTAGE 0.8V,
            ILLEGAL-STATE-INDICATOR 'BAD-LEVELS-FLAG3',
            CNX HI CHAN-27$
C	DIGITAL SENSORS $

       DEFINE, 'CH48-OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	    TYPE PARALLEL,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-48  $

       DEFINE, 'CH49-OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-49  $
	
       DEFINE, 'CH50-OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-50  $

       DEFINE, 'CH51-OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-51 $
       END, 'Individual Configuration' $

	DEFINE, 'Nibble Configuration', DIGITAL CONFIGURATION $

		DEFINE, 'NIBBLE_INPUT', DIGITAL SOURCE, LOGIC DATA,
		VOLTAGE-ONE  5.0 V,
		VOLTAGE-ZERO 0.2 V,
		CNX HI CHAN-24 CHAN-25 CHAN-26 CHAN-27 $

		DEFINE, 'NIBBLE_OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
		VOLTAGE-ONE  2.0 V,
		VOLTAGE-ZERO 0.8 V,
		CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51 $

		DEFINE, 'NIBBLE_IN_A', DIGITAL SOURCE, LOGIC DATA,
		VOLTAGE-ONE  5.0 V,
		VOLTAGE-ZERO 0.2 V,
		CNX HI CHAN-24 CHAN-25 CHAN-26 CHAN-27 $

		DEFINE, 'NIBBLE_OUT_A', DIGITAL SENSOR, (VALUE), LOGIC DATA,
		VOLTAGE-ONE  2.0 V,
		VOLTAGE-ZERO 0.8 V,
		CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51 $

		DEFINE, 'NIBBLE_IN_B', DIGITAL SOURCE, LOGIC DATA,
		VOLTAGE-ONE  5.0 V,
		VOLTAGE-ZERO 0.2 V,
		CNX HI CHAN-28 CHAN-29 CHAN-30 CHAN-31 $
	
		DEFINE, 'NIBBLE_OUT_B', DIGITAL SENSOR, (VALUE), LOGIC DATA,
		VOLTAGE-ONE  2.0 V,
		VOLTAGE-ZERO 0.8 V,
		CNX HI CHAN-52 CHAN-53 CHAN-54 CHAN-55 $
	
		DEFINE, 'NIBBLE_IN_C', DIGITAL SOURCE, LOGIC DATA,
		VOLTAGE-ONE  5.0 V,
		VOLTAGE-ZERO 0.2 V,
		CNX HI CHAN-32 CHAN-33 CHAN-34 CHAN-35 $
	
		DEFINE, 'NIBBLE_OUT_C', DIGITAL SENSOR, (VALUE), LOGIC DATA,
		VOLTAGE-ONE  2.0 V,
		VOLTAGE-ZERO 0.8 V,
		CNX HI CHAN-56 CHAN-57 CHAN-58 CHAN-59 $

	END, 'Nibble Configuration' $

	DEFINE, 'Seven Configuration', DIGITAL CONFIGURATION $

		DEFINE, 'SEVEN_INPUT', DIGITAL SOURCE, LOGIC DATA,
		VOLTAGE-ONE  5.0 V,
		VOLTAGE-ZERO 0.2 V,
		CNX HI CHAN-24 CHAN-25 CHAN-26 CHAN-27 CHAN-28 CHAN-29 CHAN-30$

	DEFINE, 'SEVEN_OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
		VOLTAGE-ONE  2.0 V,
		VOLTAGE-ZERO 0.8 V,
		CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54$

	END, 'Seven Configuration' $

     
         DEFINE, 'Word Configuration', DIGITAL CONFIGURATION $

          DEFINE, 'WORD_INPUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,
              LEVEL-LOGIC-ONE  VOLTAGE 2.0V,
              LEVEL-LOGIC-ZERO VOLTAGE 0.8V,
            ILLEGAL-STATE-INDICATOR 'BAD-LEVELS-FLAG4',
            CNX HI  CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$


         DEFINE, 'WORD_OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI  CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$

        END, 'Word Configuration' $

	DEFINE, 'ID Word Configuration', DIGITAL CONFIGURATION $

        DEFINE, 'ID_WORD_OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
	     CNX HI 	CHAN-16 CHAN-17 CHAN-18 CHAN-19 CHAN-20 CHAN-21 CHAN-22 CHAN-23
			CHAN-24 CHAN-25 CHAN-26 CHAN-27 CHAN-28 CHAN-29 CHAN-30 CHAN-31 $

C	     CNX HI 	CHAN-HV00 CHAN-HV01 CHAN-HV02 CHAN-HV03 CHAN-HV04 CHAN-HV05 CHAN-HV06 CHAN-HV07
			CHAN-HV08 CHAN-HV09 CHAN-HV10 CHAN-HV11 CHAN-HV12 CHAN-HV13 CHAN-HV14 CHAN-HV15 $
          DEFINE, 'RESPONSE183', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CURRENT-ONE MAX -10E-3 A,
            CURRENT-ZERO MAX 10E-3 A,
            VOLTAGE-QUIES 4.5 V,
            CNX HI 
	      CHAN-11 CHAN-21 CHAN-23 CHAN-30  CHAN-31  CHAN-32 CHAN-33 CHAN-39
              CHAN-40 CHAN-54 CHAN-58 CHAN-59  CHAN-60  CHAN-61 CHAN-62 CHAN-63
	      CHAN-71 CHAN-73 CHAN-74 CHAN-91 CHAN-102 CHAN-106 $

C there should be an allocation error if the unit wants to use UDB channels. $
        END, 'ID Word Configuration' $

	DEFINE, '32-BIT Configuration', DIGITAL CONFIGURATION$

  	DEFINE, 'DWORD_INPUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,
              LEVEL-LOGIC-ONE  VOLTAGE 2.0V,
              LEVEL-LOGIC-ZERO VOLTAGE 0.8V,
           
           CNX HI   CHAN-00 CHAN-02 CHAN-04 CHAN-06
		    CHAN-08 CHAN-10 CHAN-12 CHAN-14
		    CHAN-16 CHAN-17 CHAN-18 CHAN-19
		    CHAN-20 CHAN-21 CHAN-22 CHAN-23
		    CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$


         DEFINE, 'DWORD_OUTPUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI  CHAN-01 CHAN-03 CHAN-05 CHAN-07
		    CHAN-09 CHAN-11 CHAN-13 CHAN-15
		    CHAN-40 CHAN-41 CHAN-42 CHAN-43
	            CHAN-44 CHAN-45 CHAN-46 CHAN-47
		    CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$

	END, '32-BIT Configuration' $
C $
C Placed the defines for the DME identification here. $ 
C $
 000900 DEFINE, 'ID_IDENT', DIGITAL CONFIGURATION $
        DEFINE, 'ID-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0 V,
            VOLTAGE-ZERO 0.8 V,
            VOLTAGE-QUIES 5.0 V,
            CURRENT-ONE MAX -0.010 A,
            CURRENT-ZERO MAX 0.010 A,
            CNX HI ID_IDENT1 ID_IDENT0 $
        END, 'ID_IDENT' $

 000950 DEFINE, 'CABLETEST1', DIGITAL CONFIGURATION  $ 
C $
	 DEFINE, 'W1STIM', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE -0.5 V,
	   VOLTAGE-ZERO -0.7 V,
	   CURRENT-ONE MAX -1E-5 A,
	   CURRENT-ZERO MAX 1E-5 A,
	   VOLTAGE-QUIES -2.0V,
	   CNX HI
	  TP4  TP5  TP6  TP7  TP8  TP9  TP10 TP11  
	  TP12 TP13 TP14 TP15 TP16 TP17 TP18 TP19
	  TP21 TP22 TP23 TP24 TP25 TP26 TP27 TP28  
	  TP29 TP30 TP31 TP32 TP33 TP34 TP35 TP36
	  TP57 TP58 TP59 TP60 TP61 TP62 TP63 TP64  
	  TP65 TP66 TP67 TP68 TP69 TP70 TP71 TP72
	  TP85 TP91 TP98 TP99 EZHOOK1 $
C $
        END, 'CABLETEST1'  $
C 10/11/06 part of pcr 100 (CLEARED 10/24/06 ) COMMENTED OUT FOR THAT REASON. $

 000960 DEFINE, 'DIG-RESP', DIGITAL CONFIGURATION  $ 
C $
          DEFINE, '60102', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI 
          P1-89  P1-47D P1-94  P1-92  P1-9   P1-97   P1-18  P1-20
          P1-56  P1-17  P1-57  P1-19  P1-66D P1-25   P1-70  P1-112
          P1-29D P1-36  P1-78  P1-80D P1-83D P1-85   P1-88  P1-90
          P1-96  P1-55D P1-100 P1-53  P1-108 P1-109D P1-69  P1-110D $
C $
C          DEFINE, '60103', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI P111-77D P111-117 P111-120 P111-101 P111-127 P111-122 P111-105 P111-99
	    P111-98D P111-104 P111-111 P111-114 P111-116 P111-119 P111-123 P111-125 $
C $
          DEFINE, '60104', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI P111-128 P111-42 P111-126 P111-53 P111-52 P111-66D P111-28 $
C $
          DEFINE, '62003', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI
        	  P1-29D P1-36  P1-78  P1-80D P1-83D P1-85   P1-88  P1-90
         	  P1-96  P1-55D P1-100 P1-53  P1-108 P1-109D P1-69  P1-110D $
C $
        END, 'DIG-RESP'  $ 
C $
 000961 DEFINE, 'DIG-RESPA', DIGITAL CONFIGURATION  $ 
C $
          DEFINE, '62003A', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 2.4 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI
        	  P1-29D P1-36  P1-78  P1-80D P1-83D P1-85   P1-88  P1-90
         	  P1-96  P1-55D P1-100 P1-53  P1-108 P1-109D P1-69  P1-110D $
C $
        END, 'DIG-RESPA'  $ 
C $
C Placed pcr 98 defines here $
C $
 000970 DEFINE, 'J2TEST1', DIGITAL CONFIGURATION  $ 
C $
	 DEFINE, 'J2STIM', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE -0.5 V,
	   VOLTAGE-ZERO -0.7 V,
	   CURRENT-ONE -1E-5 A,
	   CURRENT-ZERO 1E-5 A,
	   VOLTAGE-QUIES -2.0V,
	   CNX HI
	  J2_C94 J2_C93 J2_C92 J2_C91 J2_C66 J2_C65 J2_C64 J2_C63 $

C 	   CURRENT-ONE MAX -1E-5 A,
	   CURRENT-ZERO MAX 1E-5 A,
$
        END, 'J2TEST1'  $
C 10/14/06 pcr 99 defines here $

 000980 DEFINE, 'DIGITAL STIM', SIGNAL, LOGIC DATA,
	  VALUE (),
	  VOLTAGE-ONE 5.0 V,
	  VOLTAGE-ZERO 0.0 V,
	  CNX HI () $

 000985 DEFINE, 'DIGITAL BYTE RESP', SIGNAL, (VALUE INTO 'BYTE-DATA'),
	  LOGIC DATA,
	  VOLTAGE-ONE 3.5 V,
	  VOLTAGE-ZERO 0.5 V,
          CNX HI ()  $
C $
 000987 DEFINE, 'J1DIGITAL', DIGITAL CONFIGURATION  $ 
          DEFINE, 'RESPJ1-5', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 4.5 V,
            VOLTAGE-ZERO 0.8 V, 
	      CNX HI 
		     CHAN-31 CHAN-30 CHAN-29 CHAN-28
		     CHAN-27 CHAN-26 CHAN-25 CHAN-24
		     CHAN-23 CHAN-22 CHAN-21 CHAN-20
		     CHAN-19 CHAN-18 CHAN-17 CHAN-16
		     CHAN-14 CHAN-12 CHAN-10 CHAN-08
		     CHAN-06 CHAN-04 CHAN-02 CHAN-00 $
C         CNX HI
	    P1-B62 P1-A03 P1-A20 P1-A39
	    P1-A60 P1-A62 P1-A65 P1-A59
	    P1-B03 P1-B20 P1-B65 P1-B59
	    P1-C39 P1-C03 P1-C20 P1-C62
	    P1-C65 P1-C59 P1-D14 P1-D03
	    P1-D20 P1-D08 P1-D62 P1-D65 $
C $
        END, 'J1DIGITAL'  $
C $
         DEFINE, '111', DIGITAL CONFIGURATION $

         DEFINE, '111-OUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0 V,
            VOLTAGE-ZERO 0.2 V,           
            CNX HI CHAN-00 CHAN-01 CHAN-02 CHAN-03
		   CHAN-04 CHAN-05 CHAN-06 CHAN-07
		   CHAN-08 CHAN-09 CHAN-10 CHAN-11
		   CHAN-12 CHAN-13 CHAN-14 CHAN-15
		   CHAN-16 CHAN-17 CHAN-18 CHAN-19
		   CHAN-20 CHAN-21 CHAN-22 CHAN-23
		   CHAN-24 CHAN-25 CHAN-26 CHAN-27
		   CHAN-28 CHAN-29 CHAN-30 CHAN-31
		   CHAN-32 CHAN-33 CHAN-34 CHAN-35
		   CHAN-36 CHAN-37 CHAN-38 $
        END, '111' $
C $
C 11/15/06 FOR PCR 126 $
C $
         DEFINE, '201', DIGITAL CONFIGURATION  $
         DEFINE, '201-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  3.0V,
            VOLTAGE-ZERO 2.0V,
            CNX HI CHAN-157 CHAN-156 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 
                   CHAN-145 CHAN-144 CHAN-143 CHAN-142 CHAN-141 CHAN-140 CHAN-139
                   CHAN-138 CHAN-102 CHAN-100 CHAN-96  CHAN-95  CHAN-94  CHAN-93
                   CHAN-92  CHAN-91  CHAN-90  CHAN-89  CHAN-88  CHAN-87  CHAN-86
                   CHAN-85  CHAN-84  CHAN-50  CHAN-43  CHAN-42  CHAN-41  CHAN-40
                   CHAN-39  CHAN-38  CHAN-37  CHAN-36  CHAN-35  CHAN-34  CHAN-33 
             CHAN-32 $
        END, '201' $
C $
C 11/15/06 pcr 125  $
C $
        DEFINE, 'BUSTEST1', DIGITAL CONFIGURATION  $ 
	 DEFINE, 'RESPONSE1', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE 2.4 V,
	   VOLTAGE-ZERO 0.8 V,
	   CURRENT-ONE MAX -1E-3 A,
	   CURRENT-ZERO MAX 1E-3 A,
	   VOLTAGE-QUIES 5.0V,
	   CNX HI
	   CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $

        END, 'BUSTEST1'  $ 
C $
       DEFINE, 'BUSTEST2', DIGITAL CONFIGURATION  $ 
C $
	 DEFINE, 'RESPONSE2', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE 2.4 V,
	   VOLTAGE-ZERO 0.8 V,
	   CURRENT-ONE MAX -5E-3 A,
	   CURRENT-ZERO MAX 5E-3 A,
	   VOLTAGE-QUIES 0.0V,
	   CNX HI
	   CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $
         END, 'BUSTEST2'  $ 
C $      
       DEFINE, 'BUSTEST3', DIGITAL CONFIGURATION  $ 
C $
	 DEFINE, 'RESPONSE3', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE 2.4 V,
	   VOLTAGE-ZERO 0.8 V,
	   CURRENT-ONE MAX -1E-3 A,
	   CURRENT-ZERO MAX 1E-3 A,
	   VOLTAGE-QUIES 5.0V,
	   CNX HI
	  TP21 TP22 TP23 TP24 TP25 TP26 TP27 TP28  
	  TP29 TP30 TP31 TP32 TP33 TP34 TP35 TP36 $
C $
        END, 'BUSTEST3'  $ 
C $
       DEFINE, 'BUSTEST4', DIGITAL CONFIGURATION  $ 
C $
	 DEFINE, 'RESPONSE4', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	   TYPE PARALLEL,
	   VOLTAGE-ONE 2.4 V,
	   VOLTAGE-ZERO 0.8 V,
	   CURRENT-ONE MAX -5E-3 A,
	   CURRENT-ZERO MAX 5E-3 A,
	   VOLTAGE-QUIES 0.0V,
	   CNX HI
	  TP21 TP22 TP23 TP24 TP25 TP26 TP27 TP28  
	  TP29 TP30 TP31 TP32 TP33 TP34 TP35 TP36 $
C $
         END, 'BUSTEST4'  $ 
C $
C 11/15/06 pcr 134 $
        DEFINE, 'DIGITAL STIM 134', SIGNAL, LOGIC DATA,
        	VALUE (),
		VOLTAGE-ONE 4.5 V,
 	 	VOLTAGE-ZERO 0.3 V,
         	CNX HI ()  $

        DEFINE, 'DIGITAL BIT RESP', SIGNAL, (VALUE INTO 'BIT-DATA'),
	  	LOGIC DATA,
		VOLTAGE-ONE 3.5 V,
		VOLTAGE-ZERO 0.5 V,
        	CNX HI ()  $

       DEFINE, 'DTS MEASURE',SIGNAL,
		(VALUE INTO 'BYTE-DATA'),
		 LOGIC DATA, VOLTAGE-ONE 2.0 V, VOLTAGE-ZERO 0.8 V,
	  	 CNX HI () $
C $
C 11/17/06 - pcr 136   11/14/06 - pcr 128 $

       DEFINE, 'ID-TEST', DIGITAL CONFIGURATION  $
          DEFINE, 'CON_PINS', DIGITAL SOURCE, LOGIC DATA,
           VOLTAGE-ONE 4.8 V,      VOLTAGE-ZERO 0.05V,
           CNX HI CHAN-31 CHAN-33 $

	  DEFINE, 'SENSE-PINS', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0 V,     VOLTAGE-ZERO 0.5 V,
            CNX HI CHAN-18 CHAN-27  $

	  DEFINE, 'ENABLE_PINS', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  4.8 V,     VOLTAGE-ZERO 0.05V,
            CNX HI CHAN-29  $

	  DEFINE, 'RESET_PIN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  4.8 V,     VOLTAGE-ZERO 0.05V,
            CNX HI CHAN-28  $

	  DEFINE, 'ID-PINS', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  2.0 V,     VOLTAGE-ZERO 0.5 V,
            VOLTAGE-QUIES 5.0 V,    CURRENT-ONE MAX .010 A,
            CURRENT-ZERO MAX .010 A,
            CNX HI CHAN-16 CHAN-17 $
         END, 'ID-TEST' $
C $
C 11/17/06 - pcr 135 $

        DEFINE, '200-135', DIGITAL CONFIGURATION $

          DEFINE, '201-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.0V,
            CNX HI CHAN-49 CHAN-53 CHAN-57 CHAN-59 CHAN-61
           CHAN-62 CHAN-63 CHAN-142 CHAN-172 CHAN-188 CHAN-33 CHAN-34 CHAN-37
           CHAN-28 CHAN-27 CHAN-29 CHAN-30 CHAN-31 CHAN-32 CHAN-35 CHAN-36 $
C $
          DEFINE, '201-OUT135', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-48 CHAN-13 CHAN-41 CHAN-43 CHAN-47
                 CHAN-50 CHAN-51 CHAN-01 CHAN-02 CHAN-20 CHAN-165 CHAN-166 CHAN-184
                 CHAN-133 CHAN-141 CHAN-138 CHAN-176 CHAN-178 CHAN-180 CHAN-189 CHAN-139 $

        END, '200-135' $
C $
        DEFINE, '222', DIGITAL CONFIGURATION $
          DEFINE, '222-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.0V,
            CNX HI CHAN-10 CHAN-09 CHAN-08 CHAN-07 CHAN-06 
                   CHAN-05 CHAN-04 CHAN-03 CHAN-02 CHAN-01 CHAN-00  $
C $
          DEFINE, '222-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-26  CHAN-25 CHAN-24 CHAN-23 CHAN-22
		   CHAN-21  CHAN-20 CHAN-19 CHAN-18 CHAN-17 CHAN-16   $
        END, '222' $
C $

C 11/26/06 - pcr#139, 140 , 141 define statements $

 000988  DEFINE, 'MOD5_DIG', DIGITAL CONFIGURATION  $
C $
          DEFINE, 'GCRU_IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
          CNX HI CHAN-140 CHAN-139 CHAN-136 CHAN-134 CHAN-132 CHAN-130
	         CHAN-128 CHAN-138 CHAN-135 CHAN-126 CHAN-124 CHAN-137
	         CHAN-127 CHAN-125 CHAN-123 CHAN-121 $

C $
          DEFINE, 'GCRU_OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
          CNX HI CHAN-140 CHAN-139 CHAN-136 CHAN-134 CHAN-132 CHAN-130
	         CHAN-128 CHAN-138 CHAN-135 CHAN-126 CHAN-124 CHAN-137
	         CHAN-127 CHAN-125 CHAN-123 CHAN-121 $

C $
          DEFINE, 'VCRU_OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
          CNX HI CHAN-63 CHAN-62 CHAN-61 CHAN-60 CHAN-59 CHAN-58 CHAN-57 CHAN-56
		 CHAN-55 CHAN-54 CHAN-53 CHAN-52 CHAN-51 CHAN-50 CHAN-49 CHAN-48 $
C $
          DEFINE, 'VCRU_IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
          CNX HI CHAN-63 CHAN-62 CHAN-61 CHAN-60 CHAN-59 CHAN-58 CHAN-57 CHAN-56
		 CHAN-55 CHAN-54 CHAN-53 CHAN-52 CHAN-51 CHAN-50 CHAN-49 CHAN-48 $

         DEFINE, 'CCA_IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
          CNX HI CHAN-01 CHAN-02 $

C $
	  DEFINE, 'BITE5', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
            CNX HI CHAN-23 $
C $
	  DEFINE, 'BITE_POW', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
            CNX HI CHAN-22 $
C $
	  DEFINE, 'BATT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
            CNX HI CHAN-02 $
C $
        END, 'MOD5_DIG' $
C $
C 12/12/06  pcr 145 $
      DEFINE, '400', DIGITAL CONFIGURATION $
          DEFINE, '400-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-00 CHAN-01 CHAN-02 CHAN-03
		   CHAN-04 CHAN-05 CHAN-06 CHAN-07
		   CHAN-08 CHAN-09 CHAN-10 CHAN-11
		   CHAN-12 CHAN-13 CHAN-14 CHAN-15
		   CHAN-16 CHAN-17 CHAN-18 CHAN-19
		   CHAN-20 CHAN-21 CHAN-22 CHAN-23
		   CHAN-24 CHAN-25 CHAN-26 CHAN-27
		   CHAN-28 CHAN-29 CHAN-30 CHAN-31
		   CHAN-32 CHAN-33 CHAN-34 CHAN-35
		   CHAN-36 CHAN-37 CHAN-38 CHAN-39
		   CHAN-40 CHAN-41 CHAN-42 CHAN-43
		   CHAN-44 CHAN-45 CHAN-46 CHAN-47
		   CHAN-48 CHAN-49 CHAN-50 CHAN-51
		   CHAN-52 CHAN-53 CHAN-54 CHAN-55
		   CHAN-56 CHAN-57 CHAN-58  $

        END, '400' $
C $
C 12/18/06 - defines for pcr 164 $

 000989 DEFINE, '701', DIGITAL CONFIGURATION $
          DEFINE, '701T-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-72  CHAN-53  CHAN-124 CHAN-117
                   CHAN-138 CHAN-139 CHAN-23  CHAN-84  CHAN-85 CHAN-32 CHAN-33 CHAN-21 $
C $
          DEFINE, '701E-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  -0.8V,
            VOLTAGE-ZERO -2.0V,
            VOLTAGE-QUIES 0.0 V,
            CURRENT-ONE MAX .005 A,
            CURRENT-ZERO MAX .005 A,
            CNX HI CHAN-114  CHAN-63 CHAN-115 CHAN-11 $
        END, '701' $
C 12/22/06 pcr 165 $
        DEFINE, 'PULL-UP1', DIGITAL CONFIGURATION  $ 
          DEFINE, 'RESPONSE165', DIGITAL SENSOR, (VALUE), LOGIC DATA,
             TYPE PARALLEL,
             VOLTAGE-ONE 4.0 V,
             VOLTAGE-ZERO 3.9 V,
             CNX HI
           CHAN-02 CHAN-11 CHAN-32 CHAN-54 CHAN-73 CHAN-118  $

          DEFINE, 'VCRU_IN1', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 4.2 V,
            VOLTAGE-ZERO 0.8 V,
          CNX HI CHAN-63 CHAN-62 CHAN-61 CHAN-60 CHAN-59 CHAN-58 $

          END, 'PULL-UP1'  $ 
C $
C 01/02/07 - pcr 168 variation of pcr 51 $
       DEFINE, 'J2DIGNOLOAD', DIGITAL CONFIGURATION  $ 
          DEFINE, 'RESPJ2-4', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 4.5 V,
            VOLTAGE-ZERO 0.8 V, 
            CNX HI CHAN-188 CHAN-189 CHAN-190 CHAN-191 $
          DEFINE, 'RESPJ2-6', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 4.5 V,
            VOLTAGE-ZERO 0.8 V, 
            CNX HI CHAN-187 CHAN-186 CHAN-185 CHAN-184 CHAN-183 CHAN-182 $
          DEFINE, 'RESPJ2-8', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 4.5 V,
            VOLTAGE-ZERO 0.8 V, 
            CNX HI CHAN-181 CHAN-180 CHAN-179 CHAN-178
		   CHAN-177 CHAN-176 CHAN-175 CHAN-174 CHAN-173 $
          DEFINE, 'RESPJ2-9', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            TYPE PARALLEL,
            VOLTAGE-ONE 4.5 V,
            VOLTAGE-ZERO 0.8 V,
            CNX HI CHAN-172 $
        END, 'J2DIGNOLOAD' $
C 1/4/07 enhanced pcr 183 44 channels static sense  $
        DEFINE, '201-183', DIGITAL CONFIGURATION $
          DEFINE, '201-OUT-183', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  3.0V,
            VOLTAGE-ZERO 2.0V,
            CNX HI CHAN-43 CHAN-42 CHAN-41 CHAN-40
                   CHAN-39 CHAN-38 CHAN-37 CHAN-36 CHAN-35 CHAN-34 CHAN-33 CHAN-32
                   CHAN-31 CHAN-30 CHAN-29 CHAN-28 CHAN-27 CHAN-26 CHAN-25 CHAN-24
                   CHAN-23 CHAN-22 CHAN-21 CHAN-20 CHAN-19 CHAN-18 CHAN-17 CHAN-16
                   CHAN-15 CHAN-14 CHAN-13 CHAN-12 CHAN-11 CHAN-10 CHAN-09 CHAN-08
                   CHAN-07 CHAN-06 CHAN-05 CHAN-04 CHAN-03 CHAN-02 CHAN-01 CHAN-00 $
        END, '201-183' $
C 1/4/07 ENCHANCED PCR 183 FOR 48 CHANNELS WITH 49 PATTERN SETS $ 
        DEFINE, '600', DIGITAL CONFIGURATION $
          DEFINE, '601-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,           
            CNX HI CHAN-91 CHAN-90 CHAN-89 CHAN-88 CHAN-87 CHAN-86 CHAN-85 CHAN-84
                   CHAN-83 CHAN-82 CHAN-81 CHAN-80 CHAN-79 CHAN-78 CHAN-77 CHAN-76
                   CHAN-75 CHAN-74 CHAN-73 CHAN-72 CHAN-71 CHAN-70 CHAN-69 CHAN-68
                   CHAN-67 CHAN-66 CHAN-65 CHAN-64 CHAN-63 CHAN-62 CHAN-61 CHAN-60
                   CHAN-59 CHAN-58 CHAN-57 CHAN-56 CHAN-55 CHAN-54 CHAN-53 CHAN-52
                   CHAN-51 CHAN-50 CHAN-49 CHAN-48 CHAN-47 CHAN-46 CHAN-45 CHAN-44 $
C $
          DEFINE, '601-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-191 CHAN-190 CHAN-189 CHAN-188 CHAN-187 CHAN-186 CHAN-185 CHAN-184
                   CHAN-183 CHAN-182 CHAN-181 CHAN-180 CHAN-179 CHAN-178 CHAN-177 CHAN-176
                   CHAN-175 CHAN-174 CHAN-173 CHAN-172 CHAN-171 CHAN-170 CHAN-169 CHAN-168
                   CHAN-167 CHAN-166 CHAN-165 CHAN-164 CHAN-163 CHAN-162 CHAN-161 CHAN-160
                   CHAN-159 CHAN-158 CHAN-157 CHAN-156 CHAN-155 CHAN-154 CHAN-153 CHAN-152
                   CHAN-151 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 CHAN-145 CHAN-144 $
C $
          DEFINE, '649-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-00 $
        END, '600' $
C $
C 1/21/07 - PCR 193 DEFINES FOR LEVELS $
        DEFINE, '901', DIGITAL CONFIGURATION $
          DEFINE, '901-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,           
            CNX HI CHAN-167 CHAN-168 CHAN-169 CHAN-170 CHAN-114 CHAN-118 CHAN-25 CHAN-24
                   CHAN-77 CHAN-88 CHAN-111 CHAN-151 $
C $
          DEFINE, '910-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  -0.2V,
            VOLTAGE-ZERO -2.0V,           
            CNX HI CHAN-100 $
C $
          DEFINE, '901-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-118 CHAN-167 CHAN-77 CHAN-151 $
C $
          DEFINE, '907-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  0.8V,
            VOLTAGE-ZERO 0.5V,
            CNX HI CHAN-168 $
C $
          DEFINE, '911-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-109 CHAN-116 CHAN-114 CHAN-95 CHAN-100 $
        END, '901' $
C $
C 1/31/07 - pcr 201 202 level sets not being defined. $
C $
        DEFINE, '148', DIGITAL CONFIGURATION $
          DEFINE, '148-OUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0 V,
            VOLTAGE-ZERO 0.2 V,           
            CNX HI CHAN-190 CHAN-178 CHAN-177 $
C $
          DEFINE, '148E-OUT', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  -0.8V,
            VOLTAGE-ZERO -2.0V,
            CNX HI CHAN-142 CHAN-128 $
        END, '148' $
C $
        DEFINE, '238', DIGITAL CONFIGURATION $
         DEFINE, '238-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.0V,
            CNX HI CHAN-23 $
        END, '238' $
C $
        DEFINE, '233', DIGITAL CONFIGURATION $
          DEFINE, '233-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.0V,
            CNX HI CHAN-172 CHAN-177 CHAN-179 CHAN-188  $
C $
          DEFINE, '233-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-171 CHAN-143 CHAN-133 CHAN-173 $
        END, '233' $
C $
C 2/7/07 pcr 200 $
C $
        DEFINE, 'J1T1CONFIG', DIGITAL CONFIGURATION  $ 
	  DEFINE, 'J1TEST1', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	    TYPE PARALLEL,
	    VOLTAGE-ONE 2.4 V,
	    VOLTAGE-ZERO 0.8 V,
	    CURRENT-ONE MAX -1E-3 A,
	    CURRENT-ZERO MAX 1E-3 A,
	    VOLTAGE-QUIES 5.0V,
	    CNX HI
	CHAN-167 CHAN-166 CHAN-165 CHAN-164 CHAN-163 CHAN-162 CHAN-161 CHAN-160
	CHAN-159 CHAN-158 CHAN-157 CHAN-156 CHAN-155 CHAN-154 CHAN-153 CHAN-152  
	CHAN-151 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 CHAN-145 CHAN-144
	CHAN-128 CHAN-129 CHAN-130 CHAN-131 CHAN-132 CHAN-133 CHAN-134 CHAN-135
	CHAN-136 CHAN-137 CHAN-138 CHAN-139 CHAN-140 CHAN-141 CHAN-142 CHAN-143
	CHAN-191 CHAN-190 CHAN-189 CHAN-188 CHAN-187 CHAN-186 CHAN-185 CHAN-184
	CHAN-183 CHAN-182 CHAN-181 CHAN-180 CHAN-179 CHAN-178 CHAN-177 CHAN-176
	CHAN-175 CHAN-174 CHAN-173 CHAN-172 CHAN-171 CHAN-170 CHAN-169 CHAN-168 
	CHAN-127 CHAN-126 CHAN-125 CHAN-124 CHAN-123 CHAN-122 CHAN-121 CHAN-120
	CHAN-119 CHAN-118 CHAN-117 CHAN-116 CHAN-115 CHAN-114 CHAN-113 CHAN-112 
	CHAN-111 CHAN-110 CHAN-109 CHAN-108 CHAN-107 CHAN-106 CHAN-105 CHAN-104 
	CHAN-103 CHAN-102 CHAN-101 CHAN-100 CHAN-99  CHAN-98  CHAN-97  CHAN-96 
	CHAN-95  CHAN-94  CHAN-93  CHAN-92  CHAN-91  CHAN-90  CHAN-89  CHAN-88 
	CHAN-87  CHAN-86  CHAN-85  CHAN-84  CHAN-83  CHAN-82  CHAN-81  CHAN-80 
	CHAN-64  CHAN-65  CHAN-66  CHAN-67  CHAN-68  CHAN-69  CHAN-70  CHAN-71 
	CHAN-72  CHAN-73  CHAN-74  CHAN-75  CHAN-76  CHAN-77  CHAN-78  CHAN-79 
	CHAN-63  CHAN-62  CHAN-61  CHAN-60  CHAN-59  CHAN-58  CHAN-57  CHAN-56 
	CHAN-55  CHAN-54  CHAN-53  CHAN-52  CHAN-51  CHAN-50  CHAN-49  CHAN-48 
	CHAN-47  CHAN-46  CHAN-45  CHAN-44  CHAN-43  CHAN-42  CHAN-41  CHAN-40  $
	END, 'J1T1CONFIG'  $ 
C	    CURRENT-ONE MAX -1E-3 A,
	    CURRENT-ZERO MAX 1E-3 A,
	    VOLTAGE-QUIES 5.0V,
 $
        DEFINE, 'J2T1CONFIG', DIGITAL CONFIGURATION  $ 
	  DEFINE, 'DJ2TEST1', DIGITAL SENSOR, (VALUE), LOGIC DATA,
	    TYPE PARALLEL,
	    VOLTAGE-ONE 2.4 V,
	    VOLTAGE-ZERO 0.8 V,
	    CURRENT-ONE MAX -1E-3 A,
	    CURRENT-ZERO MAX 1E-3 A,
	    VOLTAGE-QUIES 5.0V,
	    CNX HI
	CHAN-167 CHAN-166 CHAN-165 CHAN-164 CHAN-163 CHAN-162 CHAN-161 CHAN-160
	CHAN-159 CHAN-158 CHAN-157 CHAN-156 CHAN-155 CHAN-154 CHAN-153 CHAN-152 
	CHAN-151 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 CHAN-145 CHAN-144
	CHAN-143 CHAN-142 CHAN-141 CHAN-140 CHAN-139 CHAN-138 CHAN-137 CHAN-136
	CHAN-135 CHAN-134 CHAN-133 CHAN-132 CHAN-131 CHAN-130 CHAN-129 CHAN-128
	CHAN-127 CHAN-126 CHAN-125 CHAN-124 CHAN-123 CHAN-122 CHAN-121 CHAN-120 
	CHAN-119 CHAN-118 CHAN-117 CHAN-116 CHAN-115 CHAN-114 CHAN-113 CHAN-112
	CHAN-111 CHAN-110 CHAN-109 CHAN-108 CHAN-107 CHAN-106 CHAN-105 CHAN-104 
	CHAN-103 CHAN-102 CHAN-101 CHAN-100 CHAN-99  CHAN-98  CHAN-97  CHAN-96 
	CHAN-95  CHAN-94  CHAN-93  CHAN-92  CHAN-91  CHAN-90  CHAN-89  CHAN-88 
	CHAN-87  CHAN-86  CHAN-85  CHAN-84  CHAN-83  CHAN-82  CHAN-81  CHAN-80 
	CHAN-79  CHAN-78  CHAN-77  CHAN-76  CHAN-75  CHAN-74  CHAN-73  CHAN-72 
	CHAN-71  CHAN-70  CHAN-69  CHAN-68  CHAN-67  CHAN-66  CHAN-65  CHAN-64 
	CHAN-63  CHAN-62  CHAN-61  CHAN-60  CHAN-59  CHAN-58  CHAN-57  CHAN-56 
	CHAN-55  CHAN-54  CHAN-53  CHAN-52  CHAN-51  CHAN-50  CHAN-49  CHAN-48 
	CHAN-47  CHAN-46  CHAN-45  CHAN-44  CHAN-43  CHAN-42  CHAN-41  CHAN-40 
	CHAN-39  CHAN-38  CHAN-37  CHAN-36  CHAN-35  CHAN-34  CHAN-33  CHAN-32 
	CHAN-31  CHAN-30  CHAN-29  CHAN-28  CHAN-27  CHAN-26  CHAN-25  CHAN-24 
	CHAN-23  CHAN-22  CHAN-21  CHAN-20  CHAN-19  CHAN-18  CHAN-17  CHAN-16 
	CHAN-15  CHAN-14  CHAN-13  CHAN-12  CHAN-11 $

	END, 'J2T1CONFIG'  $ 
C $
C pcr 193 secind half$
        DEFINE, '460', DIGITAL CONFIGURATION $
          DEFINE, '460-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  -0.8V,
            VOLTAGE-ZERO -2.0V,
            VOLTAGE-QUIES 0.0 V,
            CURRENT-ONE MAX .005 A,
            CURRENT-ZERO MAX .005 A,
            CNX HI CHAN-72 CHAN-80 CHAN-125 CHAN-115 CHAN-97 CHAN-81 CHAN-83 $
        END, '460' $
C $
C  3/7/07 pcr 207 $
        DEFINE, 'MOD67_DIG', DIGITAL CONFIGURATION  $
C $
	   DEFINE, 'GCRU_CONTROL', DIGITAL SOURCE, LOGIC DATA,
	     VOLTAGE-ONE 5.0 V,
	     VOLTAGE-ZERO 0.0 V,
	     CNX HI CHAN-88 CHAN-86 CHAN-80 CHAN-61 CHAN-49 CHAN-75 CHAN-73 CHAN-84
	            CHAN-85 CHAN-48 CHAN-59 CHAN-82 CHAN-77 CHAN-78 CHAN-79 CHAN-80 $
C $
          DEFINE, 'VCRU_CONTROL', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
          CNX HI CHAN-128 CHAN-127 CHAN-111 CHAN-123 CHAN-116 CHAN-117
	         CHAN-98 CHAN-107 CHAN-106 CHAN-95 CHAN-105 CHAN-96
	         CHAN-110 CHAN-99 $
C $
          DEFINE, 'TE_OUTPUTS', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
          CNX HI CHAN-02 CHAN-08 CHAN-74 CHAN-122 $
C $
          DEFINE, 'MGS_IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
            CNX HI CHAN-04 CHAN-01 CHAN-03 CHAN-83 CHAN-115 $

	  DEFINE, 'TP1_16', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE 2.5 V,
            VOLTAGE-ZERO 1.0 V,
            CNX HI CHAN-103 CHAN-06 CHAN-26 CHAN-05 CHAN-16 CHAN-04 CHAN-101 CHAN-13
	           CHAN-125 CHAN-11 CHAN-14 CHAN-108 CHAN-25 CHAN-12 CHAN-23 CHAN-114 $
         END, 'MOD67_DIG' $
C $
       DEFINE, '307', DIGITAL CONFIGURATION $
          DEFINE, '307-IN', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.2V,           
            CNX HI CHAN-04 CHAN-06 CHAN-23 CHAN-18 CHAN-24 CHAN-19 $
C $
          DEFINE, '307-OUT', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-15 CHAN-64 CHAN-58 CHAN-66 CHAN-67 CHAN-79 $
        END, '307' $
C $
C  3/19/07 pcr 207 $
        DEFINE, '900', DIGITAL CONFIGURATION $
          DEFINE, '901-INA', DIGITAL SOURCE, LOGIC DATA,
            VOLTAGE-ONE  5.0V,
            VOLTAGE-ZERO 0.0V,
            CNX HI CHAN-155 CHAN-159 CHAN-154 $
C $
          DEFINE,'901-OUTA', DIGITAL SENSOR, (VALUE), LOGIC DATA,
            VOLTAGE-ONE  4.0V,
            VOLTAGE-ZERO 0.8V,
            CNX HI CHAN-156 CHAN-160 $
        END, '900' $
C $
C $
C *******************************************************************
C * DEFINE PROCEDURE STATEMENTS
C ******************************************************************* $
C $
C	NOTE - 'MEASUREMENT' IS A SYSTEM VARIABLE $
B $
 000990 DEFINE, 'RESULTS', PROCEDURE $
        DECLARE, VARIABLE, 'PassFail' IS STRING (1) OF CHAR $
        DECLARE, VARIABLE, 'GoNogo' IS STRING (5) OF CHAR $
        DECLARE, VARIABLE, 'NESTED' IS BOOLEAN $

        IF, GO, THEN $
           CALCULATE, 'PassFail'= C'P' $
	   CALCULATE, 'GoNogo' = C'GO  ' $
         ELSE  $
	   CALCULATE, 'PassFail' = C'F' $
	   CALCULATE, 'GoNogo' = C'NOGO' $
           CALCULATE, 'FAIL-FLAG' = 'FAIL-FLAG' + 1 $
         END, IF $

         CALCULATE, 'NESTED' = FALSE $

         IF, 'VER-UL' EQ 0, THEN $

             IF, 'VER-LL' EQ 0, THEN $

                 CALCULATE, 'NESTED' = TRUE $

             END, IF $

         END, IF $

        IF, 'NESTED', THEN $		

              OUTPUT, 
		C'TEST        UPPER LIMIT         MEAS VALUE          LOWER LIMIT          RESULT'   $

              OUTPUT, 
		C'----        ------------        ------------        ------------         ------' $ 

              OUTPUT, 
		'TESTNO', C'     ','GO', C'              ','GoNogo', C'              ',NOGO, C'              ','PassFail', C'\LF\\LF\'$ 

        
              OUTPUT, TO 'PRINTER', 
		C'TEST        UPPER LIMIT         MEAS VALUE          LOWER LIMIT          RESULT'   $

              OUTPUT, TO 'PRINTER',
		C'----        ------------        ------------        ------------         ------' $ 

              OUTPUT, TO 'PRINTER',
		'TESTNO', C'     ','GO', C'              ','GoNogo', C'              ',NOGO, C'              ','PassFail', C'\LF\\LF\'$ 

  
          ELSE $

              OUTPUT, 
		C'TEST         UPPER LIMIT               MEAS VALUE              LOWER LIMIT              RESULT\LF\'   $

              OUTPUT, 
		C'----        ------------               ------------            ------------             ------\LF\'   $ 

              OUTPUT, 
	       'TESTNO',C'  ','VER-UL',C'    ','MEASUREMENT',C'   ','VER-LL',C'   ',C'      ', 'PassFail', C'\LF\'$

              OUTPUT, TO 'PRINTER', 
		C'TEST         UPPER LIMIT               MEAS VALUE              LOWER LIMIT              RESULT\LF\'   $

              OUTPUT, TO 'PRINTER',
		C'----        ------------               ------------            ------------             ------\LF\'   $ 

              OUTPUT, TO 'PRINTER',
	       'TESTNO',C'  ','VER-UL',C'    ','MEASUREMENT',C'   ','VER-LL',C'   ',C'      ', 'PassFail', C'\LF\'$
 

         END, IF $


        END, 'RESULTS' $


C ******************************************************************* $
C $
C *******************************************************************
C * TEST START ADDRESS
C ******************************************************************* $
C $
B $ 
E000999	CALCULATE, 'ONCEDONE' = TRUE $
C $
B $
 001000 OUTPUT, C'\LF\\LF\\LF\',
          C'Dwg ATLAS Driver Benchmark\LF\',
          C'Date/Time:','DATE-TIME',C'\LF\' $
        OUTPUT, TO 'PRINTER', 
          C'Dwg ATLAS Driver Benchmark\LF\',
          C'Date/Time:','DATE-TIME',C'\LF\' $
C 10/20/06 $
C SKIP THE PCR TESTS IF THEY'VE BEEN RUN. $
C $
	IF, 'ONCEDONE', THEN $
	GO TO, STEP 001050 $
	END, IF $
C $	
C added test here 10/1/06 for UDB readback PCR 88 $
C $
 001010	OUTPUT, C'pcr 88 \LF\ SETUP VOLTAGES ON UDB CHANNELS 0,1,2. \LF\ THEN  GO-NOGO \LF\' $
    	INPUT, GO-NOGO $
 	MEASURE, (VALUE INTO 'SURVEYHVPINS'), LOGIC DATA,
	  VOLTAGE-ONE 2.3 V, VOLTAGE-ZERO 0.8 V,
	  CNX HI  
	  J3_B20HV J3_B21HV J3_B22HV $

   	OUTPUT, C'pcr 88 \LF\ STOPPED TO SEE VOLTAGE ON J3-B20, B21, B22.' $
    	OUTPUT, C'SHOULD BE APPROX. 3 VOLTS.','SURVEYHVPINS',C'what was read \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
C added test here 10/2/06 for UDB stim pcr 86 (CLEARED 10/2/06) $
C         SETUP ID PROG DELAY CKT (PDC) TO PASS WG_CLK INPUT THRU TO
C	  DTS EXT CLK IN (R8 OUTPUT OF PDC) $
C $
 001015 APPLY, LOGIC DATA,
            VALUE B'0000000010', 
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
          	ID-UB9 ID-UB8 ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 
          	ID-UB1 ID-UB0  $
C $
	  OUTPUT,    C'pcr 86 \LF\ CHECK UDB OUTPUTS ON CHANNELS 9(MSB) THRU 0. \LF\  BIT PATTERN 0b0000000010' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	  REMOVE, ALL $
          REMOVE, LOGIC DATA,
            CNX HI 
          	ID-UB9 ID-UB8 ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 
          	ID-UB1 ID-UB0  $
C $
C do it again with the bits flipped. $
          APPLY, LOGIC DATA,
            VALUE B'1111111101', 
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
          	ID-UB9 ID-UB8 ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 
          	ID-UB1 ID-UB0  $
C $
	  OUTPUT,    C'also part of pcr 86 with bits inverted \LF\ CHECK UDB OUTPUTS ON CHANNELS 9(MSB) THRU 0. \LF\ BIT PATTERN 0b1111111101\LF\' $
    	  INPUT, GO-NOGO $
          REMOVE, LOGIC DATA,
            CNX HI 
          	ID-UB9 ID-UB8 ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 
          	ID-UB1 ID-UB0  $
C Do it again wuth 32 to convince oneself the alignment is correct $
          APPLY, LOGIC DATA,
            VALUE B'11110000111100001111000011110000', 
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
	  CHAN-HV31 CHAN-HV30 CHAN-HV29 CHAN-HV28 CHAN-HV27 CHAN-HV26 CHAN-HV25 CHAN-HV24 
	  CHAN-HV23 CHAN-HV22 CHAN-HV21 CHAN-HV20 CHAN-HV19 CHAN-HV18 CHAN-HV17 CHAN-HV16 
	  CHAN-HV15 CHAN-HV14 CHAN-HV13 CHAN-HV12 CHAN-HV11 CHAN-HV10 CHAN-HV09 CHAN-HV08 
	  CHAN-HV07 CHAN-HV06 CHAN-HV05 CHAN-HV04 CHAN-HV03 CHAN-HV02 CHAN-HV01 CHAN-HV00 $
C $
	  OUTPUT,    C'CHECK UDB OUTPUTS ON CHANNELS 31(MSB) THRU 0 \LF\  expect 0b11110000111100001111000011110000 \LF\' $
    	  INPUT, GO-NOGO $
          REMOVE, LOGIC DATA,
            CNX HI 
	  CHAN-HV31 CHAN-HV30 CHAN-HV29 CHAN-HV28 CHAN-HV27 CHAN-HV26 CHAN-HV25 CHAN-HV24 
	  CHAN-HV23 CHAN-HV22 CHAN-HV21 CHAN-HV20 CHAN-HV19 CHAN-HV18 CHAN-HV17 CHAN-HV16 
	  CHAN-HV15 CHAN-HV14 CHAN-HV13 CHAN-HV12 CHAN-HV11 CHAN-HV10 CHAN-HV09 CHAN-HV08 
	  CHAN-HV07 CHAN-HV06 CHAN-HV05 CHAN-HV04 CHAN-HV03 CHAN-HV02 CHAN-HV01 CHAN-HV00 $
C Do just a byte $
          APPLY, LOGIC DATA,
            VALUE B'01011010', 
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
              ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 ID-UB1 ID-UB0  $
C $
	  OUTPUT,    C'CHECK UDB OUTPUTS ON CHANNELS 7(MSB) THRU 0 \LF\  expect 0b01011010 \LF\' $
    	  INPUT, GO-NOGO $
          REMOVE, LOGIC DATA,
            CNX HI 
          	ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 ID-UB1 ID-UB0  $
C $ 
C Placed pcr 98 check here (CLEARED 10/24/06 )$
C $
	  OUTPUT,    C'pcr 98 \LF\ NEEDS VOLTAGES ON CHANNELS 34 (MSB) THRU 41 \LF\ THEN GO-NOGO' $
	  INPUT, GO-NOGO $
          ENABLE, DIGITAL CONFIGURATION 'J2TEST1'  $
          ENABLE, TIMER 'TIMER 1' $
	  ENABLE, EVENT 'CLOCK1A' $
	  ENABLE, EVENT 'PROBE1' $
          ENABLE, EVENT 'PHASE RETURN 1' $
          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN 1',
            SENSE-EVENT 'PROBE1' $
            SENSE, (VALUE INTO 'J2TEST'), ON 'J2STIM' $
	  END, DO $
C $
	  DISABLE, TIMER 'TIMER 1' $
	  DISABLE, EVENT 'CLOCK1A' $
	  DISABLE, EVENT 'PROBE1' $
	  DISABLE, EVENT 'PHASE RETURN 1' $
	  DISABLE, EVENT 'PHASE ASSERT 1' $
	  DISABLE, DIGITAL CONFIGURATION 'J2TEST1'  $
C $
	  OUTPUT,    C'pcr 98 \LF\ CHECKING two channel nibbles','J2TEST',C' received expected 0xFF \LF\ ' $ 
    	  INPUT, GO-NOGO $
C $ 
C $
C Shoved pcr 57 the ID check routine from DME here $	
C $
C         *** INTERFACE IDENTIFICATION *** $
C $
	OUTPUT, C' pcr 57 \LF\ 5 VOLTS NEEDS TO BE APPLIED ON CHANNEL 44 \LF\ GND TO CHANNEL 45 \LF\ THEN GO-NOGO \LF\' $
        INPUT, GO-NOGO $

 001020 ENABLE, DIGITAL CONFIGURATION 'ID_IDENT' $
         SENSE, (VALUE INTO 'ID'), ON 'ID-OUT' $
        DISABLE, DIGITAL CONFIGURATION 'ID_IDENT' $
C $
C       --- DATA LOGGING ----------$
	OUTPUT, C' pcr 57 \LF\' $
        OUTPUT, C'CH172 STATE =','ID'(2),C' EXPECTED = 0 \LF\' $
        OUTPUT, C'CH173 STATE =','ID'(1),C' EXPECTED = 1 \LF\' $
        INPUT, GO-NOGO $
	REMOVE, ALL $
C $
C 10/11/06 for pcr 100 statement 60102  (CLEARED 10/24/06 ) COMMENTED OUT FOR DEBUGING OTHER PCRS. $
C $
          APPLY, LOGIC DATA, 
            VALUE X'FFFFFFFF',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
            CNX HI
            P1-2   P1-3   P1-4   P1-5   P1-6   P1-7   P1-10  P1-12 
	    P1-13  P1-14  P1-15  P1-16  P1-22D P1-24  P1-26  P1-27
	    P1-28  P1-34  P1-35  P1-37  P1-38  P1-41  P1-45  P1-46
	    P1-48  P1-49  P1-50  P1-51D P1-64  P1-65  P1-67  P1-68
            $
C
C         ASSURE DTS CHANNEL CONTINUITY BETWEEN THE ABOVE STIMULUS PINS
C	  AND THE BELOW MEASUREMENT PINS BY MEASURING LL1
C $
        WAIT FOR, .1 SEC $
C $
          ENABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
          ENABLE, TIMER 'TIMER 1' $
	  ENABLE, EVENT 'CLOCK1A' $
	  ENABLE, EVENT 'PROBE1' $
          ENABLE, EVENT 'PHASE RETURN 1' $
          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
          DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 1',
          SENSE-EVENT 'PROBE1' $
C $
          SENSE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN'),
            ON '60102' $
          END, DO $
C $
          DISABLE, TIMER 'TIMER 1' $
	  DISABLE, EVENT 'CLOCK1A' $
	  DISABLE, EVENT 'PROBE1' $
          DISABLE, EVENT 'PHASE RETURN 1' $
          DISABLE, EVENT 'PHASE ASSERT 1' $
C $
          DISABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
	  OUTPUT, C'pcr 100 section a \LF\ CHECKING READBACK', 'DISPLAY-DATA'.'MEASURED-PATTERN',C' OUTPUTS \LF\' $
    	  INPUT, GO-NOGO $
	  REMOVE, ALL $
C $
C added section for statement 60103 $
C 060103 $
C        APPLY, LOGIC DATA, 
            VALUE X'FFFF',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
            CNX HI
          P111-72 P111-75  P111-76  P111-79  P111-81  P111-82  P111-84  P111-93 
          P111-95 P111-103 P111-107 P111-113 P111-115 P111-118 P111-121 P111-124
          $
C
C         ASSURE DTS CHANNEL CONTINUITY BETWEEN THE ABOVE STIMULUS
C	  PINS AND THE BELOW MEASUREMENT PINS BY MEASURING LL1
C $
C          WAIT FOR, .1 SEC $
C $
C          ENABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
C          ENABLE, TIMER 'TIMER 1' $
C	  ENABLE, EVENT 'CLOCK1A' $
C	  ENABLE, EVENT 'PROBE1' $
C          ENABLE, EVENT 'PHASE RETURN 1' $
C          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
C          DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 1',
          SENSE-EVENT 'PROBE1' $
C $
C         SENSE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN'),
            ON '60103' $
C          END, DO $
C $
C          DISABLE, TIMER 'TIMER 1' $
C	  DISABLE, EVENT 'CLOCK1A' $
C	  DISABLE, EVENT 'PROBE1' $
C          DISABLE, EVENT 'PHASE RETURN 1' $
C          DISABLE, EVENT 'PHASE ASSERT 1' $
C          DISABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
C	  OUTPUT, C'pcr 100 section b CHECKING READBACK', 'DISPLAY-DATA'.'MEASURED-PATTERN',C' OUTPUTS \LF\' $
C    	  INPUT, GO-NOGO $
C $
C section for pcr 100 statement 60104 $
C $
C         APPLY +5VDC TO J1-43, J1-86, J1-8, J1-51,J1-129, J1-22 &
C	  J1-29. THE A2 SHORTING BOARD WRAPS THESE PINS BACK TO
C	  DTS CHANNELS
C $
C          APPLY, DC SIGNAL, 
            VOLTAGE 5.0 V,
            CURRENT-LMT 0.5 A,
            CNX HI P1-86F
                LO P1-44F  
                SENSE-HI P1-86S
                SENSE-LO P1-44S  $
C          APPLY, DC SIGNAL, 
            VOLTAGE 5.0 V,
            CURRENT-LMT 0.5 A,
            CNX HI P1-51F                          
                LO P1-1F  
                SENSE-HI P1-51S
                SENSE-LO P1-1S  $
C          APPLY, DC SIGNAL, 
            VOLTAGE 5.0 V,
            CURRENT-LMT 0.5 A,
            CNX HI P1-22F                          
                LO P1-1AF  
                SENSE-HI P1-22S
                SENSE-LO P1-1AS  $
C          APPLY, DC SIGNAL, 
            VOLTAGE 5.0 V,
            CURRENT-LMT 1.2 A,
            CNX HI P1-29F                          
                LO P1-1BF  
                SENSE-HI P1-29S
                SENSE-LO P1-1BS  $
C $
C         ASSURE DTS CHANNEL, DC1-HI/LO, DC2-HI/LO & DC3-HI/LO
C	  CONTINUITY BY MEASUREING THE +5V APPLIED BY DC1, DC2
C	  & DC3 WITH THE DTS $
C $
C          WAIT FOR, 2 SEC $
C $
C          ENABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
C          ENABLE, TIMER 'TIMER 1' $
C	  ENABLE, EVENT 'CLOCK1A' $
C	  ENABLE, EVENT 'PROBE1' $
C         ENABLE, EVENT 'PHASE RETURN 1' $
C          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
C          DO, TIMED DIGITAL,
C          STIM-EVENT 'PHASE RETURN 1',
C          SENSE-EVENT 'PROBE1' $
C $
C          SENSE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN'),
            ON '60104' $
C          END, DO $
C $
C          DISABLE, TIMER 'TIMER 1' $
C	  DISABLE, EVENT 'CLOCK1A' $
C	  DISABLE, EVENT 'PROBE1' $
C         DISABLE, EVENT 'PHASE RETURN 1' $
C          DISABLE, EVENT 'PHASE ASSERT 1' $
C          DISABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
C	  OUTPUT, C'pcr 100 section c CHECKING READBACK', 'DISPLAY-DATA'.'MEASURED-PATTERN',C' OUTPUTS \LF\' $
C    	  INPUT, GO-NOGO $
C $ 
C 11/08/06 added section for pcr 127 deviation from pcr 100.$ 
C $
	  OUTPUT, C'pcr 127 check  \LF\' $
    	  INPUT, GO-NOGO $
          APPLY, LOGIC DATA, 
            VALUE X'FFFFFFFF',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
            CNX HI
            P1-2   P1-3   P1-4   P1-5   P1-6   P1-7   P1-10  P1-12 
	    P1-13  P1-14  P1-15  P1-16  P1-22D P1-24  P1-26  P1-27
	    P1-28  P1-34  P1-35  P1-37  P1-38  P1-41  P1-45  P1-46
	    P1-48  P1-49  P1-50  P1-51D P1-64  P1-65  P1-67  P1-68
            $
C
C         ASSURE DTS CHANNEL CONTINUITY BETWEEN THE ABOVE STIMULUS PINS
C	  AND THE BELOW MEASUREMENT PINS BY MEASURING LL1
C $
        WAIT FOR, .1 SEC $
C $
          ENABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
C $
          ENABLE, TIMER 'TIMER 1' $
	  ENABLE, EVENT 'CLOCK1A' $
	  ENABLE, EVENT 'PROBE1' $
          ENABLE, EVENT 'PHASE RETURN 1' $
          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
          DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 1',
          SENSE-EVENT 'PROBE1' $
C $
          SENSE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN'),
            ON '62003' $
          END, DO $
C $
          DISABLE, TIMER 'TIMER 1' $
	  DISABLE, EVENT 'CLOCK1A' $
	  DISABLE, EVENT 'PROBE1' $
          DISABLE, EVENT 'PHASE RETURN 1' $
          DISABLE, EVENT 'PHASE ASSERT 1' $
C $
          DISABLE, DIGITAL CONFIGURATION 'DIG-RESP'  $
	  OUTPUT, C'pcr 127 section a \LF\ CHECKING READBACK', 'DISPLAY-DATA'.'MEASURED-PATTERN',C' OUTPUTS \LF\' $
    	  INPUT, GO-NOGO $
	  REMOVE, ALL $
C $
C calls a nam. then test poles. pcr 102 $
C $
C	LASAR TEST #1 WITH GUIDED PROBE $
C	THIS IS THE MAIN TEST, DETECTING 85% OF FAULTS $
C	********  VERIFY LASAR TEST #1  ********  $
	CALCULATE,
	  'DTB_FILE' = C'P209GP1\\\P209A1', 
	  'CIRCUIT_FILE' = C'P209GP1\\\P209A1',
	  'DTS_RESET_FLAG' = 1,
	  'DIAG_FLAG' = 0,  
	  'PIN_STATE' = 0  $
C $
C $
	PERFORM,'M910NAM'('DTB_FILE','CIRCUIT_FILE', 'DTS_RESET_FLAG',
	  'DIAG_FLAG','PIN_STATE', 'RESULTS_FILE', 'RETURN_STATUS')  $
	OUTPUT, C'pcr 102 \LF\ CHECKING READBACK', 'RETURN_STATUS',C' OUTPUTS \LF\' $
	INPUT, GO-NOGO $
	 
C $
C section for pcr 99 inserted here commented because cnx field needs corrections for existing channels.  $
C $
C	APPLY, 'DIGITAL STIM', B'1', ITA_HI $
C	MEASURE, 'DIGITAL BYTE RESP', 
		ITA7 ITA6 ITA5 ITA4 ITA3 ITA2 ITA1 ITA0 $
C	REMOVE, LOGIC DATA, CNX HI ITA_HI $
C        OUTPUT, C'pcr 99 section a \LF\ CHECKING stim 1 bit readback 1 byte' $C
C	OUTPUT, 'BYTE-DATA',C' OUTPUTS \LF\' $
C	INPUT, GO-NOGO $
	IF, 'ONCEDONE', THEN $
	GO TO, STEP 001050 $
	END, IF $
	CALCULATE, 'ONCEDONE' = TRUE $
	GO TO, STEP 001000 $
C $
C *******************************************************************
C *  TEST MENU 
C *******************************************************************$
B $
 001050 CALCULATE, 'ONCEDONE' = TRUE $
	OUTPUT, 
        C'             Test Menu\LF\',
        C'  --------------------------------\LF\',
        C'  Run All Tests                  1\LF\',
        C'  Static Tests                   2\LF\',
        C'  Dynamic Tests                  3\LF\',
	  C'  Events Tests                   4\LF\',
        C'  High Voltage Pin Tests         5\LF\',
	  C'  Connect/Disconnect Test        6\LF\',
        C'  32-Bit Test                    7\LF\',
	  C'  XTEST-7/28/06		     8\LF\',
        C'  XTEST-8/16/06A		     9\LF\',
    	  C'  XTEST-8/16/06B		     10\LF\',
    	  C'  PCR 128 11/13/06		     11\LF\',
    	  C'  PCR 129 11/14/06 		     12\LF\',
    	  C'  PCR 109 11/14/06 		     13\LF\',
    	  C'  PCR 168 71 183 		     14\LF\',
    	  C'  PCR 125 11/15/06 		     15\LF\',
    	  C'  PCR 134 11/16/06 		     16\LF\',
    	  C'  PCR 126 11/16/06 		     17\LF\',
    	  C'  PCR 136 11/16/06 		     18\LF\',
    	  C'  PCR 135, 201 		     19\LF\',
    	  C'  PCR 139 140 141 164 165 & 146    20\LF\',
    	  C'  PCR 159(99),156,168(51,145      21\LF\',
    	  C'  PCR 193                       22\LF\',
    	  C'  PCR 201,202                   23\LF\',
    	  C'  PCR 200                       24\LF\',
    	  C'  PCR 207                       25\LF\',
    	  C'  PCR error log, 232,234      26\LF\',
    	  C'  PCR 233                     27\LF\',
        C'  Exit                              0\LF\',
        C'  \LF\',
        C'  Enter a selection\LF\'
        $
        CALCULATE, 'FAIL-FLAG' = 0 $
        INPUT, INTO 'CHOICE' $
        OUTPUT, 
          C'  Selection:', 'CHOICE', C'\LF\' $
        IF, 'CHOICE' EQ 0, THEN $
          GO TO, STEP 999900 $
        END, IF $
        IF, 'CHOICE' EQ 1, THEN $
          CALCULATE, 'E-E' = TRUE $
          GO TO, STEP 010000 $
        END, IF $
        IF, 'CHOICE' EQ 2, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 010000 $
        END, IF $
        IF, 'CHOICE' EQ 3, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 020000 $
        END, IF $
	IF, 'CHOICE' EQ 4, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 030000 $
        END, IF $
        IF, 'CHOICE' EQ 5, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 040000 $
        END, IF $
     	IF, 'CHOICE' EQ 6, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 050000 $
        END, IF $
    	IF, 'CHOICE' EQ 7, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 060000 $
        END, IF $
     	IF, 'CHOICE' EQ 8, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 070000 $
        END, IF $
	IF, 'CHOICE' EQ 9, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 080000 $
        END, IF $
	IF, 'CHOICE' EQ 10, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 090000 $
        END, IF $
	IF, 'CHOICE' EQ 11, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100000 $
        END, IF $
	IF, 'CHOICE' EQ 12, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100005 $
        END, IF $
	IF, 'CHOICE' EQ 13, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100010 $
        END, IF $
	IF, 'CHOICE' EQ 14, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100020 $
        END, IF $
	IF, 'CHOICE' EQ 15, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100030 $
        END, IF $
	IF, 'CHOICE' EQ 16, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100040 $
        END, IF $
	IF, 'CHOICE' EQ 17, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100050 $
        END, IF $
	IF, 'CHOICE' EQ 18, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100060 $
        END, IF $
	IF, 'CHOICE' EQ 19, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100070 $
        END, IF $
	IF, 'CHOICE' EQ 20, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100080 $
        END, IF $
	IF, 'CHOICE' EQ 21, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100090 $
        END, IF $
	IF, 'CHOICE' EQ 22, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100100 $
        END, IF $
	IF, 'CHOICE' EQ 23, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100110 $
        END, IF $
	IF, 'CHOICE' EQ 24, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100120 $
        END, IF $
	IF, 'CHOICE' EQ 25, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100130 $
        END, IF $
	IF, 'CHOICE' EQ 26, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100140 $
        END, IF $
   	IF, 'CHOICE' EQ 27, THEN $
          CALCULATE, 'E-E' = FALSE $
          GO TO, STEP 100150 $
        END, IF $
        OUTPUT, 
          C'  Bad Choice!  Try again\LF\' 
          $
        GO TO, STEP 001050 $
C $
C *******************************************************************
C * Static Tests
C ******************************************************************* $
C $
B $
 010000 OUTPUT, C'\LF\' $
	OUTPUT, C'STATIC TESTS' $
        OUTPUT, C'------------\LF\\LF\'$
	OUTPUT, C'1. CONNECT RIBBON CABLE BETWEEN J2A AND J2B ON M917 NEAREST CRB' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 020000 $
      END, IF $
    
	
        OUTPUT, C'STATIC TEST 1' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 1' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
	

	CALCULATE, 'ResultWord' = X'0000'	      $
        CALCULATE, 'ExpectWord' = X'FA50'            $

        APPLY,LOGIC DATA,
        	VALUE 'ExpectWord',
        	VOLTAGE-ONE 5.0 V,
        	VOLTAGE-ZERO 0.2 V,
	     CNX HI CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$

C     10 MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  2.0 V,
             VOLTAGE-ZERO 0.8 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$    

      10 MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$

	OUTPUT, C'Expect:', 'ExpectWord' $
   	OUTPUT, C'Result:', 'ResultWord' $
	
	COMPARE, 'ResultWord', EQ 'ExpectWord' $
	
	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10010 $

        PERFORM, 'RESULTS' $
        IF, 'E-E' EQ FALSE, THEN $
  	INPUT, GO-NOGO $
        END, IF $

        OUTPUT, C'STATIC TEST 2' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 2' $
	OUTPUT, TO 'PRINTER',  C'-------------' $

   
        ENABLE, DIGITAL CONFIGURATION  'Individual Configuration'$

	CALCULATE, 'ResultBit' = B'0' $
        CALCULATE, 'ExpectBit' = B'1' $

	STIMULATE, ONE, ON 'CH24-INPUT'  $
     20 SENSE, (VALUE INTO 'ResultBit'), ON 'CH48-OUTPUT'    $

        OUTPUT, C'Expect:','ExpectBit' $
	OUTPUT, C'Result:','ResultBit' $
	
	COMPARE, 'ResultBit' , EQ 'ExpectBit' $

	DISABLE, DIGITAL CONFIGURATION 'Individual Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10020 $

        PERFORM, 'RESULTS' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $
        OUTPUT, C'STATIC TEST 3' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 3' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
  
        ENABLE, DIGITAL CONFIGURATION  'Individual Configuration'$

	CALCULATE, 'ResultBit' = B'0' $
        CALCULATE, 'ExpectBit' = B'0' $

	STIMULATE, ZERO, ON 'CH24-INPUT'  $
     30 SENSE, (VALUE INTO 'ResultBit'), ON 'CH48-OUTPUT'    $

        OUTPUT, C'Expect:','ExpectBit' $
	OUTPUT, C'Result:','ResultBit' $
	
	COMPARE, 'ResultBit' , EQ 'ExpectBit' $

	DISABLE, DIGITAL CONFIGURATION 'Individual Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10030 $

        PERFORM, 'RESULTS' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $

        OUTPUT, C'STATIC TEST 4' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 4' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
  
        ENABLE, DIGITAL CONFIGURATION  'Individual Configuration'$

     40 STIMULATE, HIZ, ON 'CH24-INPUT'  $
  
	OUTPUT, C'1. REMOVE RIBBON CABLE' $

	OUTPUT, C'2. VERIFY THAT DWG CHANNEL 24 IS IN HI-IMPEDANCE MODE BY'$
	OUTPUT, C'MEASURING RESISTANCE BETWEEN J2B-31 & J2B-32.' $
	OUTPUT, C'3. VERIFY VALUE > 1 MEGOHMS' $

	OUTPUT, C'\LF\' $

	OUTPUT, C'T - VERIFIED VALUE > 1 MEGOHMS' $
	OUTPUT, C'F - VALUE < 1 MEGOHMS \LF\' $
      
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $


	DISABLE, DIGITAL CONFIGURATION 'Individual Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10040 $

        PERFORM, 'RESULTS' $
	OUTPUT, C'REPLACE RIBBON CABLE BETWEEN J2A AND J2B ON M917 NEAREST CRB' $
	OUTPUT, C'\LF\' $
	OUTPUT, C'HIT EITHER TRUE OR FALSE WHEN READY TO CONTINUE ' $
	INPUT, GO-NOGO $

	OUTPUT, C'\LF\' $	
 	OUTPUT, C'STATIC TEST 5' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 5' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
  
        ENABLE, DIGITAL CONFIGURATION  'Word Configuration'$

	CALCULATE, 'ResultWord' = X'0' $
        CALCULATE, 'ExpectWord' = X'ABCD' $

        STIMULATE, 'ExpectWord', ON 'WORD_INPUT' $

     50 SENSE, (VALUE INTO 'ResultWord'), ON 'WORD_OUTPUT'$

	OUTPUT, C'Expect:','ExpectWord' $
	OUTPUT, C'Result:','ResultWord' $

	COMPARE, 'ResultWord', EQ 'ExpectWord'$	

	DISABLE, DIGITAL CONFIGURATION 'Word Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10050 $

        PERFORM, 'RESULTS' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $
	REMOVE, ALL $

 	OUTPUT, C'STATIC TEST 6' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 6' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
 
	ENABLE, DIGITAL CONFIGURATION  'Nibble Configuration'$

	CALCULATE, 'ResultNibble' = x'A' $
        CALCULATE, 'ExpectNibble' = x'B' $

        STIMULATE, 'ExpectNibble', ON 'NIBBLE_INPUT' $

     60 SENSE, (VALUE INTO 'ResultNibble'), ON 'NIBBLE_OUTPUT'$

	OUTPUT, C'Expect:','ExpectNibble' $
	OUTPUT, C'Result:','ResultNibble' $

	COMPARE, 'ResultNibble', EQ 'ExpectNibble'$	

	DISABLE, DIGITAL CONFIGURATION 'Nibble Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10060 $

        PERFORM, 'RESULTS' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $
	REMOVE, ALL $


 	OUTPUT, C'STATIC TEST 7' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 7' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
 
	ENABLE, DIGITAL CONFIGURATION  'Seven Configuration'$

	CALCULATE, 'ResultByte' = x'0' $
        CALCULATE, 'ExpectSeven' = B'1011110' $

	STIMULATE, 'ExpectSeven', ON 'SEVEN_INPUT' $
     70 SENSE, (VALUE INTO 'ResultSeven'), ON 'SEVEN_OUTPUT'$

	OUTPUT, C'Expect:','ExpectSeven' $
	OUTPUT, C'Result:','ResultSeven' $

	COMPARE, 'ResultSeven', EQ 'ExpectSeven'$	

	DISABLE, DIGITAL CONFIGURATION 'Seven Configuration'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10070 $
       
        PERFORM, 'RESULTS' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $

	OUTPUT, C'STATIC TEST 8' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 8' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
  
        ENABLE, DIGITAL CONFIGURATION  'Word Configuration'$

	CALCULATE, 'ResultWord' = X'0' $
        CALCULATE, 'ExpectWord' = X'ABCD' $
	CALCULATE, 'ReferenceWord' = X'ABCD' $
	CALCULATE, 'Mask1Word'	= X'FFFF' $
	CALCULATE, 'CompareWord' = X'0000' $

        STIMULATE, 'ExpectWord', ON 'WORD_INPUT' $

     80	PROVE, (VALUE INTO 'ResultWord') REF 'ReferenceWord',
		MASK-ONE 'Mask1Word',
		SAVE-COMP 'CompareWord',
		ERROR 'ErrorWord',
		ERROR-INDEX 'ErrorIndex',
		FAULT-COUNT 'faultCount' ,
		ON 'WORD_OUTPUT'$ 

	OUTPUT, C'Expect:','ExpectWord' $
	OUTPUT, C'Result:','ResultWord' $
	OUTPUT, C'Reference:','ReferenceWord' $
	OUTPUT, C'Compare Word :', 'CompareWord' $
	OUTPUT, C'Error Word :', 'ErrorWord' $
	
	FOR, 'resultIndex' = 1 THRU 16, THEN $
		OUTPUT, C'Error Index (','resultIndex', C'):', 'ErrorIndex'('resultIndex') $
	END, FOR $

	OUTPUT, C'\LF\' $
	OUTPUT, C'Fault Count :', 'faultCount' $

	COMPARE, 'ResultWord', EQ 'ExpectWord' $
	OUTPUT, C'\LF\' $

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10080 $
	DISABLE, DIGITAL CONFIGURATION 'Word Configuration'$

      	PERFORM, 'RESULTS' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END,IF $
	REMOVE, ALL $

	OUTPUT, C'STATIC TEST 9' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'STATIC TEST 9' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
  
        ENABLE, DIGITAL CONFIGURATION  'Nibble Configuration'$

	CALCULATE, 'ResultByte' = X'0' $
        CALCULATE, 'ExpectByte' = X'A' $

        STIMULATE, 'ExpectByte', ON 'NIBBLE_INPUT' $
     90 SENSE, (VALUE INTO 'ResultByte'), ON 'NIBBLE_OUTPUT'$

	OUTPUT, C'Expect:','ExpectByte' $
	OUTPUT, C'Result:','ResultByte' $

	COMPARE, 'ResultByte', EQ 'ExpectByte'$	


	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 10090 $
   	DISABLE, DIGITAL CONFIGURATION 'Nibble Configuration'$

        PERFORM, 'RESULTS' $
	REMOVE, ALL $

C	FINISHED WITH STATIC TEST $

     95 IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 10000 $
        END, IF $
C $
C *******************************************************************
C * Dynamic Tests
C ******************************************************************* $
C $
B $
 020000 OUTPUT, C'\LF\' $
	OUTPUT, C'DYNAMIC TESTS' $
        OUTPUT, C'------------\LF\\LF\'$
	OUTPUT, C'1. CONNECT RIBBON CABLE BETWEEN J2A AND J2B ON M917 NEAREST CRB' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 030000 $
        END, IF $
	 END,IF $

	OUTPUT, C'DYNAMIC TEST 1' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'DYNAMIC TEST 1' $
	OUTPUT, TO 'PRINTER',  C'-------------' $

	ENABLE, DIGITAL CONFIGURATION 'Word Configuration'$

	CALCULATE, 'FAIL' = FALSE $

     10 DO, TIMED DIGITAL,
		STIM-RATE 1000000 WORDS/SEC,
		SENSE-DELAY 200 NSEC $
		STIMULATE, 'ExpectArray', ON 'WORD_INPUT'$
		SENSE, (VALUE INTO 'ResultArray'), ON 'WORD_OUTPUT'$
	END, DO$

	FOR, 'Index' = 1 THRU 4, THEN $
		OUTPUT, C'Expect Array (', 'Index' , C') = ', 'ExpectArray'('Index') $
		OUTPUT, C'Result Array (', 'Index' , C') = ', 'ResultArray'('Index') $
		COMPARE, 'ExpectArray'('Index'), EQ 'ResultArray'('Index') $
		IF, NOT 'GO', THEN $
			CALCULATE, 'FAIL' = TRUE $
		END, IF $
	END, FOR$

	DISABLE, DIGITAL CONFIGURATION 'Word Configuration'$

	IF, 'FAIL' EQ TRUE, THEN$
		CALCULATE, 'GO' = FALSE $
	END, IF $	

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 20010 $

	PERFORM, 'RESULTS'$

	

	CALCULATE, 'FAIL' = FALSE $
   
        OUTPUT, C'DYNAMIC TEST 2' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'DYNAMIC TEST 2' $
	OUTPUT, TO 'PRINTER',  C'-------------' $

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $
	ENABLE, DIGITAL CONFIGURATION 'Word Configuration'$

	CALCULATE, 'ExpectWord' = X'ABBA'$
	CALCULATE, 'ResultWord' = X'0000'$

	CALCULATE, 'ExpectWord2' = X'1234'$
	CALCULATE, 'ResultWord2' = X'0000'$

     20 DO, TIMED DIGITAL,

		STIM-RATE 1000000 WORDS/SEC,
		SENSE-DELAY 200 NSEC $

		STIMULATE, 'ExpectWord', ON 'WORD_INPUT'$
		SENSE, (VALUE INTO 'ResultWord'), ON 'WORD_OUTPUT'$
	
		STIMULATE, 'ExpectWord2', ON 'WORD_INPUT'$
		SENSE, (VALUE INTO 'ResultWord2'), ON 'WORD_OUTPUT'$

	END, DO$

	OUTPUT, C'Expect:', 'ExpectWord' $
   	OUTPUT, C'Result:', 'ResultWord' $

	COMPARE, 'ResultWord', EQ 'ExpectWord' $

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

	IF, 'GO' EQ FALSE, THEN $
		CALCULATE, 'FAIL' = TRUE $
	END, IF $

	OUTPUT, C'Expect:', 'ExpectWord2' $
   	OUTPUT, C'Result:', 'ResultWord2' $

	COMPARE, 'ResultWord2', EQ 'ExpectWord2' $

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 20020 $

	PERFORM, 'RESULTS'$

	CALCULATE, 'FAIL' = FALSE $

	DISABLE, DIGITAL CONFIGURATION 'Word Configuration'$
       

        OUTPUT, C'DYNAMIC TEST 3' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'DYNAMIC TEST 3' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
    
	ENABLE, DIGITAL CONFIGURATION 'Word Configuration' $
  
	CALCULATE, 'ResultWord' = X'0000' $
	CALCULATE, 'ExpectWord' = X'FEED' $

	DO, TIMED DIGITAL,
		STIM-RATE 1000000 WORDS/SEC,
	 	SENSE-DELAY 200 NSEC$

		STIMULATE, 'ExpectWord', ON 'WORD_INPUT'$
	
     30 	PROVE, (VALUE INTO 'ResultWord') REF 'ExpectWord',
			MASK-ONE 'Mask1Word',
			SAVE-COMP 'CompareWord',
			ERROR 'ErrorWord',
			ERROR-INDEX 'ErrorIndex',
			FAULT-COUNT 'faultCount',
			ON 'WORD_OUTPUT'$ 
	
	END, DO$

	OUTPUT, C'Expect:','ExpectWord' $
	OUTPUT, C'Result:','ResultWord' $

	COMPARE, 'ExpectWord', EQ 'ResultWord' $	

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 20030 $

        PERFORM, 'RESULTS' $

	OUTPUT, C'DYNAMIC TEST 4' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'DYNAMIC TEST 4' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
    

	DO, TIMED DIGITAL,
		STIM-RATE 1000000 WORDS/SEC,
	 	SENSE-DELAY 200 NSEC$

		STIMULATE, 'ExpectArray', ON 'WORD_INPUT'$
	
     40		PROVE, (VALUE INTO 'ResultArray') REF 'ReferenceArray',
			MASK-ONE 'MaskArray',
			SAVE-COMP 'CompareArray',
			ERROR 'ErrorArray',
			ERROR-INDEX 'ErrorIndex',
			FAULT-COUNT 'faultCount',
			ON 'WORD_OUTPUT'$ 
	
	END, DO$

	CALCULATE, 'FAIL' = FALSE $

	FOR, 'Index' = 1 THRU 5, THEN $
		OUTPUT, C'Expect Array (', 'Index' , C') = ', 'ExpectArray'('Index') $
		OUTPUT, C'Reference Array (', 'Index', C')=', 'ReferenceArray'('Index') $
		OUTPUT, C'Compare Array (', 'Index' , C') = ', 'CompareArray'('Index') $
	
		OUTPUT, C'Result Array (', 'Index' , C') = ', 'ResultArray'('Index') $
		OUTPUT, C'Error Array (', 'Index' , C') = ', 'ErrorArray'('Index') $
		OUTPUT, C'\LF\'$

		COMPARE, 'ExpectArray'('Index'), EQ 'ResultArray'('Index') $
			
		IF, 'GO' EQ FALSE, THEN $
			CALCULATE, 'FAIL' = TRUE $
		END, IF $

	END, FOR$

	OUTPUT, C'\LF\' $

	FOR, 'Index' = 1 THRU 5, THEN $
		OUTPUT, C'Error Index (','Index',C') = ', 'ErrorIndex'('Index') $
		OUTPUT, C'\LF\' $
	END, FOR$

	OUTPUT, C'\LF\' $
	OUTPUT, C'Fault Count :', 'faultCount'$
	OUTPUT, C'\LF\' $

	IF, 'FAIL' EQ TRUE, THEN$
		CALCULATE, 'GO' = FALSE $
	END, IF $	

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 20040 $

	PERFORM, 'RESULTS'$

	DISABLE, DIGITAL CONFIGURATION 'Word Configuration' $

C	FINISHED WITH DYNAMIC TEST $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 01050$
        	END, IF $
		GO TO, STEP 20000 $
        END, IF $
C *******************************************************************
C * End Dynamic Tests
C ******************************************************************* $
C $
C *******************************************************************
C * Events Tests
C ******************************************************************* $
C $
B $
 030000 

	OUTPUT, C'\LF\' $
	OUTPUT, C'EVENTS TESTS' $
        OUTPUT, C'------------\LF\\LF\'$
	OUTPUT, C'1. CONNECT RIBBON CABLE BETWEEN J2A AND J2B ON M917 NEAREST CRB' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 040000 $
        END, IF $
         END, IF $
	
C       LAYER 1$
	 
	ENABLE, EVENT '1USEC' $

        ENABLE, EVENT 'PA1' $ 
        ENABLE, EVENT 'WO1'  $
        ENABLE, EVENT 'PAR1'  $

C       LAYER 2  $

      	ENABLE, EVENT '10USEC' $
       
        ENABLE, EVENT 'PA2'  $
        ENABLE, EVENT 'WO2'  $
        ENABLE, EVENT 'PAR2'  $
       
C       LAYER 3  $
 	
        ENABLE, EVENT '100USEC' $

        ENABLE, EVENT 'PA3'$
        ENABLE, EVENT 'WO3' $ 
        ENABLE, EVENT 'PAR3' $

c	EXTERNAL SIGNAL $
	
	ENABLE, EVENT 'EXTEVENT' $ 

        ENABLE, EVENT 'PAEXT'$
        ENABLE, EVENT 'WOEXT' $ 
       	ENABLE, EVENT 'PAREXT' $

        OUTPUT, C'EVENTS TEST 1' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'EVENTS TEST 1' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
 
	ENABLE, DIGITAL CONFIGURATION 'Nibble Configuration' $

	CALCULATE, 'FAIL' = FALSE $
		
	CALCULATE, 'NibbleA' = X'A' $
	CALCULATE, 'NibbleB' = X'5' $
	CALCULATE, 'NibbleC' = X'3' $

     10 DO, TIMED DIGITAL,
		STIM-EVENT 'PAR1','PAR2','PAR3',
		SENSE-EVENT 'WO1' ,'WO2','WO3',
		ITERATE 10 TIMES$	

		STIMULATE, 'NibbleA', ON 'NIBBLE_IN_A' $
		SENSE, (VALUE INTO 'ResultNibbleA'), ON 'NIBBLE_OUT_A'$

		STIMULATE, 'NibbleB', ON 'NIBBLE_IN_B' $
		SENSE, (VALUE INTO 'ResultNibbleB'), ON 'NIBBLE_OUT_B'$
	
		STIMULATE, 'NibbleC', ON 'NIBBLE_IN_C' $
		SENSE, (VALUE INTO 'ResultNibbleC'), ON 'NIBBLE_OUT_C'$
	
	END, DO $

	OUTPUT, C'\LF\' $

	OUTPUT, C'EXPECT: ','NibbleA' $
	OUTPUT, C'RESULT: ','ResultNibbleA' $

	COMPARE, 'NibbleA', EQ 'ResultNibbleA' $

	IF, GO EQ FALSE, THEN $
		CALCULATE, 'FAIL' = TRUE $ 
	END, IF$

	OUTPUT, C'\LF\' $


	OUTPUT, C'EXPECT: ','NibbleB' $
	OUTPUT, C'RESULT: ','ResultNibbleB' $

	COMPARE, 'NibbleB', EQ 'ResultNibbleB' $
	IF, GO EQ FALSE, THEN$
		CALCULATE, 'FAIL' = TRUE $ 
	END, IF$

	OUTPUT, C'\LF\' $

	OUTPUT, C'EXPECT: ','NibbleC' $
	OUTPUT, C'RESULT: ','ResultNibbleC' $

	COMPARE, 'NibbleC', EQ 'ResultNibbleC' $

	IF, GO EQ FALSE, THEN$
		CALCULATE, 'FAIL' = TRUE $ 
	END, IF$

	IF, 'FAIL' EQ TRUE, THEN $
		CALCULATE, 'GO' = FALSE $
	END, IF $

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 30010 $

	PERFORM, 'RESULTS'$

        OUTPUT, C'EVENTS TEST 2' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'EVENTS TEST 2' $
	OUTPUT, TO 'PRINTER',  C'-------------' $
 
	CALCULATE, 'FAIL' =FALSE $

	CALCULATE, 'NibbleA' = X'5' $

     20 DO, TIMED DIGITAL,
		STIM-EVENT 'PAREXT',
	
		ITERATE 1 TIMES$	

		STIMULATE, 'NibbleA', ON 'NIBBLE_IN_A' $
		SENSE, (VALUE INTO 'ResultNibble'), ON 'NIBBLE_OUT_A'$

	END, DO $

	OUTPUT, C'EXPECT: ', 'NibbleA' $
	OUTPUT, C'OUTPUT: ', 'ResultNibble' $

	COMPARE, 'ResultNibble', EQ 'NibbleA' $

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 30020 $

	PERFORM, 'RESULTS' $

	DISABLE, DIGITAL CONFIGURATION 'Nibble Configuration' $

C...LAYER 1 $	 

	DISABLE, EVENT '1USEC'  $
	
	DISABLE, EVENT 'PA1'	$
	DISABLE, EVENT 'WO1'	$
	DISABLE, EVENT 'PAR1'	$

C...LAYER 2  $
       
       	DISABLE, EVENT '10USEC'  $
	
	DISABLE, EVENT 'PA2'	$
	DISABLE, EVENT 'WO2'	$
	DISABLE, EVENT 'PAR2'	$
         
C...LAYER 3  $

 	DISABLE, EVENT '100USEC'  $
	
	DISABLE, EVENT 'PA3'	$
	DISABLE, EVENT 'WO3'	$
	DISABLE, EVENT 'PAR3'	$

C...EXTERNAL SIGNAL (CLOCK??? CRB PIN J2A-12)$
	
	DISABLE, EVENT 'EXTEVENT' $ 

        DISABLE, EVENT 'PAEXT'$
        DISABLE, EVENT 'WOEXT' $ 
        DISABLE, EVENT 'PAREXT' $

c	FINISHED WITH EVENTS TEST $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 30000 $
        END, IF $
C *******************************************************************
C * End Events Tests
C ******************************************************************* $
C $
C $
C *******************************************************************
C * High Voltage Tests
C ******************************************************************* $
C $
B $
 040000 OUTPUT, C'\LF\' $
	OUTPUT, C'HIGH VOLTAGE TESTS' $
        OUTPUT, C'------------\LF\\LF\'$
	OUTPUT, C'1. CONNECT RIBBON CABLE BETWEEN J3A AND J3B ON CRB' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 050000 $
        END, IF $
	 END, IF $
	
        OUTPUT, C'HIGH VOLTAGE TEST' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'HIGH VOLTAGE TEST' $
	OUTPUT, TO 'PRINTER',  C'-------------' $

	CALCULATE, 'ResultByte' = X'00'	      $
        CALCULATE, 'ExpectByte' = X'FA'            $

        APPLY, LOGIC DATA,
        	VALUE 'ExpectByte',
        	VOLTAGE-ONE 5.0 V,
       		VOLTAGE-ZERO 0.0 V,
		CNX HI 	CHAN-HV16 CHAN-HV17 CHAN-HV18 CHAN-HV19
			CHAN-HV20 CHAN-HV21 CHAN-HV22 CHAN-HV23$

     10 MEASURE, (VALUE INTO 'ResultByte'), LOGIC DATA,
             VOLTAGE-ONE  1.0 V,
             VOLTAGE-ZERO 0.8 V,
	     CNX HI 	CHAN-HV24 CHAN-HV25 CHAN-HV26 CHAN-HV27
			CHAN-HV28 CHAN-HV29 CHAN-HV30 CHAN-HV31$

C	CALCULATE, 'ResultByte' = 'ResultByte' XOR X'FF' $

	OUTPUT, C'Expect:', 'ExpectByte' $
   	OUTPUT, C'Result:', 'ResultByte' $

	COMPARE, 'ResultByte', EQ 'ExpectByte'$

	CALCULATE,	'VER-UL'=0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 40010 $

        PERFORM, 'RESULTS' $

       
C	FINISHED WITH HI VOLTAGE TEST $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 40000 $
        END, IF $
C *******************************************************************
C * End High Voltage Tests
C ******************************************************************* $
C $
C $
C *******************************************************************
C * Connect/Disconnect Tests
C ******************************************************************* $
C $
B $
 050000 OUTPUT, C'\LF\' $
	OUTPUT, C'CONNNECT/DISCONNECT TEST' $
        OUTPUT, C'------------\LF\\LF\'$
	OUTPUT, C'NO MANUAL INTERVENTION REQUIRED FOR CONNECT/DISCONNECT TEST' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 060000 $
        END, IF $
	 END, IF $
	
        OUTPUT, C'CONNECT/DISCONNECT TEST ' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'CONNECT/DISCONNECT TEST ' $
	OUTPUT, TO 'PRINTER',  C'-------------' $

	OUTPUT, C'\LF\No external setup required fo Connnect/Disconnect test.\LF\'$
      
C    10 CONNECT/DISCONNECT TEST $	
C       COMPARE $


     10	CONNECT, LOGIC DATA,
	CNX HI  CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$

	DISCONNECT, LOGIC DATA,
	CNX HI  CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$

	CONNECT, (VALUE) ,LOGIC DATA,
	CNX HI  CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$

	DISCONNECT, (VALUE), LOGIC DATA,
	CNX HI  CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39$


	OUTPUT, C'\LF\CONNECT/DISCONNECT TEST COMPLETE\LF\'$

	CALCULATE,	'VER-UL'=0.0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 50010 $

        PERFORM, 'RESULTS' $

     
C	FINISHED WITH CONNECT/DISCONNECT TEST $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 50000 $
        END, IF $
C *******************************************************************
C * End Connect/Disconnct Tests
C ******************************************************************* $
C $
C $
C *******************************************************************
C * 32-Bit Tests
C ******************************************************************* $
C $
B $
 060000 OUTPUT, C'\LF\' $
	OUTPUT, C'32 Bit TEST' $
        OUTPUT, C'------------\LF\\LF\'$

	OUTPUT, C'1. CONNECT RIBBON CABLE BETWEEN J2A AND J2B ON M917 NEAREST CRB ' $
	OUTPUT, C'2. CONNECT CUSTOM CABLE TO J1A ON M917 NEAREST CRB' $
	OUTPUT, C'\LF\' $
	OUTPUT, C'   CUSTOM CABLE : J1A-48 -> J1A-46' $
	OUTPUT, C'                  J1A-44 -> J1A-42' $
	OUTPUT, C'                  J1A-40 -> J1A-38' $
	OUTPUT, C'                  J1A-36 -> J1A-34' $
	OUTPUT, C'                  J1A-32 -> J1A-30' $
	OUTPUT, C'                  J1A-28 -> J1A-26' $
	OUTPUT, C'                  J1A-24 -> J1A-22' $
	OUTPUT, C'                  J1A-20 -> J1A-18' $
	OUTPUT, C'\LF\\LF\'$
	OUTPUT, C'T-Ready to test.' $
	OUTPUT, C'F-Skip Test.\LF\\LF\'$

	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $

        IF, NOGO, THEN $
            GO TO, STEP 070000 $
        END, IF $
	 END, IF $
	
        OUTPUT, C'32 Bit TEST ' $
	OUTPUT, C'-------------' $

	OUTPUT, TO 'PRINTER', C'32 Bit TEST ' $
	OUTPUT, TO 'PRINTER',  C'-------------' $


	ENABLE, DIGITAL CONFIGURATION '32-BIT Configuration'$

     10	DO, TIMED DIGITAL,
		STIM-RATE 1000000 WORDS/SEC,
		SENSE-DELAY 200 NSEC $
	
		STIMULATE, 'ExpectDArray', ON 'DWORD_INPUT'$
		SENSE, (VALUE INTO 'ResultDArray'), ON 'DWORD_OUTPUT'$

	END, DO $

	CALCULATE, 'FAIL' = FALSE $

	FOR, 'Index' = 1 THRU 8, THEN $
		OUTPUT, C'Expect Array (', 'Index' , C') = ', 'ExpectDArray'('Index') $
		OUTPUT, C'Result Array (', 'Index' , C') = ', 'ResultDArray'('Index') $

		COMPARE, 'ExpectDArray'('Index'), EQ 'ResultDArray'('Index')$

		IF, GO EQ FALSE, THEN $
			CALCULATE, 'FAIL' = TRUE $
		END, IF $

	END, FOR$

	IF, 'FAIL' EQ TRUE, THEN $
		CALCULATE, 'GO' = 'FALSE' $
	END, IF $

	CALCULATE,	'VER-UL'=0.0$
	CALCULATE,  	'VER-LL'=0$
	CALCULATE, 	'TESTNO'= 60010 $

        PERFORM, 'RESULTS' $

	DISABLE, DIGITAL CONFIGURATION '32-BIT Configuration'$

C	FINISHED WITH 32 Bit TEST $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 50000 $
        END, IF $
C *******************************************************************
C * End 32 Bit Tests
C ******************************************************************* $

C Beginning of Bug Regression Tests $
C *******************************************************************
C * Begin CXTEST-7/28/06
C ******************************************************************* $
	


CXTEST-7/28/06
	Problem with pin count other than multiple of 8.$

B$
 070000 OUTPUT, C'\LF\XTEST-7/28/06\LF\' $

C	1 BIT $

	CALCULATE, 'ExpectBit' = B'1' $
	CALCULATE, 'ResultBit' = B'0' $

C	ENABLE, DIGITAL CONFIGURATION  'Word Configuration'$

 	APPLY,LOGIC DATA,
        	VALUE 'ExpectBit',
        	VOLTAGE-ONE 5.0 V,
        	VOLTAGE-ZERO 0.2 V,
	     	CNX HI CHAN-24 $

	MEASURE, (VALUE INTO 'ResultBit'),
		LOGIC DATA,
		VOLTAGE-ONE 3.0 V,
		VOLTAGE-ZERO 1.0 V,
		CNX HI CHAN-48 $


C	DISABLE, DIGITAL CONFIGURATION 'Word Configuration' $

	OUTPUT, C'\LF\1 bit EXPECT :','ExpectBit' $
	OUTPUT, C'\LF\1 bit RESULT :','ResultBit' $

C	11 BIT $

	CALCULATE, 'ExpectWord' = B'01000111010' $
	CALCULATE, 'ResultWord' = B'00000000000' $

	APPLY,LOGIC DATA,
        	VALUE 'ExpectWord',
        	VOLTAGE-ONE 5.0 V,
        	VOLTAGE-ZERO 0.2 V,
	     	CNX HI CHAN-24 CHAN-25 CHAN-26 CHAN-27 
			CHAN-28 CHAN-29 CHAN-30 CHAN-31
			CHAN-32 CHAN-33 CHAN-34 $

	MEASURE, (VALUE INTO 'ResultWord'),
		LOGIC DATA,
		VOLTAGE-ONE 3.0 V,
		VOLTAGE-ZERO 1.0 V,
		CNX HI 	CHAN-48 CHAN-49 CHAN-50 CHAN-51 
			CHAN-52 CHAN-53 CHAN-54 CHAN-55
			CHAN-56 CHAN-57 CHAN-58 $


C	DISABLE, DIGITAL CONFIGURATION 'Word Configuration' $

	OUTPUT, C'\LF\11 bit EXPECT :','ExpectWord' $
	OUTPUT, C'\LF\11 bit RESULT :','ResultWord' $

     	IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 70000 $
        END, IF $

C *******************************************************************
C * End CXTEST-7/28/06
C ******************************************************************* $
	

C *******************************************************************
C * Begin CXTEST-8/17/06A
C ******************************************************************* $
	


CXTEST-8/16/06
	Problem with Apply then Sense readback to an array.
	Actually, they had an extenal stim (dcps) sourcing the 
	pins to be resp.Before fix, driver would return first element
	correctly, but will return the rest as zero $

B$
 080000 OUTPUT, C'\LF\XTEST-8/17/06A\LF\' $

	CALCULATE, 'ExpectDword' = X'FF0000' $

 	APPLY,LOGIC DATA,
        	VALUE 'ExpectDword',
        	VOLTAGE-ONE 5.0 V,
        	VOLTAGE-ZERO 0.2 V,
	     CNX HI

		    CHAN-16 CHAN-17 CHAN-18 CHAN-19
		    CHAN-20 CHAN-21 CHAN-22 CHAN-23
		    CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39 $

	ENABLE, DIGITAL CONFIGURATION '32-BIT Configuration' $


  	DO, TIMED DIGITAL,
		STIM-RATE 1000000 WORDS/SEC,
		SENSE-DELAY 200 NSEC $
	
C		SENSE, (VALUE INTO 'ResultDArray'(1 THRU 10)),
			ON 'DWORD_OUTPUT',
		CNX HI

		    CHAN-40 CHAN-41 CHAN-42 CHAN-43
	            CHAN-44 CHAN-45 CHAN-46 CHAN-47
		    CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63 $

		SENSE, (VALUE INTO 'ResultDArray'(1 THRU 10)),
			ON 'DWORD_OUTPUT' $

	END, DO $
	
	DISABLE, DIGITAL CONFIGURATION '32-BIT Configuration' $

	OUTPUT, C'\LF\EXPECT ','ExpectDword', C' FOR ALL ELEMENTS.\LF\' $

	FOR, 'Index' = 1 THRU 10, THEN $
		OUTPUT, C'Result Array (', 'Index' , C') = ', 'ResultDArray'('Index') $
	END, FOR$

     	IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 1050$
        	END, IF $
		GO TO, STEP 80000 $
        END, IF $

C *******************************************************************
C * End CXTEST-8/17/06A
C ******************************************************************* $
C *******************************************************************
C * Begin CXTEST-8/17/06B
C ******************************************************************* $
CXTEST-8/16/06
	Problem with Apply then Sense readback to an array.
	Actually, they had an extenal stim (dcps) sourcing the 
	pins to be resp.Before fix, driver would return first element
	correctly, but will return the rest as zero $

B$
 090000 OUTPUT, C'\LF\XTEST-8/17/06B\LF\' $

	CALCULATE, 'ExpectDword' = X'1234ABCD' $
	CALCULATE, 'ResultDword' = X'00000000' $

 	APPLY,LOGIC DATA,
        	VALUE 'ExpectDword',
        	VOLTAGE-ONE 5.0 V,
        	VOLTAGE-ZERO 0.2 V,
	     CNX HI CHAN-00 CHAN-02 CHAN-04 CHAN-06
		    CHAN-08 CHAN-10 CHAN-12 CHAN-14

		    CHAN-16 CHAN-17 CHAN-18 CHAN-19
		    CHAN-20 CHAN-21 CHAN-22 CHAN-23
		    CHAN-24 CHAN-25 CHAN-26 CHAN-27
                    CHAN-28 CHAN-29 CHAN-30 CHAN-31
                    CHAN-32 CHAN-33 CHAN-34 CHAN-35
                    CHAN-36 CHAN-37 CHAN-38 CHAN-39 $


     	MEASURE, (VALUE INTO 'ResultDword'), LOGIC DATA,
             VOLTAGE-ONE  2.0 V,
             VOLTAGE-ZERO 0.8 V,
	     CNX HI CHAN-01 CHAN-03 CHAN-05 CHAN-07
		    CHAN-09 CHAN-11 CHAN-13 CHAN-15

		    CHAN-40 CHAN-41 CHAN-42 CHAN-43
	            CHAN-44 CHAN-45 CHAN-46 CHAN-47
		    CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63 $

 

	OUTPUT, C'\LF\EXPECT :','ExpectDword' $
	OUTPUT, C'\LF\RESULT :','ResultDword' $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 090000 $
        END, IF $
C $
C *******************************************************************
C * End CXTEST-8/17/06B
C ******************************************************	
C $
C *******************************************************************	
C 11/14/06 added code from pcr#128 $
C ******************************************************************$	
B $
 100000 OUTPUT, C'pcr 128 \LF\  GO-NOGO \LF\' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

	ENABLE, DIGITAL CONFIGURATION 'ID-TEST'  $
        SENSE, (VALUE INTO 'MEASDATA2'), ON 'ID-PINS' $
        DISABLE, DIGITAL CONFIGURATION  $

	OUTPUT, C'pcr 128  \LF\ CHECK READBACK', 'MEASDATA2',C' OUTPUT \LF\' $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100000 $
        END, IF $
C $
C *******************************************************************
C * End PCR 128 -11/13/06
C *******************************************************************	
C $
C *******************************************************************	
C 11/13/06 - added code from pcr#129 $ 
C This test uses an ATLAS loop $ 
C ******************************************************************$	
B $
 100005	OUTPUT, C'pcr 129 \LF\  GO-NOGO \LF\' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

     06 CALCULATE, '100-DATA' = B'100' & X'000000000' $
C $
        FOR, 'I' = 1 THRU 39, THEN $
            ENABLE, DIGITAL CONFIGURATION '111'  $
            STIMULATE, '100-DATA', ON '111-OUT'  $
            DISABLE, DIGITAL CONFIGURATION '111' $
  	    OUTPUT, C'pcr 129','100-DATA', C'\LF\  GO-NOGO \LF\' $

C            VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
                 DC SIGNAL,
                 LL 'DISPLAY-DATA'.'L-LIM' V UL 'DISPLAY-DATA'.'U-LIM' V,
                 VOLTAGE MAX 66 V,
                 CNX HI '111-CNX'('I') LO J1_45  $
C $
            CALCULATE, '100-DATA' = SHIFT('100-DATA', 1) $
        END, FOR $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100005 $
        END, IF $
C $
C *******************************************************************
C * End PCR 129 -11/13/06
C *******************************************************************	
C $
C *******************************************************************	
C 11/08/06 - added pcr 109 stimulate failures from dynamic stim. $
C ******************************************************************$	
B $
 100010	OUTPUT, C'pcr 109 \LF\  GO-NOGO \LF\' $
 	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

C turned off call to nam for debug. $
C          CALCULATE, 'DTB_FILE' = C'EXTCLKRST'  $
C          CALCULATE, 'CIRCUIT_FILE' = C'EXTCLKRST'  $
C          CALCULATE, 'DTS_RESET_FLAG' = 1  $
C          CALCULATE, 'DIAG_FLAG' = 0  $
C          CALCULATE, 'PIN_STATE' = 0  $
C $
C          PERFORM, 'M910NAM' 
            ('DTB_FILE', 'CIRCUIT_FILE', 'DTS_RESET_FLAG', 'DIAG_FLAG',
             'PIN_STATE', 'RESULTS_FILE', 'RETURN_STATUS')  $                         
C $
C         SETUP ID PROG DELAY CKT (PDC) TO PASS WG_CLK INPUT THRU TO
C	  COUNTER-IN2 (R9 OUTPUT OF PDC)
C $
          APPLY, LOGIC DATA,
            VALUE B'0000000010',                                       
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
          	ID-UB9 ID-UB8 ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 
          	ID-UB1 ID-UB0  $
C $               
C 	  STIM THE WG_CLK INPUT OF THE PDC WITH DTS H/W CHANNEL 41
C	  AND USE THE PDC OUTPUT WHICH IS ROUTED TO THE CNT-IN2 
C	  (PDC R9 OUTPUT) TO STOP THE COUNTER.  THE COUNTER
C	  WILL BE STARTED BY DTS CHANNEL 55.
C $
          ENABLE, DIGITAL CONFIGURATION 'DTS TRIG'  $
          ENABLE, EVENT 'STARTP', 'STOPP'  $
C $
          SETUP, (TIME), TIME INTERVAL,
            TIME MAX 500 NSEC,
            FROM 'STARTP' TO 'STOPP',
            MAX-TIME 10.0 SEC  $
          CONNECT, (TIME), TIME INTERVAL,
            TIME MAX 500 NSEC,
            FROM 'STARTP' TO 'STOPP',
            MAX-TIME 10.0 SEC  $
            ARM, (TIME), TIME INTERVAL,
            TIME MAX 500 NSEC,
            FROM 'STARTP' TO 'STOPP',
            MAX-TIME 10.0 SEC  $
C $
C 11/14/06 - This stmulate hasn't cleared previous voltage levels. ( from immediately above statements) and 
C            hence gens a warnign that previous levels are being used. ( some cleanup needed. ) $
          DO, TIMED DIGITAL, 
            STIM-RATE 4000000 WORDS/SEC,
            SENSE-DELAY 100 NSEC   $
            STIMULATE, 'TRIG-PATTERN'(1 THRU 10), ON 'STIMULUS' 
              CNX HI DTS-CH55 DTS-CH41 $
          END, DO  $
C $
          FETCH, (TIME INTO 'DISPLAY-DATA'.'MEASURED-VALUE'), TIME INTERVAL,
            TIME MAX 500 NSEC,
            TEST-EQUIP-IMP 50 OHM,
            FROM 'STARTP' TO 'STOPP',
            MAX-TIME 10.0 SEC  $
          REMOVE, (TIME), TIME INTERVAL,
            TIME MAX 500 NSEC,
            TEST-EQUIP-IMP 50 OHM,
            FROM 'STARTP' TO 'STOPP',
            MAX-TIME 10.0 SEC  $
          DISABLE, EVENT 'STARTP', 'STOPP'  $
          DISABLE, DIGITAL CONFIGURATION 'DTS TRIG'  $
	  OUTPUT, C'pcr 109 section a \LF\ CHECKING TIME READBACK', 'DISPLAY-DATA'.'MEASURED-VALUE',C' OUTPUT \LF\' $
	  REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100010 $
        END, IF $
C $
C *******************************************************************
C * End PCR 109 -11/13/06
C ******************************************************************$	
C *******************************************************************
C pasted in pcr 71, 168, 183 proof section here. FROM 10/31/06
C ******************************************************************$
B $
 100020	REMOVE,ALL $
 	OUTPUT, C' pcr 168, 71, 183 \LF\' $
       APPLY, LOGIC DATA, 
            VALUE X'ABCD',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
	     CNX HI 	CHAN-40 CHAN-41 CHAN-42 CHAN-43 CHAN-44 CHAN-45 CHAN-46 CHAN-47
			CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54 CHAN-55 $

	CALCULATE, 'ResultWord32' = X'00000000' $
        CALCULATE, 'ExpectWord' = X'ABCD' $
	CALCULATE, 'ReferenceWord' = X'ABCD' $
	CALCULATE, 'Mask1Word'	= X'FFFF' $
	CALCULATE, 'CompareWord' = X'0000' $
        ENABLE, DIGITAL CONFIGURATION  'ID Word Configuration'$
C    	SENSE, (VALUE INTO 'ResultWord'), ON 'ID_WORD_OUTPUT' $

    	PROVE, (VALUE INTO 'ResultWord32') REF 'ReferenceWord',
		MASK-ONE 'Mask1Word',
		SAVE-COMP 'CompareWord',
		ERROR 'ErrorWord',
		ERROR-INDEX 'ErrorIndex',
		FAULT-COUNT 'faultCount' ,
		ON 'ID_WORD_OUTPUT'$ 
	DISABLE, DIGITAL CONFIGURATION 'ID Word Configuration'$
 	OUTPUT, C' from pcr 168 \LF\' $
	OUTPUT, C'Expect:','ExpectWord' $
	OUTPUT, C'Result:','ResultWord32' $
	OUTPUT, C'Reference:','ReferenceWord' $
	OUTPUT, C'Compare Word :', 'CompareWord' $
	OUTPUT, C'Error Word :', 'ErrorWord' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

	CALCULATE, 'ResultWord' = X'0000' $
        CALCULATE, 'ExpectWord' = X'9876' $
	CALCULATE, 'ReferenceWord' = X'9876' $
	CALCULATE, 'Mask1Word'	= X'FFFF' $
	CALCULATE, 'CompareWord' = X'0000' $
        ENABLE, DIGITAL CONFIGURATION  'ID Word Configuration'$

    	PROVE, (VALUE INTO 'ResultWord') REF 'ReferenceWord',
		MASK-ONE 'Mask1Word',
		SAVE-COMP 'CompareWord',
		ERROR 'ErrorWord',
		ERROR-INDEX 'ErrorIndex',
		FAULT-COUNT 'faultCount' ,
		ON 'ID_WORD_OUTPUT'$ 
	DISABLE, DIGITAL CONFIGURATION 'ID Word Configuration'$
 	OUTPUT, C' from pcr 71 \LF\' $
	OUTPUT, C'Expect:','ExpectWord' $
	OUTPUT, C'Result:','ResultWord' $
	OUTPUT, C'Reference:','ReferenceWord' $
	OUTPUT, C'Compare Word :', 'CompareWord' $
	OUTPUT, C'Error Word :', 'ErrorWord' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

        ENABLE, DIGITAL CONFIGURATION  'ID Word Configuration'$
        ENABLE, TIMER 'TIMER 125' $
	ENABLE, EVENT 'CLOCK125' $
	ENABLE, EVENT 'PROBE125' $
        ENABLE, EVENT 'PHASE RETURN 125' $
        ENABLE, EVENT 'PHASE ASSERT 125' $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'ResultWord32')
            REF X'003FFFFF',
            ON 'RESPONSE183' 
            CNX HI 
	      CHAN-11 CHAN-21 CHAN-23 CHAN-30  CHAN-31  CHAN-32 CHAN-33 CHAN-39
              CHAN-40 CHAN-54 CHAN-58 CHAN-59  CHAN-60  CHAN-61 CHAN-62 CHAN-63
	      CHAN-71 CHAN-73 CHAN-74 CHAN-91 CHAN-102 CHAN-106 $
	END, DO $
 	OUTPUT, C' from pcr 183 22 bit response 32 bit ref \LF\' $
	OUTPUT, C'Expect: 0x3FFFFF' $
	OUTPUT, C'Result:','ResultWord32' $
	OUTPUT, C'Reference: 0x003FFFFF \LF\' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'ResultWord32')
            REF X'003FFF',
            ON 'RESPONSE183' 
            CNX HI 
              CHAN-40 CHAN-54 CHAN-58 CHAN-59  CHAN-60  CHAN-61 CHAN-62 CHAN-63
	      CHAN-71 CHAN-73 CHAN-74 CHAN-91 CHAN-102 CHAN-106 $
	END, DO $
 	OUTPUT, C' from pcr 183 12 bit response 24 bit ref \LF\' $
	OUTPUT, C'Expect: 0x3FFF' $
	OUTPUT, C'Result:','ResultWord32' $
	OUTPUT, C'Reference: 0x003FFF \LF\' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'ResultWord32')
            REF X'0000003F',
            ON 'RESPONSE183' 
            CNX HI 
	      CHAN-71 CHAN-73 CHAN-74 CHAN-91 CHAN-102 CHAN-106 $
	END, DO $
 	OUTPUT, C' from pcr 183 6 bit response 32 bit ref \LF\' $
	OUTPUT, C'Expect: 0x3F' $
	OUTPUT, C'Result:','ResultWord32' $
	OUTPUT, C'Reference: 0x0000003F \LF\' $
	 IF, 'E-E' EQ FALSE, THEN $
	INPUT, GO-NOGO $
	 END, IF $

	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
	DISABLE, DIGITAL CONFIGURATION 'ID Word Configuration'$
C $
C	  CALCULATE, '200-DATA32'(22) = B'00000000000100000000000000000000' $
C          FOR, 'I' = 21 THRU 1 BY -1, THEN $
C             CALCULATE, '200-DATA32'('I') = SHIFT('200-DATA32'('I'+1), 1) $
C          END, FOR $
	  CALCULATE, '200-DATA32'(22) = B'00000000000111111111111111111111' $
          FOR, 'I' = 21 THRU 1 BY -1, THEN $
             CALCULATE, '200-DATA32'('I') ='200-DATA32'(22) $
          END, FOR $
C $
	   CALCULATE, 'ERR-COUNT' = 0 $
          ENABLE, DIGITAL CONFIGURATION '200-135' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '200-DATA'(1 THRU 22), ON '201-IN' $
              PROVE, (VALUE INTO '200-RESP'(1 THRU 22))
                     REF         '200-DATA32'(1 THRU 22),
                     ERROR       '200-ERROR-LST'(1 THRU 22),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 22),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '201-OUT135' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '200-135' $
C $
 	OUTPUT, C' from pcr 183 21 bit response with a 32 bit ref for 22 patterns \LF\' $
C         FOR, 'I' = 22 THRU 1 BY -1, THEN $
	  CALCULATE, 'I' = 1 $	
	  OUTPUT,'I',C'  READBACK ','200-RESP'('I'), C'  REFERENCE ','200-DATA32'('I'),
	                C'  COMPARE ','200-ERROR-LST'('I'),C' \LF\' $
C          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT ','I', C' INDEX ','ERROR-NDX'('I'),C' WORD ','200-ERROR-LST'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

 	OUTPUT, C' from pcr 183 enhanced for LAVID-ID step 60201 expanded to 44 channels, sense \LF\' $
      ENABLE, DIGITAL CONFIGURATION '201-183' $
C --------- Measure all pulled up pins. Should be Hi --------$
            SENSE, (VALUE INTO '200-RESULT1-183'), ON '201-OUT-183' $  
	OUTPUT, C' 44 channels sense low = ','200-RESULT1-183',C'\LF\'$
C $
C --------- Set Pull-up voltage to 1v below d/s threshold ---$
C            CHANGE, DC SIGNAL,
                VOLTAGE 1 V,
                CURRENT-LMT .50 A,
                CNX HI J1_29  SENSE-HI J1_29
                    LO J1_1   SENSE-LO J1_1  $
C $
            WAIT FOR, 1 SEC $
C $
C --------- Measure all pulled up pins. Should be Lo --------$
            SENSE, (VALUE INTO '200-RESULT2-183'), ON '201-OUT-183' $  
	OUTPUT, C' 44 channels sense low = ','200-RESULT1-183',C'\LF\'$
C $
          DISABLE, DIGITAL CONFIGURATION '201-183' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	   END, IF $

 	OUTPUT, C' from pcr 183 enhanced for LAVID-ID step 60601 expanded to 48 channels, prove into 49 patterns \LF\' $
	CALCULATE, '600-DATA'(49) = X'800000000000' $
      FOR, 'I' = 48 THRU 1 BY -1, THEN $
         CALCULATE, '600-DATA'('I') = SHIFT('600-DATA'('I'+1), 1) $
      END, FOR $

      ENABLE, DIGITAL CONFIGURATION '600' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 500 NSEC $ 
              STIMULATE, '600-DATA'(1 THRU 49), ON '601-IN' $
              PROVE, (VALUE INTO '600-RESP'(1 THRU 49))
                  REF         '600-DATA'(1 THRU 49),
                  ERROR       '600-ERROR-LST'(1 THRU 49),
                  ERROR-INDEX '6-ERROR-NDX'(1 THRU 49),
                  FAULT-COUNT 'ERR-COUNT',
                  ON '601-OUT' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '600' $
	OUTPUT, C' PCR 183 WITH 49 PATTENS ACROSS 48 PINS \LF\' $
      FOR, 'I' = 1 THRU 49 BY 1, THEN $
	OUTPUT, C'WORD:','I',C' READ:','600-RESP'('I'),C' REF:','600-DATA'('I'),C'\LF\'$
	END, FOR $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERR-COUNT:','I', C' INDEX:','6-ERROR-NDX'('I'),C' ERR-WORD:','600-ERROR-LST'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
C $
 	REMOVE, ALL $
        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100020 $
        END, IF $
C $
C *******************************************************************
C * End PCR 71, 168, 183 -10/31/06
C ******************************************************************$C $
C *******************************************************************
C 11/15/06 - pcr 125 exception throws Sense. $ 
C ******************************************************************$
B $
 100030 OUTPUT, C'pcr125. \LF\' $
        IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	END, IF $
C060503 $
        MEASURE, (VALUE INTO 'PULLUPTEST'), LOGIC DATA,
	  VOLTAGE-ONE 2.3 V, VOLTAGE-ZERO 0.8 V,
	  CNX HI  
	  CHAN-22 CHAN-23 CHAN-24 CHAN-25 CHAN-26 CHAN-27 CHAN-28    	
	  CHAN-29 CHAN-30 CHAN-31 CHAN-32 CHAN-33 CHAN-34 CHAN-35   	
	  CHAN-36 CHAN-37 CHAN-38 CHAN-39 $   	
	OUTPUT, C' PULLUP TEST VALUE ','PULLUPTEST',C'\LF\' $
C060504 $
	APPLY, LOGIC DATA, VALUE B'111',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-12 CHAN-14 CHAN-16 $
C $
        ENABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
        ENABLE, TIMER 'TIMER 125' $
	  ENABLE, EVENT 'CLOCK125' $
	  ENABLE, EVENT 'PROBE125' $
        ENABLE, EVENT 'PHASE RETURN 125' $
        ENABLE, EVENT 'PHASE ASSERT 125' $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'BUSDATA')
            REF X'FFFF',
            ON 'RESPONSE1' 
	    CNX HI 
	   CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $
	END, DO $
C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
    	OUTPUT, C'PCR 125 BUSDATA = ','BUSDATA',C'REFERENCE = 0xFFFF \LF\' $
C $
	REMOVE, LOGIC DATA,
	    CNX HI 
	  CHAN-12 CHAN-14 CHAN-16 $
        OUTPUT, C'pcr125. section 060505 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	REMOVE, ALL $
C060505 $
	APPLY, LOGIC DATA, VALUE B'111',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	 CHAN-06 CHAN-08 CHAN-10 $
C $
	ENABLE, DIGITAL CONFIGURATION 'BUSTEST2'  $
C $
	ENABLE, TIMER 'TIMER 125' $
	ENABLE, EVENT 'CLOCK125' $
	ENABLE, EVENT 'PROBE125' $
	ENABLE, EVENT 'PHASE RETURN 125' $
	ENABLE, EVENT 'PHASE ASSERT 125' $
C $
	DO, TIMED DIGITAL,
	  STIM-EVENT 'PHASE RETURN 125',
	  SENSE-EVENT 'PROBE125' $
	  PROVE, (VALUE INTO 'BUSDATA')
	    REF X'0000',
	    ON 'RESPONSE2' 
	    CNX HI 
	   CHAN-48 CHAN-49 CHAN-50 CHAN-51 CHAN-52 CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $

	END, DO $
C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST2'  $
C $
    	OUTPUT, C'PCR 125 STEP 60505 BUSDATA = ','BUSDATA',C'REFERENCE = 0x0000 \LF\' $
	REMOVE, LOGIC DATA,
	  CNX HI 
	 CHAN-06 CHAN-08 CHAN-10 $
        OUTPUT, C'pcr125. section 060506 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C 060506 $
	APPLY, LOGIC DATA, VALUE B'0',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-01 $
C $
        ENABLE, DIGITAL CONFIGURATION 'BUSTEST3'  $
C $
        ENABLE, TIMER 'TIMER 125' $
	ENABLE, EVENT 'CLOCK125' $
	ENABLE, EVENT 'PROBE125' $
        ENABLE, EVENT 'PHASE RETURN 125' $
        ENABLE, EVENT 'PHASE ASSERT 125' $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'BUSDATA')
            REF X'FFFF',
            ON 'RESPONSE3' 
	    CNX HI 
	  TP21 TP22 TP23 TP24 TP25 TP26 TP27 TP28  
	  TP29 TP30 TP31 TP32 TP33 TP34 TP35 TP36 $
	END, DO $

C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST3'  $
C $
    	OUTPUT, C'PCR 125 statement 060506 BUSDATA ','BUSDATA', C' \LF\' $
	REMOVE, LOGIC DATA,
	    CNX HI 
	  CHAN-01 $

        OUTPUT, C'pcr125. section 060507 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	APPLY, LOGIC DATA, VALUE B'0',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-01 $
C $
	ENABLE, DIGITAL CONFIGURATION 'BUSTEST4'  $
C $
	ENABLE, TIMER 'TIMER 125' $
	ENABLE, EVENT 'CLOCK125' $
	ENABLE, EVENT 'PROBE125' $
	ENABLE, EVENT 'PHASE RETURN 125' $
	ENABLE, EVENT 'PHASE ASSERT 125' $
C $
	DO, TIMED DIGITAL,
	  STIM-EVENT 'PHASE RETURN 125',
	  SENSE-EVENT 'PROBE125' $
	  PROVE, (VALUE INTO 'BUSDATA')
	    REF X'0000',
	    ON 'RESPONSE4' 
	    CNX HI 
	  TP21 TP22 TP23 TP24 TP25 TP26 TP27 TP28  
	  TP29 TP30 TP31 TP32 TP33 TP34 TP35 TP36 $
	END, DO $
C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST4'  $
C $
    	OUTPUT, C'PCR 125 statement 060507 BUSDATA ','BUSDATA', C' \LF\' $
	REMOVE, LOGIC DATA,
	    CNX HI 
	  CHAN-01 $
	REMOVE, ALL $

        ENABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
        ENABLE, TIMER 'TIMER 125' $
	ENABLE, EVENT 'CLOCK125' $
	ENABLE, EVENT 'PROBE125' $
        ENABLE, EVENT 'PHASE RETURN 125' $
        ENABLE, EVENT 'PHASE ASSERT 125' $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'BUSDATA')
            REF X'7FF',
            ON 'RESPONSE1' 
	    CNX HI 
	   CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $
	END, DO $
C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
    	OUTPUT, C'PCR 125 ODD BUSDATA, PASS = ','BUSDATA',C'REFERENCE = 0x7FF \LF\' $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $
        ENABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
        ENABLE, TIMER 'TIMER 125' $
	  ENABLE, EVENT 'CLOCK125' $
	  ENABLE, EVENT 'PROBE125' $
        ENABLE, EVENT 'PHASE RETURN 125' $
        ENABLE, EVENT 'PHASE ASSERT 125' $
C $
        DO, TIMED DIGITAL,
          STIM-EVENT 'PHASE RETURN 125',
          SENSE-EVENT 'PROBE125' $
          PROVE, (VALUE INTO 'BUSDATA')
            REF X'7F3',
            ON 'RESPONSE1' 
	    CNX HI 
	   CHAN-53 CHAN-54 CHAN-55 
	   CHAN-56 CHAN-57 CHAN-58 CHAN-59 CHAN-60 CHAN-61 CHAN-62 CHAN-63 $
	END, DO $
C $
	DISABLE, TIMER 'TIMER 125' $
	DISABLE, EVENT 'CLOCK125' $
	DISABLE, EVENT 'PROBE125' $
	DISABLE, EVENT 'PHASE RETURN 125' $
	DISABLE, EVENT 'PHASE ASSERT 125' $
C $
	DISABLE, DIGITAL CONFIGURATION 'BUSTEST1'  $
    	OUTPUT, C'PCR 125 ODD BUSDATA, FAIL = ','BUSDATA',C'REFERENCE = 0x7F3 \LF\' $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100030 $
        END, IF $
C $
C *******************************************************************
C * End PCR 125 -11/15/06
C ******************************************************************$
C $
C *******************************************************************
C 11/16/06 - pcr 134 BIT NOT TOGGLING. $ 
C ******************************************************************$
B $
 100040 OUTPUT, C'pcr134. \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	************************************************************** $
C	*** STEP 301 - CYCLE A/D CONVERTER AND VERIFY LOW STATE ****** $
C	*** OF THE END-OF-CONVERSION LINE AFTER CONVERSION *********** $
C	************************************************************** $
C 060301 $
C	*** ENABLE A/D CONVERTER U14 *** $
	APPLY, 'DIGITAL STIM 134', B'100000000000', CHAN-20 CHAN-21 CHAN-22 CHAN-23 
	  CHAN-24 CHAN-25 CHAN-26 CHAN-27 CHAN-28 CHAN-29 CHAN-30  CHAN-31 $
	APPLY, 'DIGITAL STIM 134', B'111', CHAN-24 CHAN-25 CHAN-30  $
      OUTPUT, C'step 301, ADD = 7' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-20 $
      output, C'step 301, P1-1 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-20 $
      output, C'step 301, P1-1 = 1' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C	*** BEGIN A/D CONVERSION *** $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-26 $
	WAIT FOR, 0.1 SEC $
      output, C'step 301, P1-21 = 1' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-26 $
      output, C'step 301, P1-21 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C	*** ENABLE AND READ FROM BUFFER U3 *** $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-30  $
      output, C'step 301, ADD = 5' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-20 $
      output, C'step 301, P1-1 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-20 $
      output, C'step 301, P1-1 = 1' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-21 $
      output, C'step 301, P1-2 = 1, P1-5 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	*** VERIFY LOW END-OF-CONVERSION LINE *** $
	CALCULATE, 'BYTE-DATA' = B'00000001' $
	MEASURE, 'DTS MEASURE', CHAN-24 $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-21$
C	COMPARE, 'BYTE-DATA', EQ 'DISPLAY-DATA'.'EXPECTED-PATTERN' $
    	OUTPUT, C'PCR 134 BYTE DATA IS: ','BYTE-DATA', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C	************************************************************** $
C	*** STEP 302 - VERIFY HIGH STATE OF THE END-OF-CONVERSION **** $
C	*** LINE AFTER RESET OF A/D CONVERTER ************************ $
C	************************************************************** $

C 060302	 $
C	*** ENABLE A/D CONVERTER U14 *** $
	APPLY, 'DIGITAL STIM 134', B'111', CHAN-24 CHAN-25 CHAN-30  $
      output, C'step 302, ADD = 7' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-20 $
      output, C'step 302, P1-1 = 0' $
      input, go-nogo $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-20 $
      output, C'step 302, P1-1 = 1' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	*** BEGIN A/D CONVERSION *** $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-21 $
	WAIT FOR, 0.1 SEC $
      output, C'step 302, P1-21 = 1' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-26 $
      output, C'step 302, P1-21 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	*** SEND OUTPUT OF A/D CONVERTER TO DATA BUS *** $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-21$
      output, C'step 302, P1-2 = 1' $
      input, go-nogo $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-21$
      output, C'step 302, P1-2 = 0' $
C      MEASURE, (VALUE INTO 'ResultWord'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
	     CNX HI CHAN-48 CHAN-49 CHAN-50 CHAN-51
                    CHAN-52 CHAN-53 CHAN-54 CHAN-55
                    CHAN-56 CHAN-57 CHAN-58 CHAN-59
                    CHAN-60 CHAN-61 CHAN-62 CHAN-63$
C    	OUTPUT, C'PCR 134 DATA IS: ','ResultWord', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	*** ENABLE AND READ FROM BUFFER U3 *** $
	APPLY, 'DIGITAL STIM 134', B'110', CHAN-24 CHAN-25 CHAN-30  $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-20 $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-20 $
	APPLY, 'DIGITAL STIM 134', B'1', CHAN-21$

C	*** VERIFY HIGH END-OF-CONVERSION LINE *** $
	CALCULATE, 'BYTE-DATA' = B'00000000' $
	MEASURE, 'DTS MEASURE', CHAN-24 $
	APPLY, 'DIGITAL STIM 134', B'0', CHAN-21$
C	COMPARE, 'BYTE-DATA',EQ 'DISPLAY-DATA'.'EXPECTED-PATTERN' $
    	OUTPUT, C'PCR 134 BYTE DATA IS: ','BYTE-DATA', C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C	*** REMOVE POWER SOURCES *** $
	REMOVE, ALL $
	WAIT FOR, 1 SEC $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100040 $
        END, IF $
C $
C *******************************************************************
C * End PCR 134-11/16/06
C ******************************************************************$
C $	
C *******************************************************************
C 11/16/06 - pcr 126 channel not correct level . $ 
C ******************************************************************$
B $
 100050 OUTPUT, C'pcr 126. \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C	CALCULATE,'DISPLAY-DATA'.'STEP' = 201 $
C $
C ------- Set Pull-up voltage to 1v above d/s threshold -----$
C 11/15/06 commented out because dcps not available. $
C          APPLY, DC SIGNAL,
              VOLTAGE 4 V,
              CURRENT-LMT .50 A,
              CNX HI J1_29  SENSE-HI J1_29
                  LO J1_1   SENSE-LO J1_1  $
C $
          WAIT FOR, 1 SEC $
C $
          ENABLE, DIGITAL CONFIGURATION '201' $
C --------- Measure all pulled up pins. Should be Hi --------$
          SENSE, (VALUE INTO '200-RESULT1'), ON '201-OUT' $  
C $
C --------- Set Pull-up voltage to 1v below d/s threshold ---$
C 11/15/06 commented out because dcps not available. $
C            CHANGE, DC SIGNAL,
                VOLTAGE 1 V,
                CURRENT-LMT .50 A,
                CNX HI J1_29  SENSE-HI J1_29
                    LO J1_1   SENSE-LO J1_1  $
C $
            WAIT FOR, 1 SEC $
C $
C --------- Measure all pulled up pins. Should be Lo --------$
            SENSE, (VALUE INTO '200-RESULT2'), ON '201-OUT' $  
C $
          DISABLE, DIGITAL CONFIGURATION '201' $
C $
C 11/15/06 commented out because dcps not available. $
C          REMOVE, DC SIGNAL,
              CNX HI J1_29  SENSE-HI J1_29
                  LO J1_1   SENSE-LO J1_1  $
    	OUTPUT, C'SHOULD BE ALL HIGH.','200-RESULT1',C' \LF\' $
    	OUTPUT, C'SHOULD BE ALL LOW. ','200-RESULT2',C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100050 $
        END, IF $
C $
C *******************************************************************
C * End PCR 126-11/16/06
C ******************************************************************$
C $	
C *******************************************************************
C 11/17/06 - pcr 136 channel not correct level . $ 
C ******************************************************************$
B $
 100060 OUTPUT, C'pcr 136. \LF\' $
        IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	END, IF $
          ENABLE, DIGITAL CONFIGURATION 'ID-TEST'  $
            STIMULATE, B'11', ON 'CON_PINS' $
            SENSE, (VALUE INTO 'MEASDATA2'), ON 'SENSE-PINS' $
          DISABLE, DIGITAL CONFIGURATION  $
    	OUTPUT, C' STIMULATE IS 0B11  RESPONSE is ','MEASDATA2',C' \LF\' $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100060 $
        END, IF $
C $
C *******************************************************************
C * End PCR 136-11/17/06
C ******************************************************************$
C $
C *******************************************************************
C 11/17/06 - pcr 135 channel not correct level . 1/31/07- pcr 201 revisited $ 
C ******************************************************************$
B $
 100070 OUTPUT, C'pcr 135. revisit for pcr 201 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
C         *** Initialize Input Data/Ref Array                    *** $
C         *** This creates a walking-one pattern across all pins *** $
	  CALCULATE, '200-DATA'(22) = B'100000000000000000000' $
          FOR, 'I' = 21 THRU 1 BY -1, THEN $
             CALCULATE, '200-DATA'('I') = SHIFT('200-DATA'('I'+1), 1) $
          END, FOR $
C $
	   CALCULATE, 'ERR-COUNT' = 0 $
          ENABLE, DIGITAL CONFIGURATION '200-135' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '200-DATA'(1 THRU 22), ON '201-IN' $
              PROVE, (VALUE INTO '200-RESP'(1 THRU 22))
                     REF         '200-DATA'(1 THRU 22),
                     ERROR       '200-ERROR-LST'(1 THRU 22),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 22),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '201-OUT135' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '200-135' $
C $
C         FOR, 'I' = 22 THRU 1 BY -1, THEN $
	  CALCULATE, 'I' = 1 $	
	  OUTPUT,'I',C'  READBACK ','200-RESP'('I'), C'  REFERENCE ','200-DATA'('I'),
	                C'  COMPARE ','200-ERROR-LST'('I'),C' \LF\' $
C          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT ','I', C' INDEX ','ERROR-NDX'('I'),C' WORD ','200-ERROR-LST'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C         *** This creates a walking-one pattern across all pins with a ones mask of all but the bit in question*** $
        OUTPUT, C'pcr 201 section level set selection. \LF\' $
	  CALCULATE, '200-DATA'(22) = B'100000000000000000000' $
	  CALCULATE, '200-MASK'(22) = B'011111111111111111111' $
          FOR, 'I' = 21 THRU 1 BY -1, THEN $
             CALCULATE, '200-DATA'('I') = SHIFT('200-DATA'('I'+1), 1) $
             CALCULATE, '200-MASK'('I') = SHIFT('200-MASK'('I'+1), -1) $
          END, FOR $
C $
	   CALCULATE, 'ERR-COUNT' = 0 $
          ENABLE, DIGITAL CONFIGURATION '200-135' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '200-DATA'(1 THRU 22), ON '201-IN' $
              PROVE, (VALUE INTO '200-RESP'(1 THRU 22))
                     REF         '200-DATA'(1 THRU 22),
                     MASK-ONE    '200-MASK'(1 THRU 22),
                     ERROR       '200-ERROR-LST'(1 THRU 22),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 22),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '201-OUT135' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '200-135' $
C $
          FOR, 'I' = 22 THRU 1 BY -1, THEN $
	    	OUTPUT, 'I',C' READBACK ','200-RESP'('I'), C' REFERENCE ','200-DATA'('I'),
			 C' COMPARE ','200-ERROR-LST'('I'),C' MASK ONES ','200-MASK'('I'), C' \LF\' $
          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT ','I', C'  INDEX ','ERROR-NDX'('I'),C' WORD ','200-ERROR-LST'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C         *** This creates a walking-one pattern across all pins with a ones mask of all but the bit in question*** $
	  CALCULATE, '200-DATA'(22) = B'100000000000000000000' $
	  CALCULATE, '200-MASK'(22) = B'011111111111111111111' $
          FOR, 'I' = 21 THRU 1 BY -1, THEN $
             CALCULATE, '200-DATA'('I') = SHIFT('200-DATA'('I'+1), 1) $
             CALCULATE, '200-MASK'('I') = SHIFT('200-MASK'('I'+1), 1) $
          END, FOR $
C $
	   CALCULATE, 'ERR-COUNT' = 0 $
          ENABLE, DIGITAL CONFIGURATION '200-135' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '200-DATA'(1 THRU 22), ON '201-IN' $
              PROVE, (VALUE INTO '200-RESP'(1 THRU 22))
                     REF         '200-DATA'(1 THRU 22),
                     MASK-ZERO   '200-MASK'(1 THRU 22),
                     ERROR       '200-ERROR-LST'(1 THRU 22),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 22),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '201-OUT135' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '200-135' $
C $
          FOR, 'I' = 22 THRU 1 BY -1, THEN $
	    	OUTPUT, 'I',C' READBACK ','200-RESP'('I'), C' REFERENCE ','200-DATA'('I'),
			 C' COMPARE ','200-ERROR-LST'('I'),C'MASK ZEROS ','200-MASK'('I'), C' \LF\' $
          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT ','I', C'  INDEX ','ERROR-NDX'('I'),C' WORD ','200-ERROR-LST'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

C         *** This creates a walking-one pattern across all pins *** $
	  CALCULATE, '222-DATA'(12) = B'01111111111' $
          FOR, 'I' = 11 THRU 1 BY -1, THEN $
C             CALCULATE, '222-DATA'('I') = SHIFT('222-DATA'('I'+1), 1) $
             CALCULATE, '222-DATA'('I') = B'11111111111' $
          END, FOR $
             CALCULATE, '222-DATA'(3) = B'00000000000' $
             CALCULATE, '222-DATA'(5) = B'01010000101' $
             CALCULATE, '222-DATA'(6) = B'00100010001' $
C $
         CALCULATE, 'ERR-COUNT' = 0 $

          ENABLE, DIGITAL CONFIGURATION '222' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '222-DATA'(1 THRU 12), ON '222-IN' $
              PROVE, (VALUE INTO '222-RESP'(1 THRU 12))
                     REF         '222-DATA'(1 THRU 12),
		     SAVE-COMP   '222-SVCP-LST'(1 THRU 12),
                     ERROR       '222-ERROR-LST'(1 THRU 12),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 12),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '222-OUT' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '222' $
C $
          FOR, 'I' = 1 THRU 12 BY 1, THEN $
	    	OUTPUT, 'I',C'READBACK IS ','222-RESP'('I'),C' REFERENCE IS ','222-DATA'('I'),
	 	            C' SAVE COMPARE IS ','222-SVCP-LST'('I'), $
          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT IS ','I', C'COMPARE VALUE IS ','222-ERROR-LST'('I'), C' INDEX IS ','ERROR-NDX'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

             CALCULATE, '222-DATA'(3) = B'11111111111' $
             CALCULATE, '222-DATA'(5) = B'11111111111' $
             CALCULATE, '222-DATA'(6) = B'11111111111' $
             CALCULATE, '222-DATA'(12) = B'11111111111' $
C $
         CALCULATE, 'ERR-COUNT' = 0 $

          ENABLE, DIGITAL CONFIGURATION '222' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '222-DATA'(1 THRU 12), ON '222-IN' $
              PROVE, (VALUE INTO '222-RESP'(1 THRU 12))
                     REF         '222-DATA'(1 THRU 12),
		     SAVE-COMP   '222-SVCP-LST'(1 THRU 12),
                     ERROR       '222-ERROR-LST'(1 THRU 12),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 12),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '222-OUT' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '222' $
C $
          FOR, 'I' = 1 THRU 12 BY 1, THEN $
	    	OUTPUT, 'I',C'READBACK IS ','222-RESP'('I'),C' REFERENCE IS ','222-DATA'('I'),
	 	            C' SAVE COMPARE IS ','222-SVCP-LST'('I'), $
          END, FOR $
	  OUTPUT, C'FAULT COUNT IS ','ERR-COUNT',C' \LF\' $
	  IF, 'ERR-COUNT' GT 0, THEN $
          FOR, 'I' = 1 THRU 'ERR-COUNT' BY 1, THEN $
	    	OUTPUT, C'ERROR COUNT IS ','I', C'COMPARE VALUE IS ','222-ERROR-LST'('I'), C' INDEX IS ','ERROR-NDX'('I'),C' \LF\' $
          END, FOR $
	  END, IF $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100070 $
        END, IF $
C $
C *******************************************************************
C * End PCR 135-11/17/06
C ******************************************************************$
C $
C *******************************************************************
C 11/26/06 - pcr 139,140,141 channel(s) not correct level . $
C 12/18/06 - pcr 163, 164 165 channels not responding and using sense to measure $ 
C ******************************************************************$
B $
 100080	OUTPUT, C'pcr 164. sense and sense from an array  \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
 
C          FOR, 'CHOICE' = 1 THRU 2 BY 1, THEN $
          ENABLE, DIGITAL CONFIGURATION '701' $

C --------- Measure all pins. ------------------------------$
            SENSE, (VALUE INTO '701T-RESULT'(1)), ON '701T-OUT' $  
            SENSE, (VALUE INTO '701E-RESULT'(1)), ON '701E-OUT' $  
C $
C --------- Measure all pins. ------------------------------$
            SENSE, (VALUE INTO '701T-RESULT'(2)), ON '701T-OUT' $  
            SENSE, (VALUE INTO '701E-RESULT'(2)), ON '701E-OUT' $  
C $
            WAIT FOR, 1 SEC $
C $
C --------- Measure all pins. ------------------------------$
            SENSE, (VALUE INTO '701T-RESULT'(3)), ON '701T-OUT' $  
            SENSE, (VALUE INTO '701E-RESULT'(3)), ON '701E-OUT' $
C $ 
          FOR, 'I' = 1 THRU 3 BY 1, THEN $
	  OUTPUT, C'Step','I', C' 701T SENSE ','701T-RESULT'('I'), C'701E SENSE','701E-RESULT'('I'),C' \LF\' $
          END, FOR $
         DISABLE, DIGITAL CONFIGURATION '701' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	OUTPUT, C'pcr 165. with six bit prove \LF\' $
	ENABLE, DIGITAL CONFIGURATION 'PULL-UP1' $
        STIMULATE, X'3F', ON 'VCRU_IN1' $
        PROVE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN1') REF X'3F',
            ON 'RESPONSE165' CNX HI CHAN-02 CHAN-11 CHAN-32 CHAN-54 CHAN-73 CHAN-118  $
	DISABLE, DIGITAL CONFIGURATION 'PULL-UP1' $
	OUTPUT, C' pcr 165 response pattern \LF\  ','DISPLAY-DATA'.'MEASURED-PATTERN1',C'\LF\' $
	REMOVE, ALL $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $ 
	OUTPUT, C'pcr 139. step 60503 with one word stim prove \LF\' $
	   ENABLE, DIGITAL CONFIGURATION 'MOD5_DIG'  $
	    STIMULATE, HIZ, ON 'GCRU_IN' $
	    STIMULATE, X'0000', ON 'VCRU_IN' $
            PROVE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN') 
                    REF X'0000',
	     	    SAVE-COMP 'VCRU_ERR1', ON 'GCRU_OUT' $
	OUTPUT, C' pcr 139 step 60503 \LF\ response pattern ','DISPLAY-DATA'.'MEASURED-PATTERN1',C'\LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	    STIMULATE, X'FFFF', ON 'VCRU_IN' $
            PROVE, (VALUE INTO 'DISPLAY-DATA'.'MEASURED-PATTERN') 
                    REF X'FFFF',
	      SAVE-COMP 'VCRU_ERR1', ON 'GCRU_OUT' $
	 OUTPUT, C' pcr 139 step 60504 \LF\ response pattern ','DISPLAY-DATA'.'MEASURED-PATTERN1',C'\LF\' $
	 OUTPUT, C' reference 0xFFFF 60504  compared value','VCRU_ERR1', C'\LF\' $

          IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 DISABLE, DIGITAL CONFIGURATION 'MOD5_DIG'  $
	 END, IF $
	REMOVE, ALL $
C $
C *******************************************************************
C 12/1/06 - pcr 146 channel(s) not driving . $ 
C ******************************************************************$
C $
        OUTPUT, C'pcr 146. \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
          APPLY, LOGIC DATA, 
            VALUE X'1',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.0 V,
            CNX HI
            P1-2  $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, LOGIC DATA, 
            CNX HI
            P1-2  $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100080 $
        END, IF $
C	GO TO, STEP 001050 $

C $
C *******************************************************************
C * End PCR 139,140,141, new -11/26/06
C ******************************************************************$
C $
C *******************************************************************
C 12/12/06 - pcr 159, 145 156 cnx field variable not connecting . $ 
C ******************************************************************$
B $
 100090 OUTPUT, C'pcr 159(99). \LF\' $
C	GO TO, STEP  100096 $
	  APPLY, LOGIC DATA, VALUE B'1',
               VOLTAGE-ONE 5.0 V,
               VOLTAGE-ZERO 0.2 V,
               CNX HI CHAN-158 $

	 MEASURE, (VALUE INTO 'BYTE-DATA'), LOGIC DATA,
                   VOLTAGE-ONE 3.5 V,
                   VOLTAGE-ZERO 0.5 V,
                   CNX HI ID_P1-224 ID_P1-225 ID_P1-226 ID_P1-222
			  ID_P1-228 $

       OUTPUT, C' BYTE DATA','BYTE-DATA',C'\LF\' $
       OUTPUT, C'pcr 99 section B CHECKING stim 1 bit, readback 5 BITS', 'BYTE-DATA',C' OUTPUTS \LF\' $
C $
          REMOVE, LOGIC DATA, 
            VALUE B'1',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
            CNX HI CHAN-158 $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
	  APPLY, LOGIC DATA, VALUE B'0',
               VOLTAGE-ONE 5.0 V,
               VOLTAGE-ZERO 0.2 V,
               CNX HI CHAN-158 $

       OUTPUT, C'pcr 99 section B CHECKING stim 0 bit, readback 5 BITS', 'BYTE-DATA',C' OUTPUTS \LF\' $

          REMOVE, LOGIC DATA, 
            VALUE B'0',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
            CNX HI CHAN-158 $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
	REMOVE,ALL $

C pcr 156 step 52006 $
	OUTPUT, C'pcr 156.step 52006. loop this 10 times.  \LF\' $

	FOR, 'I' = 1 THRU 3, THEN $
C $
	OUTPUT, C'pcr 156.step 52006. PASS.','I',C'\LF\' $
          ENABLE, DIGITAL CONFIGURATION 'CABLETEST1'  $

          ENABLE, TIMER 'TIMER 1' $
	  ENABLE, EVENT 'CLOCK1A' $
	  ENABLE, EVENT 'PROBE1' $
          ENABLE, EVENT 'PHASE RETURN 1' $
          ENABLE, EVENT 'PHASE ASSERT 1' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN 1',
            SENSE-EVENT 'PROBE1' $
            SENSE, (VALUE INTO 'W1CABLE'), ON 'W1STIM' $
	  END, DO $
C $
	  DISABLE, TIMER 'TIMER 1' $
	  DISABLE, EVENT 'CLOCK1A' $
	  DISABLE, EVENT 'PROBE1' $
	  DISABLE, EVENT 'PHASE RETURN 1' $
	  DISABLE, EVENT 'PHASE ASSERT 1' $
C $
	DISABLE, DIGITAL CONFIGURATION 'CABLETEST1'  $
        OUTPUT, C'Value put into W1CABLE = ', 'W1CABLE', C'\LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	REMOVE,ALL $
C  $
	OUTPUT, C'pcr 156.step 060501  \LF\' $
	APPLY, LOGIC DATA, VALUE B'0011111111',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-44 CHAN-45 CHAN-89 CHAN-97 CHAN-96
	  CHAN-95 CHAN-94 CHAN-93 CHAN-92 CHAN-91 $
	FOR, 'I' = 1 THRU 16, THEN $
	  APPLY, LOGIC DATA, VALUE B'0',
	    VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	    CNX HI 
	    CHAN-56 $
	  APPLY, LOGIC DATA, VALUE B'1',
	    VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	    CNX HI 
	    CHAN-56 $
	END, FOR $
	REMOVE, LOGIC DATA, 
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-44 CHAN-45 CHAN-89 CHAN-97 CHAN-96
	  CHAN-95 CHAN-94 CHAN-93 CHAN-92 CHAN-91 $
	REMOVE, LOGIC DATA, 
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-56 $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
	OUTPUT, C'pcr 156.step 060502  \LF\' $
	APPLY, LOGIC DATA, VALUE B'1111111111',
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-44 CHAN-45 CHAN-89 CHAN-97 CHAN-96
	  CHAN-95 CHAN-94 CHAN-93 CHAN-92 CHAN-91 $
	FOR, 'I' = 1 THRU 16, THEN $
	  APPLY, LOGIC DATA, VALUE B'0',
	    VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	    CNX HI 
	    CHAN-56 $
	  APPLY, LOGIC DATA, VALUE B'1',
	    VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	    CNX HI 
	    CHAN-56 $
	END, FOR $

	REMOVE, LOGIC DATA,
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-44 CHAN-45 CHAN-89 CHAN-97 CHAN-96
	  CHAN-95 CHAN-94 CHAN-93 CHAN-92 CHAN-91 $
	REMOVE, LOGIC DATA,
	  VOLTAGE-ONE 5.0 V, VOLTAGE-ZERO 0.0 V,
	  CNX HI 
	  CHAN-56 $


         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	REMOVE, ALL $
C $
B $
 100095	OUTPUT, C'pcr 145. \LF\' $
        CALCULATE, '400-RESULT1' = X'000000000000000' $
        FOR, 'I' = 1 THRU 5, THEN $
C SHOULD BE 59. $
C --------- Measure pin. Should be Hi -----------------$
         MEASURE, (VALUE INTO '400-RESULT'), LOGIC DATA,
              VOLTAGE-ONE 4.0 V,
              VOLTAGE-ZERO 0.8 V,
              CNX HI '401-CNX'('I') $
 	 OUTPUT, C',MEASURED VALUE IS ','400-RESULT',C' \LF\' $
         CALCULATE, '400-RESULT1' = INSERT('400-RESULT',
                                       DELETE('400-RESULT1','I',1),'I'-1) $
        END, FOR $
C $
	OUTPUT, C'pcr 145. pcr 165 second half \LF\' $
	ENABLE, DIGITAL CONFIGURATION '400' $
C  --------- Measure all pins. Should be Lo -----------------$
            SENSE, (VALUE INTO '400-RESULT2'), ON '400-OUT' $
	    OUTPUT, C'SENSE READBACK IS ','400-RESULT2',C'LOOP COUNT IS','I',C' \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
          DISABLE, DIGITAL CONFIGURATION '400' $
C $
	REMOVE, ALL $
C 10/12/06 added code for pcr 168 and 51 check. $
B $
 100096	OUTPUT, C'pcr 168 (51). \LF\' $
        APPLY, LOGIC DATA, 
            VALUE X'FEDC89AB',
            VOLTAGE-ONE 5.0 V,
            VOLTAGE-ZERO 0.2 V,
  	      CNX HI CHAN-63 CHAN-62 CHAN-61 CHAN-60
		     CHAN-59 CHAN-58 CHAN-57 CHAN-56
		     CHAN-55 CHAN-54 CHAN-53 CHAN-52
		     CHAN-51 CHAN-50 CHAN-49 CHAN-48
		     CHAN-47 CHAN-46 CHAN-45 CHAN-44
		     CHAN-43 CHAN-42 CHAN-41 CHAN-40
		     CHAN-15 CHAN-13 CHAN-11 CHAN-09
		     CHAN-07 CHAN-05 CHAN-03 CHAN-01 $

          ENABLE, DIGITAL CONFIGURATION 'J1DIGITAL'  $

          ENABLE, TIMER 'TIMER PCR51' $
	  ENABLE, EVENT 'CLOCK PCR51' $
	  ENABLE, EVENT 'PROBE PCR51' $
          ENABLE, EVENT 'PHASE RETURN PCR51' $
          ENABLE, EVENT 'PHASE ASSERT PCR51' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN PCR51',
            SENSE-EVENT 'PROBE PCR51' $

            SENSE, (VALUE INTO 'DIGRESP'(1 THRU 10)),
              ON 'RESPJ1-5'
  	      CNX HI 
		     CHAN-31 CHAN-30 CHAN-29 CHAN-28
		     CHAN-27 CHAN-26 CHAN-25 CHAN-24
		     CHAN-23 CHAN-22 CHAN-21 CHAN-20
		     CHAN-19 CHAN-18 CHAN-17 CHAN-16
		     CHAN-14 CHAN-12 CHAN-10 CHAN-08
		     CHAN-06 CHAN-04 CHAN-02 CHAN-00 $
          END, DO $
C $
          DISABLE, TIMER 'TIMER PCR51' $
          DISABLE, EVENT 'CLOCK PCR51' $
	  DISABLE, EVENT 'PROBE PCR51' $
          DISABLE, EVENT 'PHASE RETURN PCR51' $
          DISABLE, EVENT 'PHASE ASSERT PCR51' $

          DISABLE, DIGITAL CONFIGURATION 'J1DIGITAL'  $
C $
	OUTPUT, C'pcr 51 \LF\ CHECKING READBACK OF ARRAY (10) OF 32 BIT WORDS.  \LF\' $
	FOR, 'resultIndex' = 1 THRU 10, THEN $
	OUTPUT, C'INDEX ','resultIndex',C'  VALUE READ=','DIGRESP'('resultIndex'),C'\LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

          ENABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $

          ENABLE, TIMER 'TIMER PCR51' $
	  ENABLE, EVENT 'CLOCK PCR51' $
	  ENABLE, EVENT 'PROBE PCR51' $
          ENABLE, EVENT 'PHASE RETURN PCR51' $
          ENABLE, EVENT 'PHASE ASSERT PCR51' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN PCR51',
            SENSE-EVENT 'PROBE PCR51' $

               SENSE, (VALUE INTO 'DIGRESP'(1 THRU 10)),
                ON 'RESPJ2-4'
                CNX HI CHAN-188 CHAN-189 CHAN-190 CHAN-191 $
         END, DO $
C $
          DISABLE, TIMER 'TIMER PCR51' $
          DISABLE, EVENT 'CLOCK PCR51' $
	  DISABLE, EVENT 'PROBE PCR51' $
          DISABLE, EVENT 'PHASE RETURN PCR51' $
          DISABLE, EVENT 'PHASE ASSERT PCR51' $

          DISABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $
C $
	OUTPUT, C'pcr 168 READBACK OF ARRAY OF x10  4 BIT WORDS \LF\'$
	FOR, 'I'=1 THRU 10, THEN $
	OUTPUT, C'WORD ','I',C'  VALUE ','DIGRESP'('I'),C' \LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

          ENABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $

          ENABLE, TIMER 'TIMER PCR51' $
	  ENABLE, EVENT 'CLOCK PCR51' $
	  ENABLE, EVENT 'PROBE PCR51' $
          ENABLE, EVENT 'PHASE RETURN PCR51' $
          ENABLE, EVENT 'PHASE ASSERT PCR51' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN PCR51',
            SENSE-EVENT 'PROBE PCR51' $

               SENSE, (VALUE INTO 'DIGRESP'(1 THRU 10)),
                ON 'RESPJ2-6'
               CNX HI CHAN-187 CHAN-186 CHAN-185 CHAN-184 CHAN-183 CHAN-182 $
         END, DO $
C $
          DISABLE, TIMER 'TIMER PCR51' $
          DISABLE, EVENT 'CLOCK PCR51' $
	  DISABLE, EVENT 'PROBE PCR51' $
          DISABLE, EVENT 'PHASE RETURN PCR51' $
          DISABLE, EVENT 'PHASE ASSERT PCR51' $

          DISABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $
C $
	OUTPUT, C'pcr 168 READBACK OF ARRAY OF x10  6 BIT WORDS \LF\'$
	FOR, 'I'=1 THRU 10, THEN $
	OUTPUT, C'WORD ','I',C'  VALUE ','DIGRESP'('I'),C' \LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

          ENABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $

          ENABLE, TIMER 'TIMER PCR51' $
	  ENABLE, EVENT 'CLOCK PCR51' $
	  ENABLE, EVENT 'PROBE PCR51' $
          ENABLE, EVENT 'PHASE RETURN PCR51' $
          ENABLE, EVENT 'PHASE ASSERT PCR51' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN PCR51',
            SENSE-EVENT 'PROBE PCR51' $

               SENSE, (VALUE INTO 'DIGRESP'(1 THRU 10)),
                ON 'RESPJ2-8'
            	CNX HI CHAN-181 CHAN-180 CHAN-179 CHAN-178
		   CHAN-177 CHAN-176 CHAN-175 CHAN-174 CHAN-173 $
         END, DO $
C $
          DISABLE, TIMER 'TIMER PCR51' $
          DISABLE, EVENT 'CLOCK PCR51' $
	  DISABLE, EVENT 'PROBE PCR51' $
          DISABLE, EVENT 'PHASE RETURN PCR51' $
          DISABLE, EVENT 'PHASE ASSERT PCR51' $

          DISABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $
C $
	OUTPUT, C'pcr 168 READBACK OF ARRAY OF x10  9 BIT WORDS \LF\'$
	FOR, 'I'=1 THRU 10, THEN $
	OUTPUT, C'WORD ','I',C'  VALUE ','DIGRESP'('I'),C' \LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

          ENABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $

          ENABLE, TIMER 'TIMER PCR51' $
	  ENABLE, EVENT 'CLOCK PCR51' $
	  ENABLE, EVENT 'PROBE PCR51' $
          ENABLE, EVENT 'PHASE RETURN PCR51' $
          ENABLE, EVENT 'PHASE ASSERT PCR51' $
C $
          DO, TIMED DIGITAL,
            STIM-EVENT 'PHASE RETURN PCR51',
            SENSE-EVENT 'PROBE PCR51' $

               SENSE, (VALUE INTO 'DIGRESP'(1 THRU 10)),
                ON 'RESPJ2-9'
            	CNX HI CHAN-172 $
         END, DO $
C $
          DISABLE, TIMER 'TIMER PCR51' $
          DISABLE, EVENT 'CLOCK PCR51' $
	  DISABLE, EVENT 'PROBE PCR51' $
          DISABLE, EVENT 'PHASE RETURN PCR51' $
          DISABLE, EVENT 'PHASE ASSERT PCR51' $

          DISABLE, DIGITAL CONFIGURATION 'J2DIGNOLOAD'  $
C $
	OUTPUT, C'pcr 168 READBACK OF ARRAY OF x10  1 BIT WORDS \LF\'$
	FOR, 'I'=1 THRU 10, THEN $
	OUTPUT, C'WORD ','I',C'  VALUE ','DIGRESP'('I'),C' \LF\' $
	END, FOR $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

        REMOVE, LOGIC DATA, 
        CNX HI CHAN-63 CHAN-62 CHAN-61 CHAN-60
 	       CHAN-59 CHAN-58 CHAN-57 CHAN-56
	       CHAN-55 CHAN-54 CHAN-53 CHAN-52
	       CHAN-51 CHAN-50 CHAN-49 CHAN-48
	       CHAN-47 CHAN-46 CHAN-45 CHAN-44
	       CHAN-43 CHAN-42 CHAN-41 CHAN-40
	       CHAN-15 CHAN-13 CHAN-11 CHAN-09
	       CHAN-07 CHAN-05 CHAN-03 CHAN-01 $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

 100097 REMOVE, ALL $

        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100090 $
        END, IF $
	GO TO, STEP 100100 $
C $
C *******************************************************************
C * End PCR 145 variable cnx field -12/12/06
C ******************************************************************$
C $
C *******************************************************************
C 01/21/07 - pcr 193 incorrect drive levels. $ 
C ******************************************************************$
B $
 100100 OUTPUT, C'pcr 193. \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
         ENABLE, DIGITAL CONFIGURATION '901' $
C        CONNECT, SHORT, CNX J1_9 CH168 $
	 OUTPUT, C'STAT 60901 STIM CHANNEL 168 SENSE J1_9 \LF\' $
         STIMULATE, ONE, ON '901-IN' CNX HI CHAN-168 $
         SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-118 $
         STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-168 $
C        DISCONNECT, SHORT, CNX J1_9 CH168 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60902 STIM CHANNEL 168 SENSE CHANNEL 167\LF\' $
C        CONNECT, SHORT, CNX CH167 CH168 $
C        CONNECT, SHORT, CNX GCH167 SHIELD1 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-168 $
        SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-167 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-168 $
C            DISCONNECT, SHORT, CNX CH167 CH168 $
C            DISCONNECT, SHORT, CNX GCH167 SHIELD1 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60903 STIM CHANNEL 167 SENSE J1_68\LF\' $
C        CONNECT, SHORT, CNX CH167 J1_51 $
C        CONNECT, SHORT, CNX GCH167 SHIELD1 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-167 $
        SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-77 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-167 $
C        DISCONNECT, SHORT, CNX CH167 J1_51 $
C        DISCONNECT, SHORT, CNX GCH167 SHIELD1 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60904 STIM CHANNEL 168 SENSE J1_151\LF\' $
C        CONNECT, SHORT, CNX CH168 J1_47 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-168 $
        SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-151 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-168 $
C        DISCONNECT, SHORT, CNX CH168 J1_47 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60905 STIM CHANNEL 169 SENSE CHANNEL J1_9\LF\' $
C        CONNECT, SHORT, CNX CH169 J1_25 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-169 $
        SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-118 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-169 $
C        DISCONNECT, SHORT, CNX CH169 J1_25 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60906 STIM J1_7 SENSE CHANNEL J1_9\LF\' $
C        CONNECT, SHORT, CNX J1_8 J1_9 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-114 $
        SENSE, (VALUE INTO '900-RESULT'), ON '901-OUT' CNX HI CHAN-118 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-114 $
C        DISCONNECT, SHORT, CNX J1_8 J1_9 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60907 STIM J2_ SENSE CHANNEL 168\LF\' $
C        CONNECT, SHORT, CNX J4_ CH168 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-25 $
        SENSE, (VALUE INTO '900-RESULT'), ON '907-OUT' CNX HI CHAN-168 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-25 $
C        DISCONNECT, SHORT, CNX J4_ CH168 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60908 STIM J2_ SENSE CHANNEL 168\LF\' $
C        CONNECT, SHORT, CNX J3_ CH168 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-25 $
        SENSE, (VALUE INTO '900-RESULT'), ON '907-OUT' CNX HI CHAN-168 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-25 $
C        DISCONNECT, SHORT, CNX J3_ CH168 $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60909 STIM CHANNEL J5_ SENSE CHANNEL 168\LF\' $
C        CONNECT, SHORT, CNX J6_ CH168 $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-24 $
        SENSE, (VALUE INTO '900-RESULT'), ON '907-OUT' CNX HI CHAN-168 $
        STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-24 $
C        DISCONNECT, SHORT, CNX J6_ CH168 $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	OUTPUT, C'STAT 60910 STIM J1_9, J1_24\LF\' $
        STIMULATE, ONE, ON '901-IN' CNX HI CHAN-118 $
        STIMULATE, ZERO, ON '910-IN' CNX HI CHAN-100 $
C            VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
                DC SIGNAL,
                NOM 7.0 V LL 6.80 V UL 7.20 V,
                VOLTAGE RANGE .0000001 V TO 10 V,
                CNX HI J1_25 LO J1_26  $
C $
            WAIT FOR, .1 SEC $
            STIMULATE, HIZ, ON '901-IN' CNX HI CHAN-118 $
            STIMULATE, HIZ, ON '910-IN' CNX HI CHAN-100 $

        DISABLE, DIGITAL CONFIGURATION '901' $
C $
	OUTPUT, C'pcr 193 at STMT 60460  SENSE CHANNELS thru loop and then as whole. 168\LF\' $

C 060460   CALCULATE,'DISPLAY-DATA'.'STEP' = 460 $
C $
          CALCULATE, '460-RESULT1' = B'0000000' $
C $
          FOR, 'I' = 1 THRU 7, THEN $
C $
            ENABLE, DIGITAL CONFIGURATION '460' $
C $
              IF, 'I' EQ 1, THEN $
               SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                   CNX HI  CHAN-83 $
              ELSE $
               IF, 'I' EQ 2, THEN $
                SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                     CNX HI  CHAN-81 $
               ELSE $
                IF, 'I' EQ 3, THEN $
                 SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                     CNX HI  CHAN-97 $
                ELSE $
                 IF, 'I' EQ 4, THEN $
                  SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                      CNX HI  CHAN-115 $
                 ELSE $
                  IF, 'I' EQ 5, THEN $
                   SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                       CNX HI  CHAN-125 $
                  ELSE $
                   IF, 'I' EQ 6, THEN $
                    SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                        CNX HI  CHAN-80 $
                   ELSE $
                    IF, 'I' EQ 7, THEN $
                     SENSE, (VALUE INTO '400-RESULT'), ON '460-OUT'
                         CNX HI  CHAN-72 $
                    END, IF $
                   END, IF $
                  END, IF $
                 END, IF $
                END, IF $
               END, IF $
              END, IF $
C $
            DISABLE, DIGITAL CONFIGURATION '460' $
C $
            CALCULATE, '460-RESULT1' = INSERT('400-RESULT',
                                              DELETE('460-RESULT1','I',1),'I'-1) $
          END, FOR $
C $
          ENABLE, DIGITAL CONFIGURATION '460' $
C --------- Measure all pins. Should be Hi -----------------$
            SENSE, (VALUE INTO '460-RESULT2'), ON '460-OUT' $
C $
          DISABLE, DIGITAL CONFIGURATION '460' $
C $



        IF, 'E-E' EQ FALSE, THEN $
	    OUTPUT, C' RETURN TO MENU ???\LF\'$
            OUTPUT, C' T - MENU '$
	    OUTPUT, C' F - RETEST '$
            INPUT, GO-NOGO $
        	IF, GO, THEN $ 
            		GO TO, STEP 001050 $
        	END, IF $
		GO TO, STEP 100100 $
        END, IF $
	GO TO, STEP 100110 $
C $
C *******************************************************************
C * End PCR 145 variable cnx field -12/12/06
C ******************************************************************$
C $
C *******************************************************************
C 01/31/07 - pcr 201,202 incorrect drive level sets. $ 
C ******************************************************************$
B $
 100110 OUTPUT, C'pcr 201. fault LAV25-ID at step 60150 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
        ENABLE, DIGITAL CONFIGURATION '148' $
C $
         STIMULATE, ONE, ON '148-OUT' CNX HI CHAN-190 $
         STIMULATE, ZERO, ON '148E-OUT' CNX HI CHAN-142 $
C $
C         VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
          DC SIGNAL,
          LL 'DISPLAY-DATA'.'L-LIM' V UL 'DISPLAY-DATA'.'U-LIM' V,
          VOLTAGE MAX 66 V,
         CNX HI J1_5 LO J1_32  $
C $
         STIMULATE, ZERO, ON '148-OUT' CNX HI CHAN-190 $
         STIMULATE, ONE, ON '148E-OUT' CNX HI CHAN-142 $
        DISABLE, DIGITAL CONFIGURATION '148' $
C $
	REMOVE, ALL $
 100111 OUTPUT, C'pcr 202. fault LAV25-ID at step 60239 & 60241 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
          ENABLE, DIGITAL CONFIGURATION '233' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '233-DATA'(1 THRU 5), ON '233-IN' $
              PROVE, (VALUE INTO '233-RESP'(1 THRU 5))
                     REF         '233-DATA'(1 THRU 5),
                     ERROR       '233-ERROR-LST'(1 THRU 5),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 5),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '233-OUT' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '233' $
C $
C 060239   CALCULATE, 'DISPLAY-DATA'.'STEP' = 239,
                     'DISPLAY-DATA'.'U-LIM' = 23.2,
                     'DISPLAY-DATA'.'L-LIM' = 22.5,
                     'DISPLAY-DATA'.'UNITS' = C'DCV' $
C $
C         *** CONNECT OC BUFFER U3.12/R4 TO J1.37 *** $
C          CONNECT, SHORT, CNX J1_37B J1_37 $
C $
          ENABLE, DIGITAL CONFIGURATION '238' $
          STIMULATE, ZERO, ON '238-IN' CNX HI CHAN-23 $
C $
C          APPLY, DC SIGNAL,
             VOLTAGE 28 V,
             CURRENT-LMT .075 A,
             CNX HI J1_37 SENSE-HI J1_37
                 LO J1_45 SENSE-LO J1_45 $
C $
C          VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
             DC SIGNAL,
             LL 'DISPLAY-DATA'.'L-LIM' V UL 'DISPLAY-DATA'.'U-LIM' V,
             VOLTAGE MAX 66 V,
             CNX HI J1_37 LO J1_45 $
C $
          DISABLE, DIGITAL CONFIGURATION '238' $
C $
C          REMOVE, DC SIGNAL,
             CNX HI J1_37 SENSE-HI J1_37
                 LO J1_45 SENSE-LO J1_45 $
C $
C         *** DISCONNECT OC BUFFER U3.12/R4 TO J1.37 *** $
C          DISCONNECT, SHORT, CNX J1_37B J1_37 $
C $
        OUTPUT, C'pcr 202. fault LAV25-ID at step 60240 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C 060240   CALCULATE, 'DISPLAY-DATA'.'STEP' = 240,
                     'DISPLAY-DATA'.'U-LIM' = 28.2,
                     'DISPLAY-DATA'.'L-LIM' = 27.8,
                     'DISPLAY-DATA'.'UNITS' = C'DCV' $
C $
C         *** CONNECT OC BUFFER U3.8/R3 TO J1.30 *** $
C          CONNECT, SHORT, CNX J1_30B J1_30 $
C $
          ENABLE, DIGITAL CONFIGURATION '238' $
          STIMULATE, ONE, ON '238-IN' CNX HI CHAN-23 $
C $
C          APPLY, DC SIGNAL,
             VOLTAGE 28 V,
             CURRENT-LMT .075 A,
             CNX HI J1_30 SENSE-HI J1_30
                 LO J1_45 SENSE-LO J1_45 $
C $
C          VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
             DC SIGNAL,
             LL 'DISPLAY-DATA'.'L-LIM' V UL 'DISPLAY-DATA'.'U-LIM' V,
             VOLTAGE MAX 66 V,
             CNX HI J1_30 LO J1_45 $
C $
          DISABLE, DIGITAL CONFIGURATION '238' $
C $
C          REMOVE, DC SIGNAL,
             CNX HI J1_30 SENSE-HI J1_30
                 LO J1_45 SENSE-LO J1_45 $
C $
C         *** DISCONNECT OC BUFFER U3.8/R3 TO J1.30 *** $
C          DISCONNECT, SHORT, CNX J1_30B J1_30 $
C $
        OUTPUT, C'pcr 202. fault LAV25-ID at step 60241 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C 060241   CALCULATE, 'DISPLAY-DATA'.'STEP' = 241,
                     'DISPLAY-DATA'.'U-LIM' = 23.2,
                     'DISPLAY-DATA'.'L-LIM' = 22.5,
                     'DISPLAY-DATA'.'UNITS' = C'DCV' $
C $
C         *** CONNECT OC BUFFER U3.8/R3 TO J1.30 *** $
C          CONNECT, SHORT, CNX J1_30B J1_30 $
C $
          ENABLE, DIGITAL CONFIGURATION '238' $
          STIMULATE, ZERO, ON '238-IN' CNX HI CHAN-23 $
C $
C          APPLY, DC SIGNAL,
             VOLTAGE 28 V,
             CURRENT-LMT .075 A,
             CNX HI J1_30 SENSE-HI J1_30
                 LO J1_45 SENSE-LO J1_45 $
C $
C          VERIFY, (VOLTAGE INTO 'DISPLAY-DATA'.'MEASURED-VALUE'),
             DC SIGNAL,
             LL 'DISPLAY-DATA'.'L-LIM' V UL 'DISPLAY-DATA'.'U-LIM' V,
             VOLTAGE MAX 66 V,
             CNX HI J1_30 LO J1_45 $
C $
          DISABLE, DIGITAL CONFIGURATION '238' $
C $
C          REMOVE, DC SIGNAL,
             CNX HI J1_30 SENSE-HI J1_30
                 LO J1_45 SENSE-LO J1_45 $
C $
C         *** DISCONNECT OC BUFFER U3.8/R3 TO J1.30 *** $
C          DISCONNECT, SHORT, CNX J1_30B J1_30 $
C $
       IF, 'E-E' EQ FALSE, THEN $
        OUTPUT, C' RETURN TO MENU ???\LF\'$
        OUTPUT, C' T - MENU '$
        OUTPUT, C' F - RETEST '$
        INPUT, GO-NOGO $
        IF, GO, THEN $ 
	 GO TO, STEP 001050 $
        END, IF $
        GO TO, STEP 100110 $
       END, IF $
       GO TO, STEP 100120 $
C $
C *******************************************************************
C * End PCR 201, 202 Level sets incorrect 1/31/07 
C ******************************************************************$
C $
C *******************************************************************
C 02/07/07 - pcr 200 exceptions on pin resets $ 
C ******************************************************************$
B $
 100120 OUTPUT, C'pcr 200. fault  PTF_TPS63_ID at step 50202 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
	ENABLE, DIGITAL CONFIGURATION 'J1T1CONFIG'  $
C $
        ENABLE, TIMER 'TIMER 1' $
	ENABLE, EVENT 'CLOCK1A' $
	ENABLE, EVENT 'PROBE1' $
        ENABLE, EVENT 'PHASE RETURN 1' $
        ENABLE, EVENT 'PHASE ASSERT 1' $
C $
	DO, TIMED DIGITAL,
	  STIM-EVENT 'PHASE RETURN 1',
	  SENSE-EVENT 'PROBE1' $
	  PROVE, (VALUE INTO 'TESTJ1')
	   REF X'00000000000000000000000000000000000000',
	    ON 'J1TEST1' 
	    CNX HI 
	CHAN-167 CHAN-166 CHAN-165 CHAN-164 CHAN-163 CHAN-162 CHAN-161 CHAN-160
	CHAN-159 CHAN-158 CHAN-157 CHAN-156 CHAN-155 CHAN-154 CHAN-153 CHAN-152 
	CHAN-151 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 CHAN-145 CHAN-144
	CHAN-128 CHAN-129 CHAN-130 CHAN-131 CHAN-132 CHAN-133 CHAN-134 CHAN-135
	CHAN-136 CHAN-137 CHAN-138 CHAN-139 CHAN-140 CHAN-141 CHAN-142 CHAN-143
	CHAN-191 CHAN-190 CHAN-189 CHAN-188 CHAN-187 CHAN-186 CHAN-185 CHAN-184
	CHAN-183 CHAN-182 CHAN-181 CHAN-180 CHAN-179 CHAN-178 CHAN-177 CHAN-176
	CHAN-175 CHAN-174 CHAN-173 CHAN-172 CHAN-171 CHAN-170 CHAN-169 CHAN-168 
	CHAN-127 CHAN-126 CHAN-125 CHAN-124 CHAN-123 CHAN-122 CHAN-121 CHAN-120
	CHAN-119 CHAN-118 CHAN-117 CHAN-116 CHAN-115 CHAN-114 CHAN-113 CHAN-112 
	CHAN-111 CHAN-110 CHAN-109 CHAN-108 CHAN-107 CHAN-106 CHAN-105 CHAN-104 
	CHAN-103 CHAN-102 CHAN-101 CHAN-100 CHAN-99  CHAN-98  CHAN-97  CHAN-96  
	CHAN-95  CHAN-94  CHAN-93  CHAN-92  CHAN-91  CHAN-90  CHAN-89  CHAN-88 
	CHAN-87  CHAN-86  CHAN-85  CHAN-84  CHAN-83  CHAN-82  CHAN-81  CHAN-80 
	CHAN-64  CHAN-65  CHAN-66  CHAN-67  CHAN-68  CHAN-69  CHAN-70  CHAN-71 
	CHAN-72  CHAN-73  CHAN-74  CHAN-75  CHAN-76  CHAN-77  CHAN-78  CHAN-79 
	CHAN-63  CHAN-62  CHAN-61  CHAN-60  CHAN-59  CHAN-58  CHAN-57  CHAN-56 
	CHAN-55  CHAN-54  CHAN-53  CHAN-52  CHAN-51  CHAN-50  CHAN-49  CHAN-48 
	CHAN-47  CHAN-46  CHAN-45  CHAN-44  CHAN-43  CHAN-42  CHAN-41  CHAN-40  $

C	   REF X'00000000000000000000000000000000000000', $
 	END, DO $
C $
	DISABLE, TIMER 'TIMER 1' $
	DISABLE, EVENT 'CLOCK1A' $
	DISABLE, EVENT 'PROBE1' $
	DISABLE, EVENT 'PHASE RETURN 1' $
	DISABLE, EVENT 'PHASE ASSERT 1' $
C $
	OUTPUT, C' pcr 200 step 50202 Prove pattern ','TESTJ1',C'\LF\' $
	DISABLE, DIGITAL CONFIGURATION 'J1T1CONFIG'  $
C $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
        ENABLE, DIGITAL CONFIGURATION 'J2T1CONFIG'  $
C $
        ENABLE, TIMER 'TIMER 1' $
	ENABLE, EVENT 'CLOCK1A' $
	ENABLE, EVENT 'PROBE1' $
        ENABLE, EVENT 'PHASE RETURN 1' $
        ENABLE, EVENT 'PHASE ASSERT 1' $
C $
	DO, TIMED DIGITAL,
	  STIM-EVENT 'PHASE RETURN 1',
	  SENSE-EVENT 'PROBE1' $
	  PROVE, (VALUE INTO 'TESTJ2')
	  REF X'0000000000000000000000000000000000000000',
          ON 'DJ2TEST1' 
        CNX HI 
	CHAN-167 CHAN-166 CHAN-165 CHAN-164 CHAN-163 CHAN-162 CHAN-161 CHAN-160
	CHAN-159 CHAN-158 CHAN-157 CHAN-156 CHAN-155 CHAN-154 CHAN-153 CHAN-152 
	CHAN-151 CHAN-150 CHAN-149 CHAN-148 CHAN-147 CHAN-146 CHAN-145 CHAN-144
	CHAN-143 CHAN-142 CHAN-141 CHAN-140 CHAN-139 CHAN-138 CHAN-137 CHAN-136
	CHAN-135 CHAN-134 CHAN-133 CHAN-132 CHAN-131 CHAN-130 CHAN-129 CHAN-128
	CHAN-127 CHAN-126 CHAN-125 CHAN-124 CHAN-123 CHAN-122 CHAN-121 CHAN-120 
	CHAN-119 CHAN-118 CHAN-117 CHAN-116 CHAN-115 CHAN-114 CHAN-113 CHAN-112
	CHAN-111 CHAN-110 CHAN-109 CHAN-108 CHAN-107 CHAN-106 CHAN-105 CHAN-104 
	CHAN-103 CHAN-102 CHAN-101 CHAN-100 CHAN-99  CHAN-98  CHAN-97  CHAN-96 
	CHAN-95  CHAN-94  CHAN-93  CHAN-92  CHAN-91  CHAN-90  CHAN-89  CHAN-88 
	CHAN-87  CHAN-86  CHAN-85  CHAN-84  CHAN-83  CHAN-82  CHAN-81  CHAN-80 
	CHAN-79  CHAN-78  CHAN-77  CHAN-76  CHAN-75  CHAN-74  CHAN-73  CHAN-72 
	CHAN-71  CHAN-70  CHAN-69  CHAN-68  CHAN-67  CHAN-66  CHAN-65  CHAN-64 
	CHAN-63  CHAN-62  CHAN-61  CHAN-60  CHAN-59  CHAN-58  CHAN-57  CHAN-56 
	CHAN-55  CHAN-54  CHAN-53  CHAN-52  CHAN-51  CHAN-50  CHAN-49  CHAN-48 
	CHAN-47  CHAN-46  CHAN-45  CHAN-44  CHAN-43  CHAN-42  CHAN-41  CHAN-40   
	CHAN-39  CHAN-38  CHAN-37  CHAN-36  CHAN-35  CHAN-34  CHAN-33  CHAN-32 
	CHAN-31  CHAN-30  CHAN-29  CHAN-28  CHAN-27  CHAN-26  CHAN-25  CHAN-24 
	CHAN-23  CHAN-22  CHAN-21  CHAN-20  CHAN-19  CHAN-18  CHAN-17  CHAN-16 
	CHAN-15  CHAN-14  CHAN-13  CHAN-12  CHAN-11 $
C $
C	  REF X'0000000000000000000000000000000000000000', $
 	END, DO $
C $
	DISABLE, TIMER 'TIMER 1' $
	DISABLE, EVENT 'CLOCK1A' $
	DISABLE, EVENT 'PROBE1' $
	DISABLE, EVENT 'PHASE RETURN 1' $
	DISABLE, EVENT 'PHASE ASSERT 1' $
C $
	DISABLE, DIGITAL CONFIGURATION 'J2T1CONFIG'  $
C $
	OUTPUT, C' pcr 200 step 50204 Prove pattern ','TESTJ2',C'\LF\' $
	REMOVE, ALL $
       IF, 'E-E' EQ FALSE, THEN $
        OUTPUT, C' RETURN TO MENU ???\LF\'$
        OUTPUT, C' T - MENU '$
        OUTPUT, C' F - RETEST '$
        INPUT, GO-NOGO $
        IF, GO, THEN $ 
	 GO TO, STEP 001050 $
        END, IF $
        GO TO, STEP 100120 $
       END, IF $
C       GO TO, STEP 001050 $
C $
C *******************************************************************
C * End PCR 200 exceptions sets on 157 pins 2/07/07 
C ******************************************************************$
C $
C *******************************************************************
C 02/07/07 - pcr 207 exceptions on static prove, and double static sense $ 
C ******************************************************************$
B $
 100130 OUTPUT, C'pcr 207. fault  TOW_ID at step 60701 \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
C $
	ENABLE, DIGITAL CONFIGURATION 'MOD67_DIG' $
C $
C         ***  INITIAL DIGITAL SETUP  *** $
C $
        STIMULATE, X'0000', ON 'GCRU_CONTROL' $
        STIMULATE, X'0000', ON 'VCRU_CONTROL' $
        STIMULATE, B'1000', ON 'TE_OUTPUTS' $
        STIMULATE, B'00000', ON 'MGS_IN' $
        STIMULATE, X'0000', ON 'GCRU_CONTROL' $
        PROVE, (VALUE) REF X'8000',
		MASK-ONE X'8000',SAVE-COMP 'ERR_TP1',  ON 'TP1_16' $
C        PROVE, (VALUE INTO '200-RESULT3') REF X'8000',
		MASK-ONE X'8000',SAVE-COMP 'ERR_TP1',  ON 'TP1_16' $
	OUTPUT,C'REF1 X8000  SAVE-COMP','ERR_TP1',C'\LF\' $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
 
       STIMULATE, X'3000', ON 'GCRU_CONTROL' $
        PROVE, (VALUE) REF X'0000',
		MASK-ONE X'8000',SAVE-COMP 'ERR_TP2',  ON 'TP1_16' $
C        PROVE, (VALUE INTO '200-RESULT3') REF X'0000',
		MASK-ONE X'8000',SAVE-COMP 'ERR_TP2',  ON 'TP1_16' $
	OUTPUT,C'REF2 X8000  SAVE-COMP','ERR_TP2',C'\LF\' $ 
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
	DISABLE, DIGITAL CONFIGURATION 'MOD67_DIG' $

      OUTPUT, C'pcr 207. fault  TOW_ID at step 60201 \LF\' $

      ENABLE, DIGITAL CONFIGURATION '201' $
C --------- Measure all pulled up pins. Should be Hi --------$
      SENSE, (VALUE INTO '200-RESULT1'), ON '201-OUT' $  
C      PROVE, (VALUE INTO '200-RESULT1'), REF X'00000000000', ON '201-OUT' $  

	OUTPUT,C'200-Result1 ','200-RESULT1',C'\LF\' $ 
      WAIT FOR, 1 SEC $
C --------- Measure all pulled up pins. Should be Lo --------$
      SENSE, (VALUE INTO '200-RESULT2'), ON '201-OUT' $  
C      PROVE, (VALUE INTO '200-RESULT1'), REF X'00000000000', ON '201-OUT' $  
	OUTPUT,C'200-Result2 ','200-RESULT2',C'\LF\' $ 
      DISABLE, DIGITAL CONFIGURATION '201' $

	REMOVE, ALL $
       IF, 'E-E' EQ FALSE, THEN $
        OUTPUT, C' RETURN TO MENU ???\LF\'$
        OUTPUT, C' T - MENU '$
        OUTPUT, C' F - RETEST '$
        INPUT, GO-NOGO $
        IF, GO, THEN $ 
	 GO TO, STEP 001050 $
        END, IF $
        GO TO, STEP 100130 $
       END, IF $
C       GO TO, STEP 001050 $
C $
C *******************************************************************
C * End PCR 207 exceptions sets on 157 pins 3/07/07 
C ******************************************************************$
C $
C $
C *******************************************************************
C 03/15/07 - pcr 232, error log list incorrect and pcr 234 Apply 'til remove $ 
C ******************************************************************$
B $
 100140 OUTPUT, C'pcr error 233 log file list incorrect \LF\' $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $
          ENABLE, DIGITAL CONFIGURATION '307' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 1000 NSEC $ 
              STIMULATE, '300-DATA'(1 THRU 7), ON '307-IN' $
              PROVE, (VALUE INTO '300-RESP'(1 THRU 7))
                  REF         '300-DATA'(1 THRU 7),
                  ERROR       '300-ERROR-LST'(1 THRU 7),
                  ERROR-INDEX '3-ERROR-NDX'(1 THRU 7),
                  FAULT-COUNT 'ERR-COUNT',
                  ON '307-OUT' $                
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '307' $
C $
          FOR, 'IJ' = 1 THRU 7, THEN $
            OUTPUT,  C' ','IJ', C' ', '300-DATA'('IJ'), C' ',
                                    '300-RESP'('IJ'), C'  ',
                                    '300-ERROR-LST'('IJ'), C'  ',
                                    '3-ERROR-NDX'('IJ') $
           END, FOR $
          ENABLE, DIGITAL CONFIGURATION '307' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 1000 NSEC $ 
              STIMULATE, '300-DATA'(1 THRU 7), ON '307-IN' $
              PROVE, (VALUE INTO '300-RESP'(1 THRU 7))
                  REF         '300-DATA'(1 THRU 7),
                  ERROR       '300-ERROR-LST'(1 THRU 7),
                  ERROR-INDEX '3-ERROR-NDX'(1 THRU 7),
                  FAULT-COUNT 'ERR-COUNT',
                  ON '307-OUT' $                
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '307' $
C $
          FOR, 'IJ' = 1 THRU 7, THEN $
            OUTPUT,  C' ','IJ', C' ', '300-DATA'('IJ'), C' ',
                                    '300-RESP'('IJ'), C'  ',
                                    '300-ERROR-LST'('IJ'), C'  ',
                                    '3-ERROR-NDX'('IJ') $
           END, FOR $
          ENABLE, DIGITAL CONFIGURATION '307' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 1000 NSEC $ 
              STIMULATE, '300-DATA'(1 THRU 7), ON '307-IN' $
              PROVE, (VALUE INTO '300-RESP'(1 THRU 7))
                  REF         '300-DATA'(1 THRU 7),
                  ERROR       '300-ERROR-LST'(1 THRU 7),
                  ERROR-INDEX '3-ERROR-NDX'(1 THRU 7),
                  FAULT-COUNT 'ERR-COUNT',
                  ON '307-OUT' $                
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '307' $
C $
          FOR, 'IJ' = 1 THRU 7, THEN $
            OUTPUT,  C' ','IJ', C' ', '300-DATA'('IJ'), C' ',
                                    '300-RESP'('IJ'), C'  ',
                                    '300-ERROR-LST'('IJ'), C'  ',
                                    '3-ERROR-NDX'('IJ') $
           END, FOR $

	REMOVE, ALL $
         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	OUTPUT, C'pcr error 234 Apply to stay active until remove.  \LF\' $
C Do just a byte $
          APPLY, LOGIC DATA,
            VALUE B'01011010', 
            VOLTAGE-ONE 5 V,
            VOLTAGE-ZERO 0 V,
            CNX HI 
              ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 ID-UB1 ID-UB0  $
C $
        MEASURE, (VALUE INTO 'ResultByte'), LOGIC DATA,
             VOLTAGE-ONE  3.5 V,
             CNX HI  ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 ID-UB1 ID-UB0  $
	OUTPUT, C' RMEASURED BYTE =','ResultByte',C'\LF\' $
 
         REMOVE, LOGIC DATA,
            CNX HI 
          	ID-UB7 ID-UB6 ID-UB5 ID-UB4 ID-UB3 ID-UB2 ID-UB1 ID-UB0  $
C $ 
       IF, 'E-E' EQ FALSE, THEN $
        OUTPUT, C' RETURN TO MENU ???\LF\'$
        OUTPUT, C' T - MENU '$
        OUTPUT, C' F - RETEST '$
        INPUT, GO-NOGO $
        IF, GO, THEN $ 
	 GO TO, STEP 001050 $
        END, IF $
        GO TO, STEP 100140 $
       END, IF $
C $
C *******************************************************************
C * End PCR errorlistreport 03/15/07 
C ******************************************************************$
C $
C $
C *******************************************************************
C 03/15/07 - pcr 233  $ 
C ******************************************************************$
B $
 100150	OUTPUT, C'pcr error 232 id check \LF\' $
C $
         ENABLE, DIGITAL CONFIGURATION 'ID_IDENT' $
             SENSE, (VALUE INTO 'ID'), ON 'ID-OUT' $
          DISABLE, DIGITAL CONFIGURATION 'ID_IDENT' $
	  OUTPUT, C' ID TAG ','ID',C'\LF\' $
C $

	CALCULATE, '900-REF'(3)  = B'11' $
	CALCULATE, '900-REF'(2)  = B'11' $
	CALCULATE, '900-REF'(1)  = B'11' $
	CALCULATE, '900-DATA'(3) = B'111' $
        FOR, 'I' = 2 THRU 1 BY -1, THEN $
         CALCULATE, '900-DATA'('I') = SHIFT('900-DATA'('I'+1), 1) $
C        CALCULATE, '900-REF'('I') = SHIFT('900-REF'('I'+1), 1) $
        END, FOR $

     	ENABLE, DIGITAL CONFIGURATION '900' $
        DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '900-DATA'(1 THRU 3), ON '901-INA' $
              PROVE, (VALUE INTO '900-RESP'(1 THRU 3))
                     REF         '900-REF'(1 THRU 3),
                     ERROR       '900-ERROR-LST'(1 THRU 3),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 3),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '901-OUTA' $
        END, DO $
        DISABLE, DIGITAL CONFIGURATION '900' $
        FOR, 'I' = 1 THRU 3, THEN $
         OUTPUT,  'I', C' ', '900-REF'('I'), '900-RESP'('I'),'900-ERROR-LST'('I'), 'ERROR-NDX'('I') $
        END, FOR $
	REMOVE, ALL $

         IF, 'E-E' EQ FALSE, THEN $
    	INPUT, GO-NOGO $
	 END, IF $

	  CALCULATE, '900-REF'(3)  = B'10' $
	  CALCULATE, '900-DATA'(3) = B'100' $
          FOR, 'I' = 2 THRU 1 BY -1, THEN $
             CALCULATE, '900-DATA'('I') = SHIFT('900-DATA'('I'+1), 1) $
             CALCULATE, '900-REF'('I') = SHIFT('900-REF'('I'+1), 1) $
          END, FOR $
C $
          ENABLE, DIGITAL CONFIGURATION '900' $
            DO, TIMED DIGITAL,
              STIM-RATE 10000 WORDS/SEC,
              SENSE-DELAY 50 USEC $ 
              STIMULATE, '900-DATA'(1 THRU 3), ON '901-INA' $
              PROVE, (VALUE INTO '900-RESP'(1 THRU 3))
                     REF         '900-REF'(1 THRU 3),
                     ERROR       '900-ERROR-LST'(1 THRU 3),
                     ERROR-INDEX 'ERROR-NDX'(1 THRU 3),
                     FAULT-COUNT 'ERR-COUNT',
                     ON '901-OUTA' $
            END, DO $
          DISABLE, DIGITAL CONFIGURATION '900' $

        FOR, 'I' = 1 THRU 3, THEN $
         OUTPUT,  'I', C' ', '900-REF'('I'), '900-RESP'('I'),'900-ERROR-LST'('I'), 'ERROR-NDX'('I') $
        END, FOR $
	REMOVE, ALL $

       IF, 'E-E' EQ FALSE, THEN $
        OUTPUT, C' RETURN TO MENU ???\LF\'$
        OUTPUT, C' T - MENU '$
        OUTPUT, C' F - RETEST '$
        INPUT, GO-NOGO $
        IF, GO, THEN $ 
	 GO TO, STEP 001050 $
        END, IF $
        GO TO, STEP 100150 $
       END, IF $
       GO TO, STEP 001050 $
C $
C *******************************************************************
C * End pcr 233  03/19/07 
C ******************************************************************$
C $
B $
 990000 IF, 'FAIL-FLAG' EQ 0, THEN $
          OUTPUT,
          C'  --------------------------------------\LF\',
          C'   END - END TEST\LF\',
          C'      PASSED\LF\',
          C'  --------------------------------------\LF\',
          $
        ELSE $
          OUTPUT,
          C'  --------------------------------------\LF\',
          C'   END - END TEST\LF\',
          C'      FAILED WITH ','FAIL-FLAG',C' NOGOs\LF\',
          C'  --------------------------------------\LF\',
          $
        END, IF  $
   GO TO, STEP 001050 $
B $
 999900 OUTPUT, C'\LF\BYE!\LF\'$
 999999 TERMINATE, ATLAS PROGRAM 'Dwg_716_Benchmark' $